#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-3-Clause
# Copyright 2016-2023, Intel Corporation
#
#
# pmempool_transform/TEST22 -- test for transforming poolset with SINGLEHDR option
#
# case: adding a second device-dax-based replica with different alignment
#

. ../unittest/unittest.sh

require_test_type medium
require_fs_type any

require_dax_device_alignments $SIZE_4KB $SIZE_4KB $SIZE_2MB $SIZE_2MB
require_max_devdax_size $PMEMOBJ_MAX_ALLOC_SIZE

# the test takes too long under pmemcheck
configure_valgrind pmemcheck force-disable

setup

dax_device_zero

LOG=out${UNITTEST_NUM}.log
ERR_LOG=err${UNITTEST_NUM}.log
LOG_TEMP=out${UNITTEST_NUM}_part.log
rm -f $LOG && touch $LOG
rm -f $LOG_TEMP && touch $LOG_TEMP
rm -f $ERR_LOG && touch $ERR_LOG

LAYOUT=OBJ_LAYOUT$SUFFIX
POOLSET_IN=$DIR/poolset.in
POOLSET_OUT=$DIR/poolset.out

# Make sure the total size of devices 2/3 is not smaller than devices 0/1.
# If this is the case, swap devices.
SIZE1=$(($(get_devdax_size 0) + $(get_devdax_size 1)))
SIZE2=$(($(get_devdax_size 2) + $(get_devdax_size 3)))

if [ $SIZE1 -gt $SIZE2 ]; then
	TMP=${DEVICE_DAX_PATH[0]}
	DEVICE_DAX_PATH[0]=${DEVICE_DAX_PATH[2]}
	DEVICE_DAX_PATH[2]=$TMP
	TMP=${DEVICE_DAX_PATH[1]}
	DEVICE_DAX_PATH[1]=${DEVICE_DAX_PATH[3]}
	DEVICE_DAX_PATH[3]=$TMP
fi

# Create poolset files
create_poolset $POOLSET_IN \
	O SINGLEHDR \
	AUTO:${DEVICE_DAX_PATH[0]}:x \
	AUTO:${DEVICE_DAX_PATH[1]}:x

create_poolset $POOLSET_OUT \
	O SINGLEHDR \
	AUTO:${DEVICE_DAX_PATH[2]}:x \
	AUTO:${DEVICE_DAX_PATH[3]}:x \
	R \
	AUTO:${DEVICE_DAX_PATH[0]}:x \
	AUTO:${DEVICE_DAX_PATH[1]}:x

DAX_SIZE[0]=$(get_devdax_size 0)
OFFSET=${DAX_SIZE[0]}
ROOT_SIZE=$[OFFSET + 1024]

# CLI script for writing some data hitting all the parts
WRITE_SCRIPT=$DIR/write_data
cat << EOF > $WRITE_SCRIPT
pr $ROOT_SIZE
srcp 0 TestOK111
srcp $OFFSET TestOK222
EOF

# CLI script for reading 9 characters from all the parts
READ_SCRIPT=$DIR/read_data
cat << EOF > $READ_SCRIPT
srpr 0 9
srpr $OFFSET 9
EOF

# Create a pool
expect_normal_exit $PMEMPOOL$EXESUFFIX create --layout=$LAYOUT obj $POOLSET_IN \
	>> $LOG_TEMP

# Write some data into the pool, hitting all the part files
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $WRITE_SCRIPT $POOLSET_IN >> \
	$LOG_TEMP

# Check if correctly written
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $READ_SCRIPT $POOLSET_IN >> \
	$LOG_TEMP

# Transform poolset
expect_normal_exit $PMEMPOOL$EXESUFFIX transform $POOLSET_IN $POOLSET_OUT >> \
	$LOG_TEMP

# Check if data is still correctly written
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $READ_SCRIPT $POOLSET_OUT >> \
	$LOG_TEMP

# Check metadata by pmempool info
dump_pool_info $POOLSET_OUT >> $LOG_TEMP
dump_pool_info ${DEVICE_DAX_PATH[0]} >> $LOG_TEMP
dump_pool_info ${DEVICE_DAX_PATH[2]} >> $LOG_TEMP

mv $LOG_TEMP $LOG
check

pass
