#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-3-Clause
# Copyright 2016-2024, Intel Corporation
#
#
# pmempool_transform/TEST9 -- test for checking pmempool transform;
#                             remove master replica as dax device,
#                             another dax device as the second replica
#

. ../unittest/unittest.sh
# disabled due to crash until #5982 is fixed
# https://github.com/pmem/pmdk/issues/5982
DISABLED

require_test_type medium
require_dax_devices 2
require_fs_type any

setup

dax_device_zero

LOG=out${UNITTEST_NUM}.log
LOG_TEMP=out${UNITTEST_NUM}_part.log
rm -f $LOG && touch $LOG
rm -f $LOG_TEMP && touch $LOG_TEMP

LAYOUT=OBJ_LAYOUT$SUFFIX
POOLSET_IN=$DIR/poolset.in
POOLSET_OUT=$DIR/poolset.out
HDR_LEN=4096

# Create poolset files
create_poolset $POOLSET_IN \
	AUTO:${DEVICE_DAX_PATH[0]}:x \
	r \
	AUTO:${DEVICE_DAX_PATH[1]}:x

create_poolset $POOLSET_OUT \
	AUTO:${DEVICE_DAX_PATH[1]}:x

# CLI script for writing some data hitting all the parts
WRITE_SCRIPT=$DIR/write_data
cat << EOF > $WRITE_SCRIPT
pr 1M
srcp 0 TestOK111
EOF

# CLI script for reading 9 characters from all the parts
READ_SCRIPT=$DIR/read_data
cat << EOF > $READ_SCRIPT
srpr 0 9
EOF

# Log poolset structures
echo poolset_in >> $LOG_TEMP
cat $POOLSET_IN >> $LOG_TEMP
echo >> $LOG_TEMP
echo poolset_out >> $LOG_TEMP
cat $POOLSET_OUT >> $LOG_TEMP
echo >> $LOG_TEMP

# Create a pool
expect_normal_exit $PMEMPOOL$EXESUFFIX create --layout=$LAYOUT\
	obj $POOLSET_IN >> $LOG_TEMP

# Write some data into the pool, hitting two part files
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $WRITE_SCRIPT $POOLSET_IN >> \
	$LOG_TEMP

# Check if correctly written
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $READ_SCRIPT $POOLSET_IN >> \
	$LOG_TEMP

# Transform poolset
expect_normal_exit $PMEMPOOL$EXESUFFIX transform \
	$POOLSET_IN $POOLSET_OUT >> $LOG_TEMP

# Check if correctly read
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $READ_SCRIPT $POOLSET_OUT >> \
	$LOG_TEMP

# Check metadata by pmempool info
dump_pool_info $POOLSET_OUT >> $LOG_TEMP
dump_pool_info ${DEVICE_DAX_PATH[1]} >> $LOG_TEMP

# Check if dax device's header is cleaned
expect_normal_exit $CMPMAP$EXESUFFIX -z -l $HDR_LEN ${DEVICE_DAX_PATH[0]}

# Exclude error messages printed out on the stderr by PMDK in debug
fgrep -v "*ERROR*" $LOG_TEMP > $LOG
rm $LOG_TEMP

check

pass
