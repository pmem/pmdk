#!/usr/bin/env bash
#
# Copyright 2016-2017, Intel Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#     * Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# pmempool_transform/TEST18 -- test for transform with NOHDRS option
#
# removing the NOHDRS option
# case: two replicas:
# 1. two 4KB-aligned device daxes
# 2. three file-based parts
# revert transformation hdrs->nohdrs (TEST14)
#
export UNITTEST_NAME=pmempool_transform/TEST18
export UNITTEST_NUM=18

. ../unittest/unittest.sh

SIZE_4KB=4096
SIZE_2MB=2097152

require_test_type medium
require_fs_type any

require_dax_devices 2
require_dax_device_alignments $SIZE_4KB $SIZE_4KB

setup

dax_device_zero

LOG=out${UNITTEST_NUM}.log
LOG_TEMP=out${UNITTEST_NUM}_part.log
rm -rf $LOG && touch $LOG
rm -rf $LOG_TEMP && touch $LOG_TEMP

LAYOUT=OBJ_LAYOUT$SUFFIX
POOLSET_IN=$DIR/poolset.in
POOLSET_OUT=$DIR/poolset.out

DAX_SIZE[0]=$(get_devdax_size 0)

# Create poolset files
create_poolset $POOLSET_IN \
	AUTO:${DEVICE_DAX_PATH[0]}:x \
	AUTO:${DEVICE_DAX_PATH[1]}:x \
	R \
	${DAX_SIZE[0]}:$DIR/part00:x \
	1G:$DIR/part01:x

create_poolset $POOLSET_OUT \
	O NOHDRS \
	AUTO:${DEVICE_DAX_PATH[0]}:x \
	AUTO:${DEVICE_DAX_PATH[1]}:x \
	R \
	${DAX_SIZE[0]}:$DIR/part00:x \
	1G:$DIR/part01:x

OFFSET=${DAX_SIZE[0]}
ROOT_SIZE=$[OFFSET + 1024]

# CLI script for writing some data hitting all the parts
WRITE_SCRIPT=$DIR/write_data
cat << EOF > $WRITE_SCRIPT
pr $ROOT_SIZE
srcp 0 TestOK111
srcp $OFFSET TestOK222
EOF

# CLI script for reading 9 characters from all the parts
READ_SCRIPT=$DIR/read_data
cat << EOF > $READ_SCRIPT
srpr 0 9
srpr $OFFSET 9
EOF

# Log poolset structures
echo poolset_in >> $LOG_TEMP
cat $POOLSET_IN >> $LOG_TEMP
echo >> $LOG_TEMP
echo poolset_out >> $LOG_TEMP
cat $POOLSET_OUT >> $LOG_TEMP
echo >> $LOG_TEMP

# Create a pool
expect_normal_exit $PMEMPOOL$EXESUFFIX create --layout=$LAYOUT obj $POOLSET_IN \
	>> $LOG_TEMP

# Write some data into the pool, hitting two part files
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $WRITE_SCRIPT $POOLSET_IN >> \
	$LOG_TEMP

# Check if correctly written
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $READ_SCRIPT $POOLSET_IN >> \
	$LOG_TEMP

# Transform poolset
expect_normal_exit $PMEMPOOL$EXESUFFIX transform $POOLSET_IN $POOLSET_OUT >> \
	$LOG_TEMP

# Check if correctly transformed
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $READ_SCRIPT $POOLSET_OUT >> \
	$LOG_TEMP

# Transform poolset back
expect_normal_exit $PMEMPOOL$EXESUFFIX transform $POOLSET_OUT $POOLSET_IN >> \
	$LOG_TEMP

# Check if correctly transformed
expect_normal_exit $PMEMOBJCLI$EXESUFFIX -s $READ_SCRIPT $POOLSET_IN >> \
	$LOG_TEMP

# Check metadata by pmempool info
dump_pool_info $POOLSET_IN >> $LOG_TEMP
dump_pool_info ${DEVICE_DAX_PATH[0]} >> $LOG_TEMP
dump_pool_info ${DEVICE_DAX_PATH[1]} >> $LOG_TEMP
dump_pool_info $DIR/part00 >> $LOG_TEMP
dump_pool_info $DIR/part01 >> $LOG_TEMP

mv $LOG_TEMP $LOG
check

pass
