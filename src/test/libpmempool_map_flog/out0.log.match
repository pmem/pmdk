Zeroed: bttdevice.arena.btt_map(0)=0x80000000
libpmempool_map_flog$(nW)TEST0: START: libpmempool_test$(nW)
 $(nW)libpmempool_test$(nW) -r 1 -t btt -a 1 $(nW)
checking BTT Info headers
arena 0: BTT Info header checksum correct
checking BTT Map and Flog
arena 0: checking BTT Map and Flog
status = consistent
libpmempool_map_flog$(nW)TEST0: DONE
Zeroed: bttdevice.arena.btt_map(0)=0x80000001
libpmempool_map_flog$(nW)TEST0: START: libpmempool_test$(nW)
 $(nW)libpmempool_test$(nW) -r 1 -t btt -a 1 $(nW)
checking BTT Info headers
arena 0: BTT Info header checksum correct
checking BTT Map and Flog
arena 0: checking BTT Map and Flog
arena 0: BTT Map entry 1 duplicated at 1
arena 0: unmapped block 0
arena 0: number of unmapped blocks: 1
arena 0: number of invalid BTT Map entries: 1
Do you want to repair invalid BTT Map entries?
arena 0: storing 0x40000001 at 0 BTT Map entry
arena 0: storing 0x40000000 at 1 BTT Map entry
status = repaired
libpmempool_map_flog$(nW)TEST0: DONE
Error: bttdevice.arena.btt_map(0)=0x40000000
libpmempool_map_flog$(nW)TEST0: START: libpmempool_test$(nW)
 $(nW)libpmempool_test$(nW) -r 1 -t btt -a 1 $(nW)
checking BTT Info headers
arena 0: BTT Info header checksum correct
checking BTT Map and Flog
arena 0: checking BTT Map and Flog
status = consistent
libpmempool_map_flog$(nW)TEST0: DONE
Error: bttdevice.arena.btt_map(0)=0x40000001
libpmempool_map_flog$(nW)TEST0: START: libpmempool_test$(nW)
 $(nW)libpmempool_test$(nW) -r 1 -t btt -a 1 $(nW)
checking BTT Info headers
arena 0: BTT Info header checksum correct
checking BTT Map and Flog
arena 0: checking BTT Map and Flog
arena 0: BTT Map entry 1 duplicated at 1
arena 0: unmapped block 0
arena 0: number of unmapped blocks: 1
arena 0: number of invalid BTT Map entries: 1
Do you want to repair invalid BTT Map entries?
arena 0: storing 0x40000001 at 0 BTT Map entry
arena 0: storing 0x40000000 at 1 BTT Map entry
status = repaired
libpmempool_map_flog$(nW)TEST0: DONE
Initial: bttdevice.arena.btt_map(0)=0x00000000
libpmempool_map_flog$(nW)TEST0: START: libpmempool_test$(nW)
 $(nW)libpmempool_test$(nW) -r 1 -t btt -a 1 $(nW)
checking BTT Info headers
arena 0: BTT Info header checksum correct
checking BTT Map and Flog
arena 0: checking BTT Map and Flog
status = consistent
libpmempool_map_flog$(nW)TEST0: DONE
Initial: bttdevice.arena.btt_map(0)=0x00000001
libpmempool_map_flog$(nW)TEST0: START: libpmempool_test$(nW)
 $(nW)libpmempool_test$(nW) -r 1 -t btt -a 1 $(nW)
checking BTT Info headers
arena 0: BTT Info header checksum correct
checking BTT Map and Flog
arena 0: checking BTT Map and Flog
status = consistent
libpmempool_map_flog$(nW)TEST0: DONE
Normal: bttdevice.arena.btt_map(0)=0xC0000000
libpmempool_map_flog$(nW)TEST0: START: libpmempool_test$(nW)
 $(nW)libpmempool_test$(nW) -r 1 -t btt -a 1 $(nW)
checking BTT Info headers
arena 0: BTT Info header checksum correct
checking BTT Map and Flog
arena 0: checking BTT Map and Flog
status = consistent
libpmempool_map_flog$(nW)TEST0: DONE
Normal: bttdevice.arena.btt_map(0)=0xC0000001
libpmempool_map_flog$(nW)TEST0: START: libpmempool_test$(nW)
 $(nW)libpmempool_test$(nW) -r 1 -t btt -a 1 $(nW)
checking BTT Info headers
arena 0: BTT Info header checksum correct
checking BTT Map and Flog
arena 0: checking BTT Map and Flog
arena 0: BTT Map entry 1 duplicated at 1
arena 0: unmapped block 0
arena 0: number of unmapped blocks: 1
arena 0: number of invalid BTT Map entries: 1
Do you want to repair invalid BTT Map entries?
arena 0: storing 0x40000001 at 0 BTT Map entry
arena 0: storing 0x40000000 at 1 BTT Map entry
status = repaired
libpmempool_map_flog$(nW)TEST0: DONE
