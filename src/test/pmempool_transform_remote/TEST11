#!/usr/bin/env bash
#
# Copyright 2017, Intel Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#     * Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# pmempool_transform_remote/TEST11 -- test for pmempool transform with NOHDRS
#                                    option
#
# adding a remote replica
# local replica: files
# remote replica: device daxes, 4KB alignment
#
export UNITTEST_NAME=pmempool_transform_remote/TEST11
export UNITTEST_NUM=11

. ../unittest/unittest.sh

require_test_type	medium
require_fs_type		any

. common.sh

require_node_dax_device 0 2

require_node_dax_device_alignments 0 $SIZE_4KB $SIZE_4KB

setup

node_dax_device_zero 0

# Create poolset files
create_poolset $DIR/$POOLSET_LOCAL_IN \
	O NOHDRS \
	1000M:${NODE_DIR[1]}part00:x \
	1000M:${NODE_DIR[1]}part01:x

create_poolset $DIR/$POOLSET_LOCAL_OUT \
	O NOHDRS \
	1000M:${NODE_DIR[1]}part00:x \
	1000M:${NODE_DIR[1]}part01:x \
	m \
	${NODE_ADDR[0]}:$POOLSET_REMOTE

create_poolset $DIR/$POOLSET_REMOTE \
	O NOHDRS \
	AUTO:$(get_node_devdax_path 0 0) \
	AUTO:$(get_node_devdax_path 0 1)

# CLI script for writing some data hitting all the parts
WRITE_SCRIPT=write_data
cat << EOF > $DIR/$WRITE_SCRIPT
pmemobj_root 1030M
str_root_copy 0 TestOK111
str_root_copy 1000M TestOK222
EOF

# CLI script for reading 9 characters from all the parts
READ_SCRIPT=read_data
cat << EOF > $DIR/$READ_SCRIPT
str_root_print 0 9
str_root_print 1000M 9
EOF

copy_files_to_node 1 ${NODE_DIR[1]} $DIR/$POOLSET_LOCAL_IN
copy_files_to_node 1 ${NODE_DIR[1]} $DIR/$POOLSET_LOCAL_OUT
copy_files_to_node 0 ${NODE_DIR[0]} $DIR/$POOLSET_REMOTE
copy_files_to_node 1 ${NODE_DIR[1]} $DIR/$WRITE_SCRIPT
copy_files_to_node 1 ${NODE_DIR[1]} $DIR/$READ_SCRIPT

check_files_on_node 1 $POOLSET_LOCAL_IN $POOLSET_LOCAL_OUT $WRITE_SCRIPT $READ_SCRIPT
check_files_on_node 0 $POOLSET_REMOTE

# Create a pool
expect_normal_exit run_on_node 1 ../pmempool rm -sf ${NODE_DIR[1]}$POOLSET_LOCAL_IN
expect_normal_exit run_on_node 1 ../pmempool rm -sf ${NODE_DIR[1]}$POOLSET_LOCAL_OUT
expect_normal_exit run_on_node 1 ../pmempool create obj ${NODE_DIR[1]}$POOLSET_LOCAL_IN

# Write some data into the pool, hitting two part files
exec_pmemobjcli_script 1 ${NODE_DIR[1]}$WRITE_SCRIPT ${NODE_DIR[1]}$POOLSET_LOCAL_IN /dev/null
exec_pmemobjcli_script 1 ${NODE_DIR[1]}$READ_SCRIPT ${NODE_DIR[1]}$POOLSET_LOCAL_IN before.data.log

# Transform poolset
expect_normal_exit run_on_node 1 ../pmempool transform \
	${NODE_DIR[1]}$POOLSET_LOCAL_IN ${NODE_DIR[1]}$POOLSET_LOCAL_OUT

# Check if data is still correctly written
exec_pmemobjcli_script 1 ${NODE_DIR[1]}$READ_SCRIPT ${NODE_DIR[1]}$POOLSET_LOCAL_OUT after.data.log

# Check metadata by pmempool info
dump_info_log 1 ${NODE_DIR[1]}$POOLSET_LOCAL_OUT $LOG
dump_info_log 1 ${NODE_DIR[1]}part00 $LOG
dump_info_log 0 $(get_node_devdax_path 0 0) $LOG

# Compare the logs
diff_log 1 before.data.log after.data.log

check
pass
