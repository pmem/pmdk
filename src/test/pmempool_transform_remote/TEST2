#!/usr/bin/env bash
#
# Copyright 2017, Intel Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#     * Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# pmempool_transform_remote/TEST2 -- test for checking pmempool transform;
#                                    removing the first of two remote replicas
#
export UNITTEST_NAME=pmempool_transform_remote/TEST2
export UNITTEST_NUM=2

. ../unittest/unittest.sh

require_test_type	medium
require_fs_type		any

setup

. common.sh

# Create local poolset files
create_poolset $DIR/$POOLSET_LOCAL_IN \
	10M:${NODE_DIRS[0]}/part00:x \
	10M:${NODE_DIRS[0]}/part01:x \
	m ${NODE_ADDR[1]}:$POOLSET_REMOTE1 \
	m ${NODE_ADDR[1]}:$POOLSET_REMOTE2

create_poolset $DIR/$POOLSET_LOCAL_OUT \
	10M:${NODE_DIRS[0]}/part00:x \
	10M:${NODE_DIRS[0]}/part01:x \
	m ${NODE_ADDR[1]}:$POOLSET_REMOTE2

copy_files_to_node 0 . $DIR/$POOLSET_LOCAL_IN
copy_files_to_node 0 . $DIR/$POOLSET_LOCAL_OUT

# Create remote poolset files
create_poolset $DIR/$POOLSET_REMOTE1 \
	20M:${NODE_DIRS[1]}/remote.partr1

create_poolset $DIR/$POOLSET_REMOTE2 \
	20M:${NODE_DIRS[1]}/remote.partr2

copy_files_to_node 1 . $DIR/$POOLSET_REMOTE1
copy_files_to_node 1 . $DIR/$POOLSET_REMOTE2

# Create a pool
expect_normal_exit run_on_node 0 ../pmempool rm -sf $POOLSET_LOCAL_IN
expect_normal_exit run_on_node 0 ../pmempool rm -sf $POOLSET_LOCAL_OUT
expect_normal_exit run_on_node 0 ../pmempool create obj $POOLSET_LOCAL_IN

# Log the first replica structure
dump_info_log 0 part00 before.00.log
dump_info_log 0 part01 before.01.log

# Write some data into the pool, hitting two part files
expect_normal_exit run_on_node 0 "\"../pmemobjcli -s $WRITE_SCRIPT \
	$POOLSET_LOCAL_IN >> $LOG\""

# Check if correctly written
expect_normal_exit run_on_node 0 "\"../pmemobjcli -s $READ_SCRIPT \
	$POOLSET_LOCAL_IN >> $LOG\""

# Transform poolset
expect_normal_exit run_on_node 0 "\"../pmempool transform \
	$POOLSET_LOCAL_IN $POOLSET_LOCAL_OUT >> $LOG\""

# Check if correctly copied
expect_normal_exit run_on_node 0 "\"../pmemobjcli -s $READ_SCRIPT \
	$POOLSET_LOCAL_OUT >> $LOG\""

# Log the first replica structure
dump_info_log 0 part00 after.00.log
dump_info_log 0 part01 after.01.log

# Compare the logs
diff_log 0 before.00.log after.00.log
diff_log 0 before.01.log after.01.log

check

pass
