==$(N)== Memcheck, a memory error detector
==$(N)== Copyright $(*)
==$(N)== Using $(*)
==$(N)== Command: $(*)
==$(N)== Parent PID: $(N)
==$(N)== 
==$(N)== Invalid write of size 4
==$(N)==    at 0x$(X): main (cto_valgrind.c:$(N))
==$(N)==  Address 0x$(X) is 0 bytes inside a block of size 3,145,728 free'd
==$(N)==    at 0x$(X): je_cto_je_valgrind_freelike_block ($(*))
$(OPT)==$(N)==    by 0x$(X): pool_ifree (jemalloc.c:$(N))
$(OPT)==$(N)==    by 0x$(X): je_cto_pool_free (jemalloc.c:$(N))
$(OPT)==$(N)==    by 0x$(X): pmemcto_free (cto.c:$(N))
==$(N)==    by 0x$(X): main (cto_valgrind.c:$(N))
$(OPT)==$(N)==  Block was alloc'd at
$(OPT)==$(N)==    at 0x$(X): je_cto_pool_malloc ($(*))
$(OPT)==$(N)==    by 0x$(X): pmemcto_malloc (cto.c:$(N))
$(OPT)==$(N)==    by 0x$(X): main (cto_valgrind.c:$(N))
==$(N)== 
==$(N)== Invalid write of size 4
==$(N)==    at 0x$(X): main (cto_valgrind.c:$(N))
==$(N)==  Address 0x$(X) is 0 bytes inside a recently re-allocated block of size 8,388,608 alloc'd
==$(N)==    at 0x$(X): je_cto_pool_malloc ($(*))
$(OPT)==$(N)==    by 0x$(X): pmemcto_malloc (cto.c:$(N))
==$(N)==    by 0x$(X): main (cto_valgrind.c:$(N))
==$(N)== 
==$(N)== 
==$(N)== HEAP SUMMARY:
==$(N)==     in use at exit: $(NC) bytes in $(N) blocks
==$(N)==   total heap usage: $(NC) allocs, $(NC) frees, $(*) bytes allocated
==$(N)== 
==$(N)== 8,388,608 bytes in 1 blocks are definitely lost in loss record $(N) of $(N)
==$(N)==    at 0x$(X): je_cto_pool_malloc ($(*))
$(OPT)==$(N)==    by 0x$(X): pmemcto_malloc (cto.c:$(N))
==$(N)==    by 0x$(X): main (cto_valgrind.c:$(N))
==$(N)== 
==$(N)== LEAK SUMMARY:
==$(N)==    definitely lost: 8,388,608 bytes in 1 blocks
==$(N)==    indirectly lost: 0 bytes in 0 blocks
==$(N)==      possibly lost: 0 bytes in 0 blocks
==$(N)==    still reachable: 0 bytes in 0 blocks
==$(N)==         suppressed: $(NC) bytes in $(N) blocks
==$(N)== 
==$(N)== For counts of detected and suppressed errors, rerun with: -v
==$(N)== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: $(N) from $(N))
