#!/usr/bin/env bash
#
# Copyright 2019, Intel Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#     * Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

#
# src/test/rpmem_basic/TEST21 -- unit test for rpmem_flush and rpmem_drain
# with device dax
#

. ../unittest/unittest.sh

require_test_type medium

require_fs_type any
require_build_type nondebug debug

require_nodes 2
require_node_dax_device 0 1
require_node_dax_device 1 1

. setup.sh

setup

LOG=out${UNITTEST_NUM}.log
LOG_TEMP=out${UNITTEST_NUM}_part.log

create_poolset $DIR/pool0.set AUTO:$(get_node_devdax_path 0 0)
create_poolset $DIR/pool1.set AUTO:$(get_node_devdax_path 0 0) O SINGLEHDR
create_poolset $DIR/pool2.set AUTO:$(get_node_devdax_path 0 0) O NOHDRS

expect_normal_exit run_on_node 0 rm -rf $PART_DIR
expect_normal_exit run_on_node 0 mkdir -p ${RPMEM_POOLSET_DIR[0]}
expect_normal_exit run_on_node 0 mkdir -p $PART_DIR
copy_files_to_node 0 ${RPMEM_POOLSET_DIR[0]} $DIR/{pool0.set,pool1.set,pool2.set}

expect_normal_exit run_on_node 0 ../pmempool rm -sf ${RPMEM_POOLSET_DIR[0]}/{pool0.set,pool1.set,pool2.set}
expect_normal_exit run_on_node 1 ../pmempool rm -sf $(get_node_devdax_path 0 0)

# pool0:

expect_normal_exit run_on_node 1 ./rpmem_basic$EXESUFFIX\
	test_create 0 pool0.set ${NODE_ADDR[0]} $(get_node_devdax_path 1 0) 0 none\
	test_flush 0 0 1 1 1\
	test_drain 0 1\
	test_close 0\
	test_open 0 pool0.set ${NODE_ADDR[0]} $(get_node_devdax_path 1 0) 0 init none\
	test_flush 0 0 8 8 1\
	test_drain 0 8\
	test_close 0\
	test_remove ${NODE_ADDR[0]} pool0.set 0 0
run_on_node 1 "cat $LOG >> $LOG_TEMP"

# pool1 (w/ SIGNLEHDR option):

expect_normal_exit run_on_node 1 ./rpmem_basic$EXESUFFIX\
	test_create 0 pool1.set ${NODE_ADDR[0]} $(get_node_devdax_path 1 0) 0 singlehdr\
	test_flush 0 0 1 1 1\
	test_drain 0 1\
	test_close 0\
	test_open 0 pool1.set ${NODE_ADDR[0]} $(get_node_devdax_path 1 0) 0 init singlehdr\
	test_flush 0 0 8 8 1\
	test_drain 0 8\
	test_close 0\
	test_remove ${NODE_ADDR[0]} pool1.set 0 0
run_on_node 1 "cat $LOG >> $LOG_TEMP"

# pool2 (w/ NOHDRS option):

expect_normal_exit run_on_node 1 ./rpmem_basic$EXESUFFIX\
	test_create 0 pool2.set ${NODE_ADDR[0]} $(get_node_devdax_path 1 0) 0 noattr\
	test_flush 0 0 1 1 1\
	test_drain 0 1\
	test_close 0\
	test_open 0 pool2.set ${NODE_ADDR[0]} $(get_node_devdax_path 1 0) 0 init noattr\
	test_flush 0 0 8 8 1\
	test_drain 0 8\
	test_close 0\
	test_remove ${NODE_ADDR[0]} pool2.set 0 0
run_on_node 1 "cat $LOG >> $LOG_TEMP"

run_on_node 1 mv $LOG_TEMP $LOG
check
pass
