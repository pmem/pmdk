tests = {
    'arch_flags': {},
    'blk_include': {},
    'blk_nblock': {},
    'blk_non_zero': {},
    'blk_pool': {},
    'blk_pool_lock': {},
    'blk_pool_win': {},
    'blk_recovery': {},
    'blk_rw': {},
    'blk_rw_mt': {},
    'bttdevice': {},
    'checksum': {},
    'compat_incompat_features': {},
    'ctl_cow': {},
    'ctl_prefault': {},
    'daxio': {},
    'ex_libpmem': {},
    'ex_libpmem2': {},
    'ex_libpmemblk': {},
    'ex_libpmemlog': {},
    'ex_libpmemobj': {},
    'ex_libpmemset': {},
    'ex_librpmem_basic': {},
    'ex_librpmem_fibonacci': {},
    'ex_librpmem_hello': {},
    'ex_librpmem_manpage': {},
    'ex_linkedlist': {},
    'ex_pmreorder': {},
    'getopt': {},
    'libpmempool_api': {},
    'libpmempool_api_win': {},
    'libpmempool_backup': {},
    'libpmempool_bttdev': {},
    'libpmempool_check_version': {},
    'libpmempool_feature': {},
    'libpmempool_include': {},
    'libpmempool_map_flog': {},
    'libpmempool_rm': {},
    'libpmempool_rm_remote': {},
    'libpmempool_rm_win': {},
    'libpmempool_sync': {},
    'libpmempool_sync_win': {},
    'libpmempool_transform': {},
    'libpmempool_transform_win': {},
    'log_basic': {},
    'log_include': {},
    'log_pool': {},
    'log_pool_lock': {},
    'log_pool_win': {},
    'log_recovery': {},
    'log_walker': {},
    'magic': {},
    'mmap': {},
    'mmap_fixed': {},
    'obj_action': {},
    'obj_alloc': {},
    'obj_badblock': {},
    'obj_basic_integration': {},
    'obj_bucket': {},
    'obj_check': {},
    'obj_check_remote': {},
    'obj_constructor': {},
    'obj_critnib': {},
    'obj_critnib_mt': {},
    'obj_ctl_alignment': {},
    'obj_ctl_alloc_class': {},
    'obj_ctl_alloc_class_config': {},
    'obj_ctl_arenas': {},
    'obj_ctl_config': {},
    'obj_ctl_debug': {},
    'obj_ctl_heap_size': {},
    'obj_ctl_stats': {},
    'obj_debug': {},
    'obj_defrag': {},
    'obj_defrag_advanced': {},
    'obj_direct': {},
    'obj_direct_volatile': {},
    'obj_extend': {},
    'obj_first_next': {},
    'obj_fragmentation': {},
    'obj_fragmentation2': {},
    'obj_heap': {},
    'obj_heap_interrupt': {},
    'obj_heap_state': {},
    'obj_include': {},
    'obj_lane': {},
    'obj_layout': {},
    'obj_list': {},
    'obj_list_insert': {},
    'obj_list_macro': {},
    'obj_list_move': {},
    'obj_list_recovery': {},
    'obj_list_remove': {},
    'obj_list_valgrind': {},
    'obj_locks': {},
    'obj_many_size_allocs': {},
    'obj_mem': {},
    'obj_memblock': {},
    'obj_memcheck': {},
    'obj_memcheck_register': {},
    'obj_memops': {},
    'obj_oid_thread': {},
    'obj_out_of_memory': {},
    'obj_persist_count': {},
    'obj_pmalloc_basic': {},
    'obj_pmalloc_mt': {},
    'obj_pmalloc_oom_mt': {},
    'obj_pmalloc_rand_mt': {},
    'obj_pmemcheck': {},
    'obj_pool': {},
    'obj_pool_lock': {},
    'obj_pool_lookup': {},
    'obj_pool_open_mt': {},
    'obj_pool_win': {},
    'obj_realloc': {},
    'obj_recovery': {},
    'obj_recreate': {},
    'obj_reorder_basic': {},
    'obj_root': {},
    'obj_rpmem_basic_integration': {},
    'obj_rpmem_heap_interrupt': {},
    'obj_rpmem_heap_state': {},
    'obj_sds': {},
    'obj_strdup': {},
    'obj_sync': {},
    'obj_toid': {},
    'obj_tx_add_range': {},
    'obj_tx_add_range_direct': {},
    'obj_tx_alloc': {},
    'obj_tx_callbacks': {},
    'obj_tx_flow': {},
    'obj_tx_free': {},
    'obj_tx_invalid': {},
    'obj_tx_lock': {},
    'obj_tx_locks': {},
    'obj_tx_locks_abort': {},
    'obj_tx_mt': {},
    'obj_tx_realloc': {},
    'obj_tx_strdup': {},
    'obj_tx_user_data': {},
    'obj_ulog_size': {},
    'obj_zones': {},
    'out_err': {},
    'out_err_mt': {},
    'out_err_mt_win': {},
    'out_err_win': {},
    'pmem2_api': {},
    'pmem2_badblock': {},
    'pmem2_badblock_mocks': {},
    'pmem2_compat': {},
    'pmem2_config': {},
    'pmem2_deep_flush': {},
    'pmem2_granularity': {},
    'pmem2_granularity_detection': {},
    'pmem2_include': {},
    'pmem2_integration': {},
    'pmem2_map': {},
    'pmem2_map_from_existing': {},
    'pmem2_map_prot': {},
    'pmem2_memcpy': {},
    'pmem2_mem_ext': {},
    'pmem2_memmove': {},
    'pmem2_memset': {},
    'pmem2_movnt': {},
    'pmem2_movnt_align': {},
    'pmem2_perror': {},
    'pmem2_persist': {},
    'pmem2_persist_valgrind': {},
    'pmem2_source': {},
    'pmem2_source_alignment': {},
    'pmem2_source_numa': {},
    'pmem2_source_size': {},
    'pmem2_usc': {},
    'pmem2_vm_reservation': {},
    'pmem_deep_persist': {},
    'pmem_eADR_functions': {},
    'pmem_has_auto_flush': {},
    'pmem_has_auto_flush_win': {},
    'pmem_include': {},
    'pmem_is_pmem': {},
    'pmem_is_pmem_posix': {},
    'pmem_is_pmem_windows': {},
    'pmem_map_file': {},
    'pmem_map_file_trunc': {},
    'pmem_map_file_win': {},
    'pmem_memcpy': {},
    'pmem_memmove': {},
    'pmem_memset': {},
    'pmem_movnt': {},
    'pmem_movnt_align': {},
    'pmemobjcli': {},
    'pmempool_check': {},
    'pmempool_create': {},
    'pmempool_dump': {},
    'pmempool_feature': {},
    'pmempool_feature_remote': {},
    'pmempool_help': {},
    'pmempool_info': {},
    'pmempool_info_remote': {},
    'pmempool_rm': {},
    'pmempool_rm_remote': {},
    'pmempool_sync': {},
    'pmempool_sync_remote': {},
    'pmempool_transform': {},
    'pmempool_transform_remote': {},
    'pmemset_badblock': {},
    'pmemset_config': {},
    'pmemset_deep_flush': {},
    'pmemset_event': {},
    'pmemset_file': {},
    'pmemset_include': {},
    'pmemset_map_config': {},
    'pmemset_memcpy': {},
    'pmemset_memmove': {},
    'pmemset_memset': {},
    'pmemset_new': {},
    'pmemset_part': {},
    'pmemset_perror': {},
    'pmemset_persist': {},
    'pmemset_sds': {},
    'pmemset_source': {},
    'pmemspoil': {},
    'pmem_unmap': {},
    'pmem_valgr_simple': {},
    'pmreorder_flushes': {},
    'pmreorder_simple': {},
    'pmreorder_stack': {},
    'remote_basic': {},
    'remote_obj_basic': {},
    'rpmem_addr': {},
    'rpmem_addr_ext': {},
    'rpmem_basic': {},
    'rpmemd_config': {},
    'rpmemd_db': {},
    'rpmemd_dbg': {},
    'rpmemd_log': {},
    'rpmemd_obc': {},
    'rpmemd_util': {},
    'rpmem_fip': {},
    'rpmem_obc': {},
    'rpmem_obc_int': {},
    'rpmem_proto': {},
    'scope': {},
    'set_funcs': {},
    'signal_handle': {},
    'sync-remotes': {},
    'tools': {},
    'traces': {},
    'traces_custom_function': {},
    'traces_pmem': {},
    'unicode_api': {},
    'unicode_match_script': {},
    'unittest': {},
    'util_badblock': {},
    'util_cpuid': {},
    'util_ctl': {},
    'util_extent': {},
    'util_file_create': {},
    'util_file_open': {},
    'util_is_absolute': {},
    'util_is_poolset': {},
    'util_is_zeroed': {},
    'util_map_proc': {},
    'util_parse_size': {},
    'util_pool_hdr': {},
    'util_poolset': {},
    'util_poolset_foreach': {},
    'util_poolset_parse': {},
    'util_poolset_size': {},
    'util_ravl': {},
    'util_sds': {},
    'util_uuid_generate': {},
    'util_vec': {},
    'util_vecq': {},
    'win_common': {},
    'win_lists': {},
    'win_mmap_dtor': {},
    'win_poolset_unmap': {},
    'win_signal': {},
}

foreach t, attrs : tests
    if not attrs.get('enabled', true)
        continue
    endif

    e = executable(
        t,
        attrs.get('sources'),
        c_args: attrs.get('c_args', []),
        include_directories: attrs.get('include_directories', []),
        dependencies: attrs.get('dependencies', []),
    )
endforeach
