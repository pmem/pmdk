#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-3-Clause
# Copyright 2018-2023, Intel Corporation
#
#
# pmempool_rm/TEST11 -- test for pmempool rm using 'yes','no' responses
#

. ../unittest/unittest.sh

require_test_type medium
require_fs_type any

setup

LOG=out${UNITTEST_NUM}.log
rm -f $LOG && touch $LOG

# Create pmemobj pool
expect_normal_exit $PMEMPOOL$EXESUFFIX create -m444 obj $DIR/pool.obj

# Create poolset with replica
create_poolset $DIR/pool.set 32M:$DIR/pool.part1:z 32M:$DIR/pool.part2:z\
        R 32M:$DIR/rep.part1:z 32M:$DIR/rep.part2:z

# Check if pools exists
check_files\
	$DIR/pool.obj\
	$DIR/pool.set\
	$DIR/pool.part1\
	$DIR/pool.part2\
	$DIR/rep.part1\
	$DIR/rep.part2

# Try to remove all files in interactive mode
expect_normal_exit $PMEMPOOL$EXESUFFIX rm -il\
	$DIR/pool.obj\
	$DIR/pool.set >> $LOG 2>&1 <<EOF
N
n
Yes
yes
Y
y
EOF

check_files\
	$DIR/pool.obj\
	$DIR/pool.part1\

check_no_files\
	$DIR/pool.part2\
	$DIR/rep.part1\
	$DIR/rep.part2\
	$DIR/pool.set

# Test if behavior is proper when we type improper input
expect_normal_exit $PMEMPOOL$EXESUFFIX rm -il\
	$DIR/pool.obj\
	$DIR/pool.part1 >> $LOG 2>&1 <<EOF
fsdfdsf
nope
bla
xd

N
EOF

check_no_files\
	$DIR/pool.obj

check_files\
	$DIR/pool.part1

pass
