==$(N)== Memcheck, a memory error detector
==$(N)== Copyright $(*)
==$(N)== Using $(*)
==$(N)== Command:$(*)
==$(N)== Parent PID: $(N)
==$(N)== 
$(OPT)==$(N)== Use of uninitialised value of size 8
$(OPX)==$(N)== Syscall param write(buf) points to uninitialised byte(s)
$(OPT)==$(N)==    at 0x$(X): _itoa_word $(*)
$(OPX)==$(N)==    at 0x$(X): _write $(*)
$(OPT)==$(N)==    by 0x$(X): vfprintf $(*)
$(OPX)==$(N)==    by 0x$(X): $(*) (in /lib/libc.so.$(N))
$(OPT)==$(N)==    by 0x$(X): vsnprintf $(*)
$(OPX)==$(N)==    by 0x$(X): $(*) (in /lib/libc.so.$(N))
$(OPT)==$(N)==    by 0x$(X): $(*) (in /lib/libc.so.$(N))
$(OPT)==$(N)==    by 0x$(X): fputs $(*)
==$(N)==    by 0x$(X): vout (ut.c:$(N))
==$(N)==    by 0x$(X): ut_out (ut.c:$(N))
==$(N)==    by 0x$(X): do_iterate (vmem_valgrind_region.c:$(N))
==$(N)==    by 0x$(X): main (vmem_valgrind_region.c:$(N))
$(OPT)==$(N)==  Address 0x$(X) is 54 bytes inside data symbol "Buff_trace"
==$(N)== 
==$(N)== 
==$(N)== HEAP SUMMARY:
==$(N)==     in use at exit: $(NC) bytes in $(N) blocks
==$(N)==   total heap usage: $(N) allocs, $(N) frees, $(NC) bytes allocated
==$(N)== 
==$(N)== 9,807,424 bytes in 8 blocks are definitely lost in loss record $(N) of $(N)
==$(N)==    at 0x$(X): je_vmem_pool_malloc $(*)
$(OPT)==$(N)==    by 0x$(X): vmem_malloc $(*)
==$(N)==    by 0x$(X): do_alloc (vmem_valgrind_region.c:$(N))
==$(N)==    by 0x$(X): main (vmem_valgrind_region.c:$(N))
==$(N)== 
==$(N)== LEAK SUMMARY:
==$(N)==    definitely lost: 9,807,424 bytes in 8 blocks
==$(N)==    indirectly lost: 0 bytes in 0 blocks
==$(N)==      possibly lost: 0 bytes in 0 blocks
==$(N)==    still reachable: 0 bytes in 0 blocks
==$(N)==         suppressed: $(NC) bytes in $(N) blocks
==$(N)== 
==$(N)== For counts of detected and suppressed errors, rerun with: -v
==$(N)== Use --track-origins=yes to see where uninitialised values come from
==$(N)== ERROR SUMMARY: $(N) errors from 2 contexts (suppressed: $(N) from $(N))
