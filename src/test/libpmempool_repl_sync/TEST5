#!/bin/bash -e
#
# Copyright 2016, Intel Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#     * Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# libpmempool_replica_sync/TEST5 -- test for checking replica sync
#
export UNITTEST_NAME=libpmempool_replica_sync/TEST5
export UNITTEST_NUM=5

. ../unittest/unittest.sh
. ./common.sh

require_fs_type pmem any

setup

LOG=out${UNITTEST_NUM}.log
LOG_TEMP=out${UNITTEST_NUM}_part.log
rm -rf $LOG && touch $LOG
rm -rf $LOG_TEMP && touch $LOG_TEMP

LAYOUT=OBJ_LAYOUT
POOLSET=$DIR/pool0.set
M=$(( 1024 * 1024 ))
POOL_HEADER_OFFSET=4096
ADDR_MASK=0xFFFFF000

declare FILES_R1=( "testfile1" "testfile2" "testfile3"
	"testfile4" "testfile5" )
declare FILES_R1_SIZE=( "20M" "40M" "20M" "20M" "40M" )

declare FILES_R2=( "testfile6" "testfile7" "testfile8"
	"testfile9" "testfile10" )
declare FILES_R2_SIZE=( "25M" "20M" "40M" "25M" "30M" )

# Create poolset
create_poolset $POOLSET\
	${FILES_R1_SIZE[0]}:$DIR/${FILES_R1[0]}:z:${FILES_R1_SIZE[0]}:0777\
		${FILES_R1_SIZE[1]}:$DIR/${FILES_R1[1]}:z:${FILES_R1_SIZE[1]}:0777\
		${FILES_R1_SIZE[2]}:$DIR/${FILES_R1[2]}:z:${FILES_R1_SIZE[2]}:0777\
		${FILES_R1_SIZE[3]}:$DIR/${FILES_R1[3]}:z:${FILES_R1_SIZE[3]}:0777\
		${FILES_R1_SIZE[4]}:$DIR/${FILES_R1[4]}:z:${FILES_R1_SIZE[4]}:0777\
	R ${FILES_R2_SIZE[0]}:$DIR/${FILES_R2[0]}:z:${FILES_R2_SIZE[0]}:0777\
		${FILES_R2_SIZE[1]}:$DIR/${FILES_R2[1]}:z:${FILES_R2_SIZE[1]}:0777\
		${FILES_R2_SIZE[2]}:$DIR/${FILES_R2[2]}:z:${FILES_R2_SIZE[2]}:0777\
		${FILES_R2_SIZE[3]}:$DIR/${FILES_R2[3]}:z:${FILES_R2_SIZE[3]}:0777\
		${FILES_R2_SIZE[4]}:$DIR/${FILES_R2[4]}:z:${FILES_R2_SIZE[4]}:0777

expect_normal_exit $PMEMPOOL$EXESUFFIX create --layout=$LAYOUT\
	obj $POOLSET
cat $LOG >> $LOG_TEMP

# Remove one of sources files
rm -rf $DIR/${FILES_R2[1]}

# Copy into part_from = 2; repl 1 -> 0 - should return error due to
# lack of file
expect_normal_exit ./libpmempool_repl_sync$EXESUFFIX -s -g 1 -w 0 -z 2\
	$POOLSET


# Remove remaining parts and create everything again
for name in ${FILES_R1[*]}
do
	rm -rf $DIR/$name
done
for name in ${FILES_R2[*]}
do
	rm -rf $DIR/$name
done
expect_normal_exit $PMEMPOOL$EXESUFFIX create --layout=$LAYOUT\
	obj $POOLSET
cat $LOG >> $LOG_TEMP

# Initilie data, corrupt in second replica, copy to first and check
part0=0
off1=$((5 * $M))
off2=$((21 * $M))

part1=1
off3=$((27 * $M))

part2=2
off4=$((50 * $M))
off5=$((65 * $M))
off6=$((80 * $M))

part3=3
off7=$((90 * $M))
off8=$((101 * $M))

part4=4
off9=$((120 * $M))

# Write some data at offsets
for i in `seq 1 9`;
do
	vname="off$i"
	expect_normal_exit ./libpmempool_repl_sync_mod\
	-w -s 16 -l $LAYOUT -d "TestInitV_"$vname -o ${!vname} $POOLSET
	cat $LOG >> $LOG_TEMP
done

# Remove testfile3
rm -rf $DIR/${FILES_R1[2]}

# Corrupt data
corrupt_data FILES_R2 $part0 $off1 "ModifiedDataABC" 16
corrupt_data FILES_R2 $part0 $off2 "ModifiedDataABC" 16
corrupt_data FILES_R2 $part1 $off3 "ModifiedDataABC" 16

corrupt_data FILES_R2 $part2 $off4 "ModifiedDataABC" 16
corrupt_data FILES_R2 $part2 $off5 "ModifiedDataABC" 16
corrupt_data FILES_R2 $part2 $off6 "ModifiedDataABC" 16

corrupt_data FILES_R2 $part3 $off7 "ModifiedDataABC" 16
corrupt_data FILES_R2 $part3 $off8 "ModifiedDataABC" 16
corrupt_data FILES_R2 $part4 $off9 "ModifiedDataABC" 16

# Copy into part_from = 2; repl 1 -> 0
expect_normal_exit ./libpmempool_repl_sync$EXESUFFIX -s -g 1 -w 0 -z 2\
	$POOLSET >> $LOG
cat $LOG >> $LOG_TEMP

# Check copied data
for i in `seq 1 9`;
do
	vname="off$i"
	expect_normal_exit ./libpmempool_repl_sync_mod\
	-l $LAYOUT -s 16 -o ${!vname} $POOLSET
	cat $LOG >> $LOG_TEMP
done


# Check metadata by pmempool info
for name in ${FILES_R1[*]}
do
	$PMEMPOOL info $DIR/$name >> $LOG_TEMP
done

mv $LOG_TEMP $LOG
check

pass
