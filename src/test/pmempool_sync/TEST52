#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-3-Clause
# Copyright 2018-2024, Intel Corporation
#
#
# pmempool_sync/TEST52 -- test for sync command with badblocks
#                         - overlapping but fixable bad blocks:
#
# replica #0 part #0 & replica #1 part #1: blocks: offset: 1000 length: 125
# replica #0 part #1 & replica #1 part #0: blocks: offset: 1002 1004 1006 1008 1010 length: 1
# replica #2 part #0 & replica #2 part #1: blocks: offset: 175 1125 length: 4
#

. ../unittest/unittest.sh

. setup.sh

require_test_type medium
require_fs_type non-pmem
require_build_type debug nondebug
require_linked_with_ndctl $PMEMPOOL$EXESUFFIX

setup

export PMEMPOOL_LOG_LEVEL=10

LOG=out${UNITTEST_NUM}.log
rm -rf $LOG && touch $LOG

POOLSET=$DIR/testset1
create_poolset $POOLSET \
	${PARTSIZE}M:$DIR/testfile_r0_p0:z \
	${PARTSIZE}M:$DIR/testfile_r0_p1:z \
	${PARTSIZE}M:$DIR/testfile_r0_p2:z \
	R \
	${PARTSIZE}M:$DIR/testfile_r1_p0:z \
	${PARTSIZE}M:$DIR/testfile_r1_p1:z \
	${PARTSIZE}M:$DIR/testfile_r1_p2:z \
	R \
	${PARTSIZE}M:$DIR/testfile_r2_p0:z \
	${PARTSIZE}M:$DIR/testfile_r2_p1:z \
	${PARTSIZE}M:$DIR/testfile_r2_p2:z

expect_normal_exit $PMEMPOOL$EXESUFFIX rm $POOLSET
expect_normal_exit $PMEMPOOL$EXESUFFIX create obj --layout pmempool$SUFFIX $POOLSET

expect_normal_exit "$OBJ_VERIFY$EXESUFFIX $POOLSET pmempool$SUFFIX c v &>> $LOG"

# inject errors - zero blocks:
zero_blocks $DIR/testfile_r0_p0 1000 125
zero_blocks $DIR/testfile_r1_p1 1000 125

zero_blocks $DIR/testfile_r0_p1 1002 1 1004 1 1006 1 1008 1 1010 1
zero_blocks $DIR/testfile_r1_p0 1002 1 1004 1 1006 1 1008 1 1010 1

zero_blocks $DIR/testfile_r2_p0 875 4 1125 4
zero_blocks $DIR/testfile_r2_p1 875 4 1125 4

# create recovery files with bad blocks
create_recovery_file $DIR/testset1_r0_p0_badblocks.txt 1000 125
create_recovery_file $DIR/testset1_r1_p1_badblocks.txt 1000 125

create_recovery_file $DIR/testset1_r0_p1_badblocks.txt 1002 1 1004 1 1006 1 1008 1 1010 1
create_recovery_file $DIR/testset1_r1_p0_badblocks.txt 1002 1 1004 1 1006 1 1008 1 1010 1

create_recovery_file $DIR/testset1_r2_p0_badblocks.txt 875 4 1125 4
create_recovery_file $DIR/testset1_r2_p1_badblocks.txt 875 4 1125 4

# create recovery files - no bad blocks
create_recovery_file $DIR/testset1_r0_p2_badblocks.txt
create_recovery_file $DIR/testset1_r1_p2_badblocks.txt
create_recovery_file $DIR/testset1_r2_p2_badblocks.txt

turn_on_checking_bad_blocks $POOLSET

# fail because of bad blocks
expect_abnormal_exit "$OBJ_VERIFY$EXESUFFIX $POOLSET pmempool$SUFFIX v &>> $LOG"

# fix bad blocks
expect_normal_exit "$PMEMPOOL$EXESUFFIX sync -v -b $POOLSET &>> $LOG"

expect_normal_exit "$PMEMPOOL$EXESUFFIX check -v $POOLSET >> $LOG"
expect_normal_exit "$PMEMPOOL$EXESUFFIX info --bad-blocks=yes $POOLSET >> $LOG"
expect_normal_exit "$OBJ_VERIFY$EXESUFFIX $POOLSET pmempool$SUFFIX v &>> $LOG"

# Exclude error messages printed out on the stderr by PMDK in debug
LOG_TEMP=$LOG.log
fgrep -v "*ERROR*" $LOG > $LOG_TEMP
mv $LOG_TEMP $LOG

check

pass
