#!/usr/bin/env bash
#
# Copyright 2018-2019, Intel Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#     * Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# pmempool_sync/TEST52 -- test for sync command with badblocks
#                         - overlapping but fixable bad blocks:
#
# replica #0 part #0 & replica #1 part #1: blocks: offset: 8000 length: 1000
# replica #0 part #1 & replica #1 part #0: blocks: offset: 8016 8032 8048 8064 8080 length: 8
# replica #2 part #0 & replica #2 part #1: blocks: offset: 7000 9000 length: 32
#

. ../unittest/unittest.sh

require_test_type medium
require_fs_type non-pmem
require_build_type debug nondebug
require_linked_with_ndctl $PMEMPOOL$EXESUFFIX

setup

export PMEMPOOL_LOG_LEVEL=10

LOG=out${UNITTEST_NUM}.log
rm -rf $LOG && touch $LOG

POOLSET=$DIR/testset1
create_poolset $POOLSET \
	8M:$DIR/testfile_r0_p0:z \
	8M:$DIR/testfile_r0_p1:z \
	8M:$DIR/testfile_r0_p2:z \
	R \
	8M:$DIR/testfile_r1_p0:z \
	8M:$DIR/testfile_r1_p1:z \
	8M:$DIR/testfile_r1_p2:z \
	R \
	8M:$DIR/testfile_r2_p0:z \
	8M:$DIR/testfile_r2_p1:z \
	8M:$DIR/testfile_r2_p2:z

expect_normal_exit $PMEMPOOL$EXESUFFIX rm -f $POOLSET
expect_normal_exit $PMEMPOOL$EXESUFFIX create obj --layout pmempool$SUFFIX $POOLSET

expect_normal_exit "$OBJ_VERIFY$EXESUFFIX $POOLSET pmempool$SUFFIX c v &>> $LOG"

# inject errors - zero blocks:
zero_blocks $DIR/testfile_r0_p0 8000 1000
zero_blocks $DIR/testfile_r1_p1 8000 1000

zero_blocks $DIR/testfile_r0_p1 8016 8 8032 8 8048 8 8064 8 8080 8
zero_blocks $DIR/testfile_r1_p0 8016 8 8032 8 8048 8 8064 8 8080 8

zero_blocks $DIR/testfile_r2_p0 7000 32 9000 32
zero_blocks $DIR/testfile_r2_p1 7000 32 9000 32

# create recovery files with bad blocks
create_recovery_file $DIR/testset1_r0_p0_badblocks.txt 8000 1000
create_recovery_file $DIR/testset1_r1_p1_badblocks.txt 8000 1000

create_recovery_file $DIR/testset1_r0_p1_badblocks.txt 8016 8 8032 8 8048 8 8064 8 8080 8
create_recovery_file $DIR/testset1_r1_p0_badblocks.txt 8016 8 8032 8 8048 8 8064 8 8080 8

create_recovery_file $DIR/testset1_r2_p0_badblocks.txt 7000 32 9000 32
create_recovery_file $DIR/testset1_r2_p1_badblocks.txt 7000 32 9000 32

# create recovery files - no bad blocks
create_recovery_file $DIR/testset1_r0_p2_badblocks.txt
create_recovery_file $DIR/testset1_r1_p2_badblocks.txt
create_recovery_file $DIR/testset1_r2_p2_badblocks.txt

turn_on_checking_bad_blocks $POOLSET

# fail because of bad blocks
expect_abnormal_exit "$OBJ_VERIFY$EXESUFFIX $POOLSET pmempool$SUFFIX v &>> $LOG"

# fix bad blocks
expect_normal_exit "$PMEMPOOL$EXESUFFIX sync -v -b $POOLSET &>> $LOG"

expect_normal_exit "$PMEMPOOL$EXESUFFIX check -v $POOLSET >> $LOG"
expect_normal_exit "$PMEMPOOL$EXESUFFIX info --bad-blocks=yes $POOLSET >> $LOG"
expect_normal_exit "$OBJ_VERIFY$EXESUFFIX $POOLSET pmempool$SUFFIX v &>> $LOG"

check

pass
