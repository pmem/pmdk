#!/usr/bin/env bash
#
# Copyright 2018, Intel Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#     * Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# pmempool_sync/TEST44 -- test for sync command with badblocks
#                         - overlapping but fixable bad blocks
#                           in the 1st part of three replicas:
#                           replica #0: blocks: offset: 8000 length: 16
#                           replica #1: blocks: offset: 8008 length: 16
#                           replica #2: blocks: offset: 8000 length: 8
#                                               offset: 8016 length: 8
#

# standard unit test setup
. ../unittest/unittest.sh

require_test_type medium
require_fs_type non-pmem
require_build_type debug nondebug
require_linked_with_ndctl $PMEMPOOL$EXESUFFIX

setup

#
# All tests using the 'obj_verify' tool have to have the PMEM_IS_PMEM_FORCE
# variable set, because they can time-out otherwise.
#
export PMEM_IS_PMEM_FORCE=1

export PMEMPOOL_LOG_LEVEL=10

LOG=out${UNITTEST_NUM}.log
rm -rf $LOG && touch $LOG

POOLSET=$DIR/testset1
create_poolset $POOLSET 10M:$DIR/testfile0:z 10M:$DIR/testfile1:z 10M:$DIR/testfile2:z \
			R \
			10M:$DIR/testfile3:z 10M:$DIR/testfile4:z 10M:$DIR/testfile5:z \
			R \
			10M:$DIR/testfile6:z 10M:$DIR/testfile7:z 10M:$DIR/testfile8:z

expect_normal_exit $PMEMPOOL$EXESUFFIX rm $POOLSET
expect_normal_exit $PMEMPOOL$EXESUFFIX create obj --layout pmempool$SUFFIX $POOLSET

expect_normal_exit "$OBJ_VERIFY$EXESUFFIX $POOLSET pmempool$SUFFIX c v &>> $LOG"

# zero blocks: offset: 8000 length: 16 in the replica #0
zero_blocks $DIR/testfile0 8000 16

# zero blocks: offset: 8008 length: 16 in the replica #1
zero_blocks $DIR/testfile3 8008 16

# zero blocks: offset: 8000 length: 8 in the replica #2
zero_blocks $DIR/testfile6 8000 8

# zero blocks: offset: 8016 length: 8 in the replica #2
zero_blocks $DIR/testfile6 8016 8

# create recovery files
create_recovery_file $DIR/testset1_r0_p0_badblocks.txt 8000 16
create_recovery_file $DIR/testset1_r0_p1_badblocks.txt
create_recovery_file $DIR/testset1_r0_p2_badblocks.txt
create_recovery_file $DIR/testset1_r1_p0_badblocks.txt 8008 16
create_recovery_file $DIR/testset1_r1_p1_badblocks.txt
create_recovery_file $DIR/testset1_r1_p2_badblocks.txt
create_recovery_file $DIR/testset1_r2_p0_badblocks.txt 8000 8 8016 8
create_recovery_file $DIR/testset1_r2_p1_badblocks.txt
create_recovery_file $DIR/testset1_r2_p2_badblocks.txt

turn_on_checking_bad_blocks $POOLSET

# fail because of bad blocks
expect_abnormal_exit "$OBJ_VERIFY$EXESUFFIX $POOLSET pmempool$SUFFIX v &>> $LOG"

# fix bad blocks
expect_normal_exit "$PMEMPOOL$EXESUFFIX sync -v -b $POOLSET &>> $LOG"

expect_normal_exit "$PMEMPOOL$EXESUFFIX check -v $POOLSET >> $LOG"
expect_normal_exit "$PMEMPOOL$EXESUFFIX info -k $POOLSET >> $LOG"
expect_normal_exit "$OBJ_VERIFY$EXESUFFIX $POOLSET pmempool$SUFFIX v &>> $LOG"

check

pass
