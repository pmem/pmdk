#!/usr/bin/env bash
#
# Copyright 2018, Intel Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#     * Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# pmempool_sync/TEST39 -- test for sync command with badblocks
#                         - bad blocks in the regular file
#                           blocks: offset: 1000 length: 1
#                           in the 2nd part
#                         - run sync and break it after clearing bad blocks
#                           and before recovering data using gdb
#                         - run sync again and it should recover data
#                           using bad block recovery files
#

# standard unit test setup
. ../unittest/unittest.sh

require_test_type medium
require_fs_type non-pmem

# must be non-static debug release of the binary because the test relies on the
# gdb ability to interrupt the program at a static method inside
# the libpmempool library
require_build_type debug
require_command gdb

require_nfit_tests_enabled
require_sudo_allowed
require_kernel_module nfit_test
require_linked_with_ndctl $PMEMPOOL$EXESUFFIX
require_command ndctl

setup

. ../common_badblock.sh

ndctl_nfit_test_init

DEVICE=$(ndctl_nfit_test_get_block_device)
NAMESPACE=$(ndctl_nfit_test_get_namespace_of_device $DEVICE)
FULLDEV="/dev/$DEVICE"
MOUNT_DIR="$DIR/mnt-pmem"

ndctl_nfit_test_mount_pmem $FULLDEV $MOUNT_DIR

LOG=out${UNITTEST_NUM}.log
rm -f $LOG && touch $LOG

POOLSET=$DIR/testset1
create_poolset $POOLSET \
	8M:$DIR/testfile0:z \
	8M:$MOUNT_DIR/testfile1:z \
	8M:$DIR/testfile2:z \
	R \
	24M:$DIR/testfile3:z

expect_normal_exit $PMEMPOOL$EXESUFFIX rm $POOLSET
expect_normal_exit $PMEMPOOL$EXESUFFIX create obj --layout pmempool$SUFFIX $POOLSET

expect_normal_exit "$OBJ_VERIFY$EXESUFFIX $POOLSET pmempool$SUFFIX c v &>> $LOG"

turn_on_checking_bad_blocks $POOLSET

# inject bad block:
FIRST_SECTOR=$(expect_normal_exit $EXTENTS $MOUNT_DIR/testfile1 -l 1000)
ndctl_inject_error $NAMESPACE $FIRST_SECTOR 1

expect_bad_blocks

expect_normal_exit "$PMEMPOOL$EXESUFFIX info -k $POOLSET >> $LOG"

expect_bad_blocks

expect_abnormal_exit "$OBJ_VERIFY$EXESUFFIX $POOLSET pmempool$SUFFIX v &>> /dev/null"

expect_bad_blocks

# run sync and break it after clearing bad blocks and before recovering data using gdb
expect_normal_exit gdb --batch \
	--command=trip_on_recreate_broken_parts.gdb \
	--args $PMEMPOOL$EXESUFFIX sync -b -v $POOLSET &> /dev/null

# obj_verify should fail, because the recovery files exist
expect_abnormal_exit "$OBJ_VERIFY$EXESUFFIX $POOLSET pmempool$SUFFIX v &>> $LOG"

# run sync again and it should recover data using bad block recovery files
expect_normal_exit "$PMEMPOOL$EXESUFFIX sync -b -v $POOLSET >> $LOG"

expect_normal_exit "$PMEMPOOL$EXESUFFIX check -v $POOLSET >> $LOG"
expect_normal_exit "$PMEMPOOL$EXESUFFIX info -k $POOLSET >> $LOG"

expect_normal_exit "$OBJ_VERIFY$EXESUFFIX $POOLSET pmempool$SUFFIX v &>> $LOG"

ndctl_nfit_test_fini $MOUNT_DIR

check

pass
