[global]
file = testfile
repeats = 3

# pmemobj_tx_alloc(size = 256) vs threads
[obj_tx_alloc_small_v_thread]
bench = obj_tx_alloc
group = pmemobj
ops-per-thread = 200000
threads = 1:+1:32
type-number = per-thread
data-size = 256

# pmemobj_tx_alloc(size = 128k) vs threads
[obj_tx_alloc_huge_v_threads]
bench = obj_tx_alloc
group = pmemobj
ops-per-thread = 11000
threads = 1:+1:32
type-number = per-thread
data-size = 131072

# pmemobj_tx_alloc vs data-size
[obj_tx_alloc_v_data_size]
bench = obj_tx_alloc
group = pmemobj
ops-per-thread = 50000
threads = 1
type-number = one
data-size = 64:*2:32768

# pmalloc (size = 100) vs threads
[obj_pmalloc_small_v_threads]
bench = pmalloc
group = pmemobj
ops-per-thread = 200000
threads = 1:+1:32
data-size = 100

# pmalloc (size = 128k) vs threads
[obj_pmalloc_huge_v_threads]
bench = pmalloc
group = pmemobj
ops-per-thread = 11000
threads = 1:+1:32
data-size = 131072

# pmalloc vs data-size
[obj_pmalloc_v_data_size]
bench = pmalloc
group = pmemobj
ops-per-thread = 50000
threads = 1
data-size = 64:*2:32768

# btree_map_insert
[obj_btree_map_insert]
bench = map_insert
group = pmemobj
ops-per-thread = 5000000
type = btree
threads = 1

# ctree_map_insert
[obj_ctree_map_insert]
bench = map_insert
group = pmemobj
ops-per-thread = 5000000
type = ctree
threads = 1

# rtree_map_insert
[obj_rtree_map_insert]
bench = map_insert
group = pmemobj
ops-per-thread = 1000000
type = rtree
threads = 1

# rbtree_map_insert
[obj_rbtree_map_insert]
bench = map_insert
group = pmemobj
ops-per-thread = 5000000
type = rbtree
threads = 1

# hashmap_tx_map_insert
[obj_hashmap_tx_map_insert]
bench = map_insert
group = pmemobj
ops-per-thread = 5000000
type = hashmap_tx
threads = 1

# hashmap_atomic_map_insert
[obj_hashmap_atomic_map_insert]
bench = map_insert
group = pmemobj
ops-per-thread = 5000000
type = hashmap_atomic
threads = 1

# pmemblk_write(size = 512, random) vs threads
[blk_write_v_threads]
bench = blk_write
group = pmemblk
file-size = 1073741824
ops-per-thread = 1000000
threads = 1:+1:32
data-size = 512
mode = rand

# pmemblk_read(size = 512, random) vs threads
[blk_read_v_threads]
bench = blk_read
group = pmemblk
file-size = 1073741824
ops-per-thread = 1000000
threads = 1:+1:32
data-size = 512
mode = rand

# log_append vs data-size
[log_append_v_data_size]
bench = log_append
group = pmemlog
ops-per-thread = 1000000
threads = 1
data-size = 32:*2:32768
