# This is an example config file for pmembench

# Global parameters
[global]
group = pmemobj
file = testfile.list
ops-per-thread = 10000

# obj_insert benchmark
# variable number of threads
# random type number, position and allocation size
[obj_list_insert_threads]
bench = obj_insert
threads = 1:+1:10
data-size = 512
position = rand
type-number = rand
min-size = 1

# obj_insert benchmark
# use circle queue from queue.h
# variable number of threads
# random type number, position and allocation size
[queue_list_insert_threads]
bench = obj_insert
threads = 1:+1:10
data-size = 512
position = rand
min-size = 1
queue = true

# obj_insert benchmark
# variable allocation size
# insert tail
# one type number per thread
[obj_list_insert_data_size]
bench = obj_insert
threads = 1
data-size = 2:*2:8192
position = tail
type-number = per-thread

# obj_insert benchmark
# use circle queue from queue.h
# variable allocation size
# insert tail
# one type number per thread
[queue_list_insert_data_size]
bench = obj_insert
threads = 1
data-size = 2:*2:8192
position = tail
type-number = per-thread
queue = true

# obj_insert benchmark
# variable number of threads
# insert int the middle
# one type-number
[obj_list_insert_list_len]
bench = obj_insert
threads = 1:+1:10
data-size = 512
position = middle
type-number = one
list-len = 1000

# obj_insert benchmark
# use circle queue from queue.h
# variable number of threads
# insert int the middle
# one type-number
[queue_list_insert_list_len]
bench = obj_insert
threads = 1:+1:10
data-size = 512
position = middle
type-number = one
list-len = 1000
queue = true

# obj_insert_new benchmark
# variable number of threads
# random type number, position and allocation size
[obj_list_insert_new_threads]
bench = obj_insert_new
threads = 1:+1:10
data-size = 512
position = rand
type-number = rand
min-size = 1

# obj_insert_new benchmark
# variable allocation size
# insert tail
# one type number per thread
[obj_list_insert_new_data_size]
bench = obj_insert_new
threads = 1
data-size = 2:*2:8192
position = tail
type-number = per-thread

# obj_insert_new benchmark
# variable number of threads
# insert int the middle
# one type-number
[obj_list_insert_new_list_len]
bench = obj_insert_new
threads = 1:+1:10
data-size = 512
position = middle
type-number = one
list-len = 1000

# obj_remove benchmark
# variable number of threads
# random type number, position and allocation size
[obj_list_remove_threads]
bench = obj_remove
threads = 1:+1:10
data-size = 512
position = rand
type-number = rand
min-size = 1

# obj_remove benchmark
# use circle queue from queue.h
# variable number of threads
# random type number, position and allocation size
[queue_list_remove_threads]
bench = obj_remove
threads = 1:+1:10
data-size = 512
position = rand
type-number = rand
min-size = 1
queue = true

# obj_remove benchmark
# variable allocation size
# insert tail
# one type number per thread
[obj_list_remove_data_size]
bench = obj_remove
threads = 1
data-size = 2:*2:8192
position = tail
type-number = per-thread

# obj_remove benchmark
# use circle queue from queue.h
# variable allocation size
# insert tail
# one type number per thread
[queue_list_remove_data_size]
bench = obj_remove
threads = 1
data-size = 2:*2:8192
position = tail
type-number = per-thread
queue = true

# obj_remove benchmark
# variable number of threads
# insert int the middle
# one type-number
[obj_list_remove_list_len]
bench = obj_remove
threads = 1:+1:10
data-size = 512
position = middle
type-number = one
list-len = 1000

# obj_remove benchmark
# use circle queue from queue.h
# variable number of threads
# insert int the middle
# one type-number
[queue_list_remove_list_len]
bench = obj_remove
threads = 1:+1:10
data-size = 512
position = middle
type-number = one
list-len = 1000
queue = true

# obj_remove_free benchmark
# variable number of threads
# random type number, position and allocation size
[obj_list_remove_free_threads]
bench = obj_remove_free
threads = 1:+1:10
data-size = 512
position = rand
type-number = rand
min-size = 1

# obj_remove_free benchmark
# variable allocation size
# insert tail
# one type number per thread
[obj_list_remove_free_data_size]
bench = obj_remove_free
threads = 1
data-size = 2:*2:8192
position = tail
type-number = per-thread

# obj_remove_free benchmark
# variable number of threads
# insert int the middle
# one type-number
[obj_list_remove_free_list_len]
bench = obj_remove_free
threads = 1:+1:10
data-size = 512
position = middle
type-number = one
list-len = 1000

# obj_move benchmark
# variable number of threads
# random type number, position and allocation size
[obj_list_move_threads]
bench = obj_move
threads = 1:+1:10
data-size = 512
position = rand
type-number = rand
min-size = 1

# obj_move benchmark
# variable allocation size
# insert tail
# one type number per thread
[obj_list_move_data_size]
bench = obj_move
threads = 1
data-size = 2:*2:8192
position = tail
type-number = per-thread

# obj_move benchmark
# variable number of threads
# insert int the middle
# one type-number
[obj_list_move_list_len]
bench = obj_move
threads = 1:+1:10
data-size = 512
position = middle
type-number = one
list-len = 1000
