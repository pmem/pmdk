#!/bin/sh -e

if [ "$CC" = "" ]; then
	CC=cc
fi

if ! $CC -dM -E -x c /dev/null -o /dev/null; then
	exit 1
fi

LP64=`$CC $CFLAGS -dM -E -x c /dev/null | grep -Ec "__SIZEOF_LONG__.+8|__SIZEOF_POINTER__.+8"`
if [ "$LP64" != "2" ]; then
	echo "32-bit builds are not supported. Please use 64-bit platform/compiler"
	exit 1
fi

echo "CC=$CC" > .env
echo "EXTRA_CFLAGS=$CFLAGS" >> .env
echo "EXTRA_LDFLAGS=$LDFLAGS" >> .env
echo >> .env

echo -n > .config.h

if pkg-config --exists uuid; then
	echo UUID_CFLAGS=`pkg-config --cflags uuid` >> .env
	echo UUID_LIBS=`pkg-config --libs uuid` >> .env
	echo "#define HAVE_UUID" >> .config.h
	echo USE_UUID=1 >> .env
	echo "libuuid found"
else
	echo USE_UUID=0 >> .env
	echo "libuuid NOT found"
	exit
fi
echo >> .env

if [ "$USE_VALGRIND" = "" ]; then
	USE_VALGRIND=1
fi

if pkg-config --exists valgrind && [ "$USE_VALGRIND" = "1" ]; then
	VG_CFLAGS=`pkg-config --cflags valgrind`
	echo VALGRIND_CFLAGS=$VG_CFLAGS >> .env
	echo EXTRA_CFLAGS+=$VG_CFLAGS >> .env
	echo "#define USE_VG_MEMCHECK" >> .config.h
	echo "#define USE_VG_HELGRIND" >> .config.h
	printf "#include <pmemcheck.h>\nint main(){return 0;}" > .test.c
	echo "valgrind found"
	if $CC $VG_CFLAGS .test.c -o /dev/null 2>/dev/null; then
		echo "#define USE_VG_PMEMCHECK" >> .config.h
		echo USE_VG_PMEMCHECK=1 >> .env
		echo "valgrind/pmemcheck found"
	else
		echo "valgrind/pmemcheck NOT found"
	fi
	echo USE_VG_MEMCHECK=1 >> .env
	echo USE_VG_HELGRIND=1 >> .env
else
	echo "valgrind NOT found"
	echo USE_VG_MEMCHECK=0 >> .env
	echo USE_VG_HELGRIND=0 >> .env
	echo USE_VG_PMEMCHECK=0 >> .env
fi
echo >> .env

if [ "$USE_LIBUNWIND" = "" ]; then
	USE_LIBUNWIND=1
fi

if pkg-config --exists libunwind && [ "$USE_LIBUNWIND" = "1" ]; then
	echo LIBUNWIND_CFLAGS=`pkg-config --cflags libunwind` >> .env
	echo LIBUNWIND_LIBS=`pkg-config --libs libunwind` >> .env
	echo "#define HAVE_LIBUNWIND" >> .config.h
	echo USE_LIBUNWIND=1 >> .env
	echo "libunwind found"
else
	echo USE_LIBUNWIND=0 >> .env
	echo "libunwind NOT found"
fi
echo >> .env

if [ "$USE_NCURSES" = "" ]; then
	USE_NCURSES=1
fi

if pkg-config --exists ncurses && [ "$USE_NCURSES" = "1" ]; then
	echo NCURSES_CFLAGS=`pkg-config --cflags ncurses` >> .env
	echo NCURSES_LIBS=`pkg-config --libs ncurses` >> .env
	echo "#define HAVE_NCURSES" >> .config.h
	echo USE_NCURSES=1 >> .env
	echo "libncurses found"
else
	echo USE_NCURSES=0 >> .env
	echo "libncurses NOT found"
fi
echo >> .env

if [ "$USE_FUSE" = "" ]; then
	USE_FUSE=1
fi

if pkg-config --exists fuse && [ "$USE_FUSE" = "1" ]; then
	echo FUSE_CFLAGS=`pkg-config --cflags fuse` >> .env
	echo FUSE_LIBS=`pkg-config --libs fuse` >> .env
	echo "#define HAVE_FUSE" >> .config.h
	echo USE_FUSE=1 >> .env
	echo "libfuse found"
else
	echo USE_FUSE=0 >> .env
	echo "libfuse NOT found"
fi
echo >> .env

if [ "$USE_GLIB20" = "" ]; then
	USE_GLIB20=1
fi

if pkg-config --exists glib-2.0 && [ "$USE_GLIB20" = "1" ]; then
	echo GLIB20_CFLAGS=`pkg-config --cflags glib-2.0` >> .env
	echo GLIB20_LIBS=`pkg-config --libs glib-2.0` >> .env
	echo "#define HAVE_GLIB20" >> .config.h
	echo USE_GLIB20=1 >> .env
	echo "glib-2.0 found"
else
	echo USE_GLIB20=0 >> .env
	echo "glib-2.0 NOT found"
fi
echo >> .env
echo "EXTRA_CFLAGS+=-include `pwd`/config.h" >> .env

VERSION="`git describe 2>/dev/null || cat .version`"
echo SRCVERSION=$VERSION >> .env
echo "#define SRCVERSION \"$VERSION\"" >> .config.h

mv .env Makefile.env
mv .config.h config.h
rm -f .test.c
