
name: PMDKunittestsLinux
on:
    workflow_dispatch:
        inputs:
            label:
                description: 'label of execution machine, for example dell004 or fedora34, remember to manually add labels on gha runners page.'
                required: true
                default: 'fedora34'
            test_folders:
                description: 'please select one: all, remotes, nonremotes'
                required: true
                default: 'all'
            test_type:
                description: 'please select one: check, short, medium, long, all'
                required: true
                default: 'check'
            test_build:
                description: 'please select one: debug, nondebug, static-debug, static-nondebug, all'
                required: true
                default: 'all'
            fs_type:
                description: 'please select one: all, pmem, non-pmem, any, none'
                required: true
                default: 'all'
            badblock:
                description: 'please select one: yes, no'
                required: true
                default: 'no'
            drd:
                description: 'please select one: auto, force-enable'
                required: true
                default: 'auto'
            memcheck:
                description: 'please select one: auto, force-enable'
                required: true
                default: 'auto'
            helgrind:
                description: 'please select one: auto, force-enable'
                required: true
                default: 'auto'
            dual_exec:
                description: 'please select one: nope, dbg_st-nondbg_vs_nondbg-st-dbg'
                required: true
                default: 'nope'
            email_recipients:
                description: 'optional: provide emails separated by comma to receive results..'
                required: false
                default: 'gk.pmdk.gb.val@intel.com'
            skip_tests:
                description: 'remove tests from scope, put spaces between tests.'
                required: false
                default: ''
            pmdk_libs:
                description: 'PMDK libs to test, separated by comma, Leave blank if not used.'
                required: false
                default: ''
        

env:
    GITHUB_REPO: pmem/pmdk
    DOCKER_REPO: ghcr.io/pmem/pmdk

jobs:
  linux:
    name: Linux
    runs-on: [self-hosted, linux, x64]
    env:
      # use org's Private Access Token to log in to GitHub Container Registry
      GH_CR_USER:  ${{ secrets.GH_CR_USER }}
      GH_CR_PAT:   ${{ secrets.GH_CR_PAT }}
      DOC_UPDATE_GITHUB_TOKEN: ${{ secrets.DOC_UPDATE_GITHUB_TOKEN }}
      HOST_WORKDIR:   /home/runner/work/pmdk/pmdk
      WORKDIR:        utils/docker
      PMDK_CC:        gcc
      PMDK_CXX:       g++
      MAKE_PKG:       0
      REMOTE_TESTS:   1
      VALGRIND:       1
      SRC_CHECKERS:   0
    strategy:
      matrix:
        CONFIG: ["N=1 OS=ubuntu OS_VER=20.04 FAULT_INJECTION=1 TEST_BUILD=debug",
                 "N=2 OS=ubuntu OS_VER=20.04 FAULT_INJECTION=1 TEST_BUILD=nondebug UBSAN=1",
                 "N=3 OS=ubuntu OS_VER=20.04 PMDK_CC=clang PMDK_CXX=clang++ TEST_BUILD=debug SRC_CHECKERS=1",
                 "N=4 OS=ubuntu OS_VER=20.04 PMDK_CC=clang PMDK_CXX=clang++ TEST_BUILD=nondebug",
                 "N=5 OS=fedora OS_VER=31    PMDK_CC=clang PMDK_CXX=clang++ TEST_BUILD=debug",
                 "N=6 OS=fedora OS_VER=31    PMDK_CC=clang PMDK_CXX=clang++ TEST_BUILD=nondebug AUTO_DOC_UPDATE=1",
                 "N=7 OS=fedora OS_VER=31    MAKE_PKG=1 EXPERIMENTAL=y REMOTE_TESTS=0 VALGRIND=0 PMEMSET_INSTALL=y PUSH_IMAGE=1",
                 "N=8 OS=ubuntu OS_VER=20.04 MAKE_PKG=1 EXPERIMENTAL=y REMOTE_TESTS=0 VALGRIND=0 NDCTL_ENABLE=n PMEMSET_INSTALL=y PUSH_IMAGE=1",
                 "N=9 OS=ubuntu OS_VER=20.04 MAKE_PKG=1 EXPERIMENTAL=y REMOTE_TESTS=0 VALGRIND=0 NDCTL_ENABLE=n PMDK_CC=clang PMDK_CXX=clang++",
                "N=10 OS=ubuntu OS_VER=20.04 COVERAGE=1 FAULT_INJECTION=1 TEST_BUILD=debug"]
    steps:
       - name: Clone the git repo
         uses: actions/checkout@v2
         with:
            fetch-depth: 50

       - name: Pull or rebuild the image
         run: cd $WORKDIR && ${{ matrix.CONFIG }} ./pull-or-rebuild-image.sh

       - name: Run the build
         run: cd $WORKDIR && ${{ matrix.CONFIG }} ./build-CI.sh

       - name: Push the image
         run: cd $WORKDIR && source ./set-vars.sh && ${{ matrix.CONFIG }} /bin/bash -c "if [[ -f ${CI_FILE_PUSH_IMAGE_TO_REPO} ]]; then images/push-image.sh; fi"

 
