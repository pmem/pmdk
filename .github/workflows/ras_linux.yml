name: RAS_Linux

on: [push, pull_request]

jobs:
  linux:
    name: RAS_Linux
    if: github.repository == 'pmem/pmdk'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [[self-hosted, ras_controller]]
    env:
      WORKDIR: utils/gha-runners

    # This workflow will launch PMDK RAS test: Unsafe Shutdown Local on Linux platforms.
    # These tests require a different approach compared to the standard unittests,
    # because of the need of rebooting the runner during the job.
    # In normal circumstances, rebooting and continuing the job on GHA is not possible,
    # due to simply losing connection with the runner, which halts the job immediately.
    # To workaround this issue, an additional runner is needed, not connected to the GH itself,
    # which will run the tests instead.
    #
    # General idea of the solution is:
    #  - First platform [self-hosted runner] functions as the controller [ras_controller],
    #  - Second platform functions as the test runner [ras_runner],
    #  - The workflow launches its steps on the controller,
    #  - The controller will then run an ansible playbook on the second platform [ras_runner],
    #    with options provided by the workflow,
    #  - The test runner follows the steps given by the controller,
    #    running the tests in the process and providing results as output,
    #  - The controller gathers this output and prints it in GHA job.
    #
    # The only drawback of this idea, is that the workflow's job will always finish successfully,
    # regardless of the actual test results.
    # This would require from the user checking out the logs manually every time.
    # Since this is not the optimal solution, an additional step is added,
    # which search for specific ansible phrases signifying failures.
    # If any string is found within the file, the workflow will fail,
    # otherwise it will pass as expected.
    #
    # More detailed information about the ansible playbook and tests themselves can be found in:
    # /utils/gha-runners/run-ras-linux.yml


    steps:
        - name: Clone the git repo
          uses: actions/checkout@v2

        # Variables, such as $ras_runner are hidden on the controller platform as environmental variables.
        # 'sed' command is used to filter out IP addresses from the ansible output, it will show up as the 'ras_runner' instead.
        # 'tee' command is used to save the overall output to the file. This file is needed for the next step.
        - name: Prepare and run RAS Linux tests via ansible-playbook
          run: |
            cd $WORKDIR
            ansible-playbook -i $ras_runner, run-ras-linux.yml -e "host=all ansible_user=$ras_user" | sed 's/[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}/ras_runner/' | tee playbook_output.txt

        # This simple step will look through the output in search of specific fail strings.
        # If any phrase is found in the file, the workflow will fail.
        - name: Fail the workflow if the playbook finished with a failure
          run: |
            cd $WORKDIR
            if grep -E 'fatal: \[ras_runner\]: FAILED!|failed: \[ras_runner\]' "playbook_output.txt"; then
              exit 1
            else
              exit 0
            fi
