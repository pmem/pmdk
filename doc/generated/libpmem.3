.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "LIBPMEM" "" "2017-06-30" "NVM Library - pmem API version 1.0" "NVML Programmer's Manual"
.hy
.\" Copyright 2014-2017, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of the copyright holder nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH NAME
.PP
\f[B]libpmem\f[] \-\- persistent memory support library
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmem.h>
cc\ ...\ \-lpmem
\f[]
.fi
.SS Most commonly used functions:
.IP
.nf
\f[C]
int\ pmem_is_pmem(const\ void\ *addr,\ size_t\ len);
void\ pmem_persist(const\ void\ *addr,\ size_t\ len);
int\ pmem_msync(const\ void\ *addr,\ size_t\ len);
void\ *pmem_map_file(const\ char\ *path,\ size_t\ len,\ int\ flags,
\ \ \ \ mode_t\ mode,\ size_t\ *mapped_lenp,\ int\ *is_pmemp);
int\ pmem_unmap(void\ *addr,\ size_t\ len);
\f[]
.fi
.SS Partial flushing operations:
.IP
.nf
\f[C]
void\ pmem_flush(const\ void\ *addr,\ size_t\ len);
void\ pmem_drain(void);
int\ pmem_has_hw_drain(void);
\f[]
.fi
.SS Copying to persistent memory:
.IP
.nf
\f[C]
void\ *pmem_memmove_persist(void\ *pmemdest,\ const\ void\ *src,\ size_t\ len);
void\ *pmem_memcpy_persist(void\ *pmemdest,\ const\ void\ *src,\ size_t\ len);
void\ *pmem_memset_persist(void\ *pmemdest,\ int\ c,\ size_t\ len);
void\ *pmem_memmove_nodrain(void\ *pmemdest,\ const\ void\ *src,\ size_t\ len);
void\ *pmem_memcpy_nodrain(void\ *pmemdest,\ const\ void\ *src,\ size_t\ len);
void\ *pmem_memset_nodrain(void\ *pmemdest,\ int\ c,\ size_t\ len);
\f[]
.fi
.SS Library API versioning:
.IP
.nf
\f[C]
const\ char\ *pmem_check_version(
\ \ \ \ unsigned\ major_required,
\ \ \ \ unsigned\ minor_required);
\f[]
.fi
.SS Error handling:
.IP
.nf
\f[C]
const\ char\ *pmem_errormsg(void);
\f[]
.fi
.SH DESCRIPTION
.PP
\f[B]libpmem\f[] provides low\-level \f[I]persistent memory\f[] (pmem)
support for applications using direct access storage (DAX), which is
storage that supports load/store access without paging blocks from a
block storage device.
Some types of \f[I]non\-volatile memory DIMMs\f[] (NVDIMMs) provide this
type of byte addressable access to storage.
A \f[I]persistent memory aware file system\f[] is typically used to
expose the direct access to applications.
Memory mapping a file from this type of file system results in the
load/store, non\-paged access to pmem.
.PP
This library is for applications that use persistent memory directly,
without the help of any library\-supplied transactions or memory
allocation.
Higher\-level libraries that build on \f[B]libpmem\f[] are available and
are recommended for most applications, see:
.IP \[bu] 2
\f[B]libpmemobj\f[](3), a general use persistent memory API, providing
memory allocation and transactional operations on variable\-sized
objects.
.IP \[bu] 2
\f[B]libpmemblk\f[](3), providing pmem\-resident arrays of fixed\-sized
blocks with atomic updates.
.IP \[bu] 2
\f[B]libpmemlog\f[](3), providing a pmem\-resident log file.
.PP
Under normal usage, \f[B]libpmem\f[] will never print messages or
intentionally cause the process to exit.
The only exception to this is the debugging information, when enabled,
as described under \f[B]DEBUGGING AND ERROR HANDLING\f[] below.
.SH MOST COMMONLY USED FUNCTIONS
.PP
Most pmem\-aware applications will take advantage of higher level
libraries that alleviate the application from calling into
\f[B]libpmem\f[] directly.
Application developers that wish to access raw memory mapped persistence
directly (via \f[B]mmap\f[](2)) and that wish to take on the
responsibility for flushing stores to persistence will find the
functions described in this section to be the most commonly used.
.IP
.nf
\f[C]
int\ pmem_is_pmem(const\ void\ *addr,\ size_t\ len);
\f[]
.fi
.PP
The \f[B]pmem_is_pmem\f[]() function returns true only if the entire
range [\f[I]addr\f[], \f[I]addr\f[]+\f[I]len\f[]) consists of persistent
memory.
A true return from \f[B]pmem_is_pmem\f[]() means it is safe to use
\f[B]pmem_persist\f[]() and the related functions below to make changes
durable for that memory range.
.PP
The implementation of \f[B]pmem_is_pmem\f[]() requires a non\-trivial
amount of work to determine if the given range is entirely persistent
memory.
For this reason, it is better to call \f[B]pmem_is_pmem\f[]() once when
a range of memory is first encountered, save the result, and use the
saved result to determine whether \f[B]pmem_persist\f[]() or
\f[B]msync\f[](2) is appropriate for flushing changes to persistence.
Calling \f[B]pmem_is_pmem\f[]() each time changes are flushed to
persistence will not perform well.
.RS
.PP
NOTE: On Linux, \f[B]pmem_is_pmem\f[]() returns true only if the entire
range is mapped directly from Device DAX (/dev/daxX.Y) without an
intervening file system.
In the future, as file systems become available that support flushing
with \f[B]pmem_persist\f[](), \f[B]pmem_is_pmem\f[]() will return true
as appropriate.
.RE
.RS
.PP
WARNING: Using \f[B]pmem_persist\f[]() on a range where
\f[B]pmem_is_pmem\f[]() returns false may not do anything useful \-\-
use \f[B]msync\f[](2) instead.
.RE
.IP
.nf
\f[C]
void\ pmem_persist(const\ void\ *addr,\ size_t\ len);
\f[]
.fi
.PP
Force any changes in the range [\f[I]addr\f[],
\f[I]addr\f[]+\f[I]len\f[]) to be stored durably in persistent memory.
This is equivalent to calling \f[B]msync\f[](2) but may be more optimal
and will avoid calling into the kernel if possible.
There are no alignment restrictions on the range described by
\f[I]addr\f[] and \f[I]len\f[], but \f[B]pmem_persist\f[]() may expand
the range as necessary to meet platform alignment requirements.
.RS
.PP
WARNING: Like \f[B]msync\f[](2), there is nothing atomic or
transactional about this call.
Any unwritten stores in the given range will be written, but some stores
may have already been written by virtue of normal cache
eviction/replacement policies.
Correctly written code must not depend on stores waiting until
\f[B]pmem_persist\f[]() is called to become persistent \-\- they can
become persistent at any time before \f[B]pmem_persist\f[]() is called.
.RE
.IP
.nf
\f[C]
int\ pmem_msync(const\ void\ *addr,\ size_t\ len);
\f[]
.fi
.PP
The function \f[B]pmem_msync\f[]() is like \f[B]pmem_persist\f[]() in
that it forces any changes in the range [\f[I]addr\f[],
\f[I]addr\f[]+\f[I]len\f[]) to be stored durably.
Since it calls \f[B]msync\f[](), this function works on either
persistent memory or a memory mapped file on traditional storage.
\f[B]pmem_msync\f[]() takes steps to ensure the alignment of addresses
and lengths passed to \f[B]msync\f[]() meet the requirements of that
system call.
It calls \f[B]msync\f[]() with the \f[B]MS_SYNC\f[] flag as described in
\f[B]msync\f[](2).
Typically the application only checks for the existence of persistent
memory once, and then uses that result throughout the program, for
example:
.IP
.nf
\f[C]
/*\ do\ this\ call\ once,\ after\ the\ pmem\ is\ memory\ mapped\ */
int\ is_pmem\ =\ pmem_is_pmem(rangeaddr,\ rangelen);

/*\ ...\ make\ changes\ to\ a\ range\ of\ pmem\ ...\ */

/*\ make\ the\ changes\ durable\ */
if\ (is_pmem)
\ \ \ \ pmem_persist(subrangeaddr,\ subrangelen);
else
\ \ \ \ pmem_msync(subrangeaddr,\ subrangelen);

/*\ ...\ */
\f[]
.fi
.PP
The return value of \f[B]pmem_msync\f[]() is the return value of
\f[B]msync\f[](), which can return \-1 and set \f[I]errno\f[] to
indicate an error.
.RS
.PP
WARNING: On Linux, \f[B]pmem_msync\f[]() and \f[B]msync\f[](2) have no
effect on memory ranges mapped from Device DAX.
In case of memory ranges where \f[B]pmem_is_pmem\f[]() returns true use
\f[B]pmem_persist\f[]() to force the changes to be stored durably in
persistent memory.
.RE
.IP
.nf
\f[C]
void\ *pmem_map_file(const\ char\ *path,\ size_t\ len,\ int\ flags,
\ \ \ \ mode_t\ mode,\ size_t\ *mapped_lenp,\ int\ *is_pmemp);
\f[]
.fi
.PP
Given a \f[I]path\f[], \f[B]pmem_map_file\f[]() function creates a new
read/write mapping for the named file.
It will map the file using \f[B]mmap\f[](2), but it also takes extra
steps to make large page mappings more likely.
.PP
On success, \f[B]pmem_map_file\f[]() returns a pointer to mapped area.
If \f[I]mapped_lenp\f[] is not NULL, the length of the mapping is also
stored at the address it points to.
The \f[I]is_pmemp\f[] argument, if non\-NULL, points to a flag that
\f[B]pmem_is_pmem\f[]() sets to say if the mapped file is actual pmem,
or if \f[B]msync\f[]() must be used to flush writes for the mapped
range.
On error, NULL is returned, \f[I]errno\f[] is set appropriately, and
\f[I]mapped_lenp\f[] and \f[I]is_pmemp\f[] are left untouched.
.PP
The \f[I]flags\f[] argument can be 0 or bitwise OR of one or more of the
following file creation flags:
.IP \[bu] 2
\f[B]PMEM_FILE_CREATE\f[] \- Create the named file if it does not exist.
\f[I]len\f[] must be non\-zero and specifies the size of the file to be
created.
\f[I]mode\f[] has the same meaning as for \f[B]open\f[](2) and specifies
the mode to use in case a new file is created.
If neither \f[B]PMEM_FILE_CREATE\f[] nor \f[B]PMEM_FILE_TMPFILE\f[] is
specified, then \f[I]mode\f[] is ignored.
.IP \[bu] 2
\f[B]PMEM_FILE_EXCL\f[] \- Same meaning as \f[B]O_EXCL\f[] on
\f[B]open\f[](2) \- Ensure that this call creates the file.
If this flag is specified in conjunction with \f[B]PMEM_FILE_CREATE\f[],
and pathname already exists, then \f[B]pmem_map_file\f[]() will fail.
.IP \[bu] 2
\f[B]PMEM_FILE_TMPFILE\f[] \- Same meaning as \f[B]O_TMPFILE\f[] on
\f[B]open\f[](2).
Create a mapping for an unnamed temporary file.
\f[B]PMEM_FILE_CREATE\f[] and \f[I]len\f[] must be specified and
\f[I]path\f[] must be an existing directory name.
.IP \[bu] 2
\f[B]PMEM_FILE_SPARSE\f[] \- When creating a file, create a sparse
(holey) file instead of calling \f[B]posix_fallocate\f[](2).
Valid only if specified in conjunction with \f[B]PMEM_FILE_CREATE\f[] or
\f[B]PMEM_FILE_TMPFILE\f[], otherwise ignored.
.PP
If creation flags are not supplied, then \f[B]pmem_map_file\f[]()
creates a mapping for an existing file.
In such case, \f[I]len\f[] should be zero.
The entire file is mapped to memory; its length is used as the length of
the mapping and returned via \f[I]mapped_lenp\f[].
.PP
The path of a file can point to a Device DAX and in such case only
\f[B]PMEM_FILE_CREATE\f[] and \f[B]PMEM_FILE_SPARSE\f[] flags are valid,
but they both effectively do nothing.
For Device DAX mappings, the \f[I]len\f[] argument must be, regardless
of the flags, equal to either 0 or the exact size of the device.
.PP
To delete mappings created with \f[B]pmem_map_file\f[](), use
\f[B]pmem_unmap\f[]().
.IP
.nf
\f[C]
int\ pmem_unmap(void\ *addr,\ size_t\ len);
\f[]
.fi
.PP
The \f[B]pmem_unmap\f[]() function deletes all the mappings for the
specified address range, and causes further references to addresses
within the range to generate invalid memory references.
It will use the address specified by the parameter \f[I]addr\f[], where
\f[I]addr\f[] must be a previously mapped region.
\f[B]pmem_unmap\f[]() will delete the mappings using the
\f[B]munmap\f[](2), On success, \f[B]pmem_unmap\f[]() returns zero.
On error, \-1 is returned, and \f[I]errno\f[] is set appropriately.
.SH PARTIAL FLUSHING OPERATIONS
.PP
The functions in this section provide access to the stages of flushing
to persistence, for the less common cases where an application needs
more control of the flushing operations than the \f[B]pmem_persist\f[]()
function described above.
.IP
.nf
\f[C]
void\ pmem_flush(const\ void\ *addr,\ size_t\ len);
void\ pmem_drain(void);
\f[]
.fi
.PP
These functions provide partial versions of the \f[B]pmem_persist\f[]()
function described above.
\f[B]pmem_persist\f[]() can be thought of as this:
.IP
.nf
\f[C]
void
pmem_persist(const\ void\ *addr,\ size_t\ len)
{
\ \ \ \ /*\ flush\ the\ processor\ caches\ */
\ \ \ \ pmem_flush(addr,\ len);

\ \ \ \ /*\ wait\ for\ any\ pmem\ stores\ to\ drain\ from\ HW\ buffers\ */
\ \ \ \ pmem_drain();
}
\f[]
.fi
.PP
These functions allow advanced programs to create their own variations
of \f[B]pmem_persist\f[]().
For example, a program that needs to flush several discontiguous ranges
can call \f[B]pmem_flush\f[]() for each range and then follow up by
calling \f[B]pmem_drain\f[]() once.
.IP
.nf
\f[C]
int\ pmem_has_hw_drain(void);
\f[]
.fi
.PP
The \f[B]pmem_has_hw_drain\f[]() function returns true if the machine
supports an explicit \f[I]hardware drain\f[] instruction for persistent
memory.
On Intel processors with persistent memory, stores to persistent memory
are considered persistent once they are flushed from the CPU caches, so
this function always returns false.
Despite that, programs using \f[B]pmem_flush\f[]() to flush ranges of
memory should still follow up by calling \f[B]pmem_drain\f[]() once to
ensure the flushes are complete.
As mentioned above, \f[B]pmem_persist\f[]() handles calling both
\f[B]pmem_flush\f[]() and \f[B]pmem_drain\f[]().
.SH COPYING TO PERSISTENT MEMORY
.PP
The functions in this section provide optimized copying to persistent
memory.
.IP
.nf
\f[C]
void\ *pmem_memmove_persist(void\ *pmemdest,\ const\ void\ *src,\ size_t\ len);
void\ *pmem_memcpy_persist(void\ *pmemdest,\ const\ void\ *src,\ size_t\ len);
void\ *pmem_memset_persist(void\ *pmemdest,\ int\ c,\ size_t\ len);
\f[]
.fi
.PP
The \f[B]pmem_memmove_persist\f[](), \f[B]pmem_memcpy_persist\f[](), and
\f[B]pmem_memset_persist\f[](), functions provide the same memory
copying as their namesakes \f[B]memmove\f[](3), \f[B]memcpy\f[](3) and
\f[B]memset\f[](3), and ensure that the result has been flushed to
persistence before returning.
For example, the following code is functionally equivalent to
\f[B]pmem_memmove_persist\f[]():
.IP
.nf
\f[C]
void\ *
pmem_memmove_persist(void\ *pmemdest,\ const\ void\ *src,\ size_t\ len)
{
\ \ \ \ void\ *retval\ =\ memmove(pmemdest,\ src,\ len);

\ \ \ \ pmem_persist(pmemdest,\ len);

\ \ \ \ return\ retval;
}
\f[]
.fi
.PP
Calling \f[B]pmem_memmove_persist\f[]() may out\-perform the above code,
however, since the \f[B]libpmem\f[] implementation may take advantage of
the fact that \f[I]pmemdest\f[] is persistent memory and use
instructions such as \f[I]non\-temporal\f[] stores to avoid the need to
flush processor caches.
.RS
.PP
WARNING: Using these functions where \f[B]pmem_is_pmem\f[]() returns
false may not do anything useful.
Use the normal libc functions in that case.
.RE
.IP
.nf
\f[C]
void\ *pmem_memmove_nodrain(void\ *pmemdest,\ const\ void\ *src,\ size_t\ len);
void\ *pmem_memcpy_nodrain(void\ *pmemdest,\ const\ void\ *src,\ size_t\ len);
void\ *pmem_memset_nodrain(void\ *pmemdest,\ int\ c,\ size_t\ len);
\f[]
.fi
.PP
The \f[B]pmem_memmove_nodrain\f[](), \f[B]pmem_memcpy_nodrain\f[]() and
\f[B]pmem_memset_nodrain\f[]() functions are similar to
\f[B]pmem_memmove_persist\f[](), \f[B]pmem_memcpy_persist\f[](), and
\f[B]pmem_memset_persist\f[]() described above, except they skip the
final \f[B]pmem_drain\f[]() step.
This allows applications to optimize cases where several ranges are
being copied to persistent memory, followed by a single call to
\f[B]pmem_drain\f[]().
The following example illustrates how these functions might be used to
avoid multiple calls to \f[B]pmem_drain\f[]() when copying several
ranges of memory to pmem:
.IP
.nf
\f[C]
/*\ ...\ write\ several\ ranges\ to\ pmem\ ...\ */
pmem_memcpy_nodrain(pmemdest1,\ src1,\ len1);
pmem_memcpy_nodrain(pmemdest2,\ src2,\ len2);

/*\ ...\ */

/*\ wait\ for\ any\ pmem\ stores\ to\ drain\ from\ HW\ buffers\ */
pmem_drain();
\f[]
.fi
.RS
.PP
WARNING: Using \f[B]pmem_memmove_nodrain\f[](),
\f[B]pmem_memcpy_nodrain\f[]() or \f[B]pmem_memset_nodrain\f[]() on a
destination where \f[B]pmem_is_pmem\f[]() returns false may not do
anything useful.
.RE
.SH CAVEATS
.PP
\f[B]libpmem\f[] relies on the library destructor being called from the
main thread.
For this reason, all functions that might trigger destruction (e.g.
\f[B]dlclose\f[]()) should be called in the main thread.
Otherwise some of the resources associated with that thread might not be
cleaned up properly.
.SH LIBRARY API VERSIONING
.PP
This section describes how the library API is versioned, allowing
applications to work with an evolving API.
.IP
.nf
\f[C]
const\ char\ *pmem_check_version(
\ \ \ \ unsigned\ major_required,
\ \ \ \ unsigned\ minor_required);
\f[]
.fi
.PP
The \f[B]pmem_check_version\f[]() function is used to see if the
installed \f[B]libpmem\f[] supports the version of the library API
required by an application.
The easiest way to do this is for the application to supply the
compile\-time version information, supplied by defines in
\f[B]<libpmem.h>\f[], like this:
.IP
.nf
\f[C]
reason\ =\ pmem_check_version(PMEM_MAJOR_VERSION,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ PMEM_MINOR_VERSION);
if\ (reason\ !=\ NULL)\ {
\ \ \ \ /*\ version\ check\ failed,\ reason\ string\ tells\ you\ why\ */
}
\f[]
.fi
.PP
Any mismatch in the major version number is considered a failure, but a
library with a newer minor version number will pass this check since
increasing minor versions imply backwards compatibility.
.PP
An application can also check specifically for the existence of an
interface by checking for the version where that interface was
introduced.
These versions are documented in this man page as follows: unless
otherwise specified, all interfaces described here are available in
version 1.0 of the library.
Interfaces added after version 1.0 will contain the text \f[I]introduced
in version x.y\f[] in the section of this manual describing the feature.
.PP
When the version check performed by \f[B]pmem_check_version\f[]() is
successful, the return value is NULL.
Otherwise the return value is a static string describing the reason for
failing the version check.
The string returned by \f[B]pmem_check_version\f[]() must not be
modified or freed.
.SH DEBUGGING AND ERROR HANDLING
.PP
Two versions of \f[B]libpmem\f[] are typically available on a
development system.
The normal version, accessed when a program is linked using the
\f[B]\-lpmem\f[] option, is optimized for performance.
That version skips checks that impact performance and never logs any
trace information or performs any run\-time assertions.
If an error is detected during the call to \f[B]libpmem\f[] function, an
application may retrieve an error message describing the reason of
failure using the following function:
.IP
.nf
\f[C]
const\ char\ *pmem_errormsg(void);
\f[]
.fi
.PP
The \f[B]pmem_errormsg\f[]() function returns a pointer to a static
buffer containing the last error message logged for current thread.
The error message may include description of the corresponding error
code (if \f[I]errno\f[] was set), as returned by \f[B]strerror\f[](3).
The error message buffer is thread\-local; errors encountered in one
thread do not affect its value in other threads.
The buffer is never cleared by any library function; its content is
significant only when the return value of the immediately preceding call
to \f[B]libpmem\f[] function indicated an error, or if \f[I]errno\f[]
was set.
The application must not modify or free the error message string, but it
may be modified by subsequent calls to other library functions.
.PP
A second version of \f[B]libpmem\f[], accessed when a program uses the
libraries under \f[B]/usr/lib/nvml_debug\f[], contains run\-time
assertions and trace points.
The typical way to access the debug version is to set the environment
variable \f[B]LD_LIBRARY_PATH\f[] to \f[B]/usr/lib/nvml_debug\f[] or
\f[B]/usr/lib64/nvml_debug\f[] depending on where the debug libraries
are installed on the system.
The trace points in the debug version of the library are enabled using
the environment variable \f[B]PMEM_LOG_LEVEL\f[], which can be set to
the following values:
.IP \[bu] 2
\f[B]0\f[] \- This is the default level when \f[B]PMEM_LOG_LEVEL\f[] is
not set.
No log messages are emitted at this level.
.IP \[bu] 2
\f[B]1\f[] \- Additional details on any errors detected are logged (in
addition to returning the \f[I]errno\f[]\-based errors as usual).
The same information may be retrieved using \f[B]pmem_errormsg\f[]().
.IP \[bu] 2
\f[B]2\f[] \- A trace of basic operations is logged.
.IP \[bu] 2
\f[B]3\f[] \- This level enables a very verbose amount of function call
tracing in the library.
.IP \[bu] 2
\f[B]4\f[] \- This level enables voluminous and fairly obscure tracing
information that is likely only useful to the \f[B]libpmem\f[]
developers.
.PP
The environment variable \f[B]PMEM_LOG_FILE\f[] specifies a file name
where all logging information should be written.
If the last character in the name is "\-", the PID of the current
process will be appended to the file name when the log file is created.
If \f[B]PMEM_LOG_FILE\f[] is not set, the logging output goes to stderr.
.PP
Setting the environment variable \f[B]PMEM_LOG_LEVEL\f[] has no effect
on the non\-debug version of \f[B]libpmem\f[].
.SH ENVIRONMENT VARIABLES
.PP
\f[B]libpmem\f[] can change its default behavior based on the following
environment variables.
These are largely intended for testing and are not normally required.
.IP \[bu] 2
\f[B]PMEM_IS_PMEM_FORCE\f[]=\f[I]val\f[]
.PP
If \f[I]val\f[] is 0 (zero), then \f[B]pmem_is_pmem\f[]() will always
return false.
Setting \f[I]val\f[] to 1 causes \f[B]pmem_is_pmem\f[]() to always
return true.
This variable is mostly used for testing but can be used to force pmem
behavior on a system where a range of pmem is not detectable as pmem for
some reason.
.RS
.PP
NOTE: Unlike the other variables, the value of
\f[B]PMEM_IS_PMEM_FORCE\f[] is not queried (and cached) at the library
initialization time, but on the first call to \f[B]pmem_is_pmem\f[]()
function.
It means that in case of \f[B]libpmemlog\f[], \f[B]libpmemblk\f[], and
\f[B]libpmemobj\f[] libraries, it may still be set or modified by the
program until the first attempt to create or open the persistent memory
pool.
.RE
.IP \[bu] 2
\f[B]PMEM_NO_CLWB\f[]=1
.PP
Setting this environment variable to 1 forces \f[B]libpmem\f[] to never
issue the \f[B]CLWB\f[] instruction on Intel hardware, falling back to
other cache flush instructions instead (\f[B]CLFLUSHOPT\f[] or
\f[B]CLFLUSH\f[] on Intel hardware).
Without this environment variable, \f[B]libpmem\f[] will always use the
\f[B]CLWB\f[] instruction for flushing processor caches on platforms
that support the instruction.
This variable is intended for use during library testing but may be
required for some rare cases where using \f[B]CLWB\f[] has a negative
impact on performance.
.IP \[bu] 2
\f[B]PMEM_NO_CLFLUSHOPT\f[]=1
.PP
Setting this environment variable to 1 forces \f[B]libpmem\f[] to never
issue the \f[B]CLFLUSHOPT\f[] instruction on Intel hardware, falling
back to the \f[B]CLFLUSH\f[] instructions instead.
Without this environment variable, \f[B]libpmem\f[] will always use the
\f[B]CLFLUSHOPT\f[] instruction for flushing processor caches on
platforms that support the instruction, but where \f[B]CLWB\f[] is not
available.
This variable is intended for use during library testing.
.IP \[bu] 2
\f[B]PMEM_NO_FLUSH\f[]=1
.PP
Setting this environment variable to 1 forces \f[B]libpmem\f[] to never
issue any of \f[B]CLFLUSH\f[], \f[B]CLFLUSHOPT\f[] or \f[B]CLWB\f[]
instructions on Intel hardware.
This variable is intended for use during library testing.
.IP \[bu] 2
\f[B]PMEM_NO_MOVNT\f[]=1
.PP
Setting this environment variable to 1 forces \f[B]libpmem\f[] to never
use the \f[I]non\-temporal\f[] move instructions on Intel hardware.
Without this environment variable, \f[B]libpmem\f[] will use the
non\-temporal instructions for copying larger ranges to persistent
memory on platforms that support the instructions.
This variable is intended for use during library testing.
.IP \[bu] 2
\f[B]PMEM_MOVNT_THRESHOLD\f[]=\f[I]val\f[]
.PP
This environment variable allows overriding the minimal length of
\f[B]pmem_memcpy_*\f[](), \f[B]pmem_memmove_*\f[]() or
\f[B]pmem_memset_*\f[]() operations, for which \f[B]libpmem\f[] uses
\f[I]non\-temporal\f[] move instructions.
Setting this environment variable to 0 forces \f[B]libpmem\f[] to always
use the \f[I]non\-temporal\f[] move instructions if available.
It has no effect if \f[B]PMEM_NO_MOVNT\f[] variable is set to 1.
This variable is intended for use during library testing.
.IP \[bu] 2
\f[B]PMEM_MMAP_HINT\f[]=\f[I]val\f[]
.PP
This environment variable allows overriding the hint address used by
\f[B]pmem_map_file\f[]().
If set, it also disables mapping address randomization.
This variable is intended for use during library testing and debugging.
Setting it to some fairly large value (i.e.
0x10000000000) will very likely result in mapping the file at the
specified address (if not used) or at the first unused region above
given address, without adding any random offset.
When debugging, this makes it easier to calculate the actual address of
the persistent memory block, based on its offset in the file.
In case of \f[B]libpmemobj\f[] it simplifies conversion of a persistent
object identifier (OID) into a direct pointer to the object.
.RS
.PP
NOTE: \f[B]Setting this environment variable affects all the NVM
libraries,\f[] disabling mapping address randomization and causing the
specified address to be used as a hint about where to place the mapping.
.RE
.SH EXAMPLE
.PP
The following example uses \f[B]libpmem\f[] to flush changes made to
raw, memory\-mapped persistent memory.
.RS
.PP
WARNING: There is nothing transactional about the
\f[B]pmem_persist\f[]() or \f[B]pmem_msync\f[]() calls in this example.
Interrupting the program may result in a partial write to pmem.
Use a transactional library such as \f[B]libpmemobj\f[](3) to avoid torn
updates.
.RE
.IP
.nf
\f[C]
#include\ <sys/types.h>
#include\ <sys/stat.h>
#include\ <fcntl.h>
#include\ <stdio.h>
#include\ <errno.h>
#include\ <stdlib.h>
#include\ <unistd.h>
#include\ <string.h>
#include\ <libpmem.h>

/*\ using\ 4k\ of\ pmem\ for\ this\ example\ */
#define\ PMEM_LEN\ 4096

#define\ PATH\ "/pmem\-fs/myfile"

int
main(int\ argc,\ char\ *argv[])
{
\ \ \ \ char\ *pmemaddr;
\ \ \ \ size_t\ mapped_len;
\ \ \ \ int\ is_pmem;

\ \ \ \ /*\ create\ a\ pmem\ file\ and\ memory\ map\ it\ */

\ \ \ \ if\ ((pmemaddr\ =\ pmem_map_file(PATH,\ PMEM_LEN,\ PMEM_FILE_CREATE,
\ \ \ \ \ \ \ \ \ \ \ \ 0666,\ &mapped_len,\ &is_pmem))\ ==\ NULL)\ {
\ \ \ \ \ \ \ \ perror("pmem_map_file");
\ \ \ \ \ \ \ \ exit(1);
\ \ \ \ }

\ \ \ \ /*\ store\ a\ string\ to\ the\ persistent\ memory\ */
\ \ \ \ strcpy(pmemaddr,\ "hello,\ persistent\ memory");

\ \ \ \ /*\ flush\ above\ strcpy\ to\ persistence\ */
\ \ \ \ if\ (is_pmem)
\ \ \ \ \ \ \ \ pmem_persist(pmemaddr,\ mapped_len);
\ \ \ \ else
\ \ \ \ \ \ \ \ pmem_msync(pmemaddr,\ mapped_len);

\ \ \ \ /*
\ \ \ \ \ *\ Delete\ the\ mappings.\ The\ region\ is\ also
\ \ \ \ \ *\ automatically\ unmapped\ when\ the\ process\ is
\ \ \ \ \ *\ terminated.
\ \ \ \ \ */
\ \ \ \ pmem_unmap(pmemaddr,\ mapped_len);
}
\f[]
.fi
.PP
See <http://pmem.io/nvml/libpmem> for more examples using the
\f[B]libpmem\f[] API.
.SH ACKNOWLEDGEMENTS
.PP
\f[B]libpmem\f[] builds on the persistent memory programming model
recommended by the SNIA NVM Programming Technical Work Group:
<http://snia.org/nvmp>
.SH SEE ALSO
.PP
\f[B]libpmemobj\f[](3), \f[B]libpmemblk\f[](3), \f[B]libpmemlog\f[](3),
\f[B]libvmem\f[](3), \f[B]open\f[](2), \f[B]mmap\f[](2),
\f[B]munmap\f[](2), \f[B]msync\f[](2), \f[B]strerror\f[](3) and
\f[B]<http://pmem.io>\f[]
