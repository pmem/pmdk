.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "LIBPMEMPOOL" "3" "2017-06-18" "NVM Library - pmempool API version 1.1" "NVML Programmer's Manual"
.hy
.\" Copyright 2014-2017, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of the copyright holder nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH NAME
.PP
\f[B]libpmempool\f[] \-\- pool management library
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmempool.h>
cc\ \-std=gnu99\ ...\ \-lpmempool\ \-lpmem
\f[]
.fi
.SS Health check functions:
.IP
.nf
\f[C]
PMEMpoolcheck\ *pmempool_check_init(struct\ pmempool_check_args\ *args,
\ \ \ \ size_t\ args_size);
struct\ pmempool_check_status\ *pmempool_check(PMEMpoolcheck\ *ppc);
enum\ pmempool_check_result\ pmempool_check_end(PMEMpoolcheck\ *ppc);
\f[]
.fi
.SS Pool set synchronization and transformation:
.IP
.nf
\f[C]
int\ pmempool_sync(const\ char\ *poolset_file,\ unsigned\ flags);\ (EXPERIMENTAL)

int\ pmempool_transform(const\ char\ *poolset_file_src,
\ \ \ \ const\ char\ *poolset_file_dst,
\ \ \ \ unsigned\ flags);\ (EXPERIMENTAL)
\f[]
.fi
.SS Pool set management functions:
.IP
.nf
\f[C]
int\ pmempool_rm(const\ char\ *path,\ int\ flags);
\f[]
.fi
.SS Library API versioning:
.IP
.nf
\f[C]
const\ char\ *pmempool_check_version(unsigned\ major_required,
\ \ \ \ unsigned\ minor_required);
\f[]
.fi
.SS Error handling:
.IP
.nf
\f[C]
const\ char\ *pmempool_errormsg(void);
\f[]
.fi
.SH DESCRIPTION
.PP
\f[B]libpmempool\f[] provides a set of utilities for off\-line analysis
and manipulation of a \f[I]pool\f[].
By \f[I]pool\f[] in this manpage we mean pmemobj pool, pmemblk pool,
pmemlog pool or BTT layout, independent of the underlying storage.
Some of \f[B]libpmempool\f[] functions are required to work without any
impact on processed \f[I]pool\f[] but some of them may create a new or
modify an existing one.
.PP
\f[B]libpmempool\f[] is for applications that need high reliability or
built\-in troubleshooting.
It may be useful for testing and debugging purposes also.
.SH POOL CHECKING FUNCTIONS
.PP
To perform check provided by \f[B]libpmempool\f[], a \f[I]check
context\f[] must be first initialized using
\f[B]pmempool_check_init\f[]() function described in this section.
Once initialized \f[I]check context\f[] is represented by an opaque
handle, of type \f[I]PMEMpoolcheck*\f[], which is passed to all of the
other functions described in this section.
.PP
To execute check \f[B]pmempool_check\f[]() must be called iteratively.
Each call resumes check till new status will be generated.
Each status is represented by \f[I]struct pmempool_check_status*\f[]
structure.
It may carry various types of messages described in this section.
.PP
When check is completed \f[B]pmempool_check\f[]() returns NULL pointer.
Check must be finalized using \f[B]pmempool_check_end\f[]().
It returns \f[I]enum pmempool_check_result\f[] describing result of the
whole check.
.SH NOTE
.PP
Currently, checking the consistency of a \f[I]pmemobj\f[] pool is
\f[B]not\f[] supported.
.IP
.nf
\f[C]
PMEMpoolcheck\ *pmempool_check_init(struct\ pmempool_check_args\ *args,
\ \ \ \ size_t\ args_size);
\f[]
.fi
.PP
The \f[B]pmempool_check_init\f[]() initializes check context.
\f[I]args\f[] describes parameters of the check context.
\f[I]args_size\f[] should be equal to the size of the \f[I]struct
pmempool_check_args\f[].
\f[I]struct pmempool_check_args\f[] is defined as follows:
.IP
.nf
\f[C]
struct\ pmempool_check_args
{
\ \ \ \ /*\ path\ to\ the\ pool\ to\ check\ */
\ \ \ \ const\ char\ *path;

\ \ \ \ /*\ optional\ backup\ path\ */
\ \ \ \ const\ char\ *backup_path;

\ \ \ \ /*\ type\ of\ the\ pool\ */
\ \ \ \ enum\ pmempool_pool_type\ pool_type;

\ \ \ \ /*\ parameters\ */
\ \ \ \ int\ flags;
};
\f[]
.fi
.PP
The \f[I]flags\f[] argument accepts any combination of the following
values (ORed):
.IP \[bu] 2
\f[B]PMEMPOOL_CHECK_REPAIR\f[] \- perform repairs
.IP \[bu] 2
\f[B]PMEMPOOL_CHECK_DRY_RUN\f[] \- emulate repairs, not supported on
Device DAX
.IP \[bu] 2
\f[B]PMEMPOOL_CHECK_ADVANCED\f[] \- perform hazardous repairs
.IP \[bu] 2
\f[B]PMEMPOOL_CHECK_ALWAYS_YES\f[] \- do not ask before repairs
.IP \[bu] 2
\f[B]PMEMPOOL_CHECK_VERBOSE\f[] \- generate info statuses
.IP \[bu] 2
\f[B]PMEMPOOL_CHECK_FORMAT_STR\f[] \- generate string format statuses
.PP
If provided parameters are invalid or initialization process fails
\f[B]pmempool_check_init\f[]() returns NULL and sets \f[I]errno\f[]
appropriately.
\f[I]pool_type\f[] has to match type of the \f[I]pool\f[] being
processed.
You can turn on pool type detection by setting \f[I]pool_type\f[] to
\f[B]PMEMPOOL_POOL_TYPE_DETECT\f[].
Pool type detection fail ends check.
.PP
\f[I]backup_path\f[] argument can either be:
.IP \[bu] 2
NULL.
It indicates no backup will be performed.
.IP \[bu] 2
a non existing file.
It is valid only in case \f[I]path\f[] is a single file \f[I]pool\f[].
It indicates a \f[I]backup_path\f[] file will be created and backup will
be performed.
.IP \[bu] 2
an existing \f[I]pool set\f[] file of the same structure (the same
number of parts with exactly the same size) as the source \f[I]pool
set\f[].
It is valid only in case \f[I]path\f[] is a \f[I]pool set\f[].
It indicates backup will be performed in a form described by the
\f[I]backup_path\f[] \f[I]pool set\f[].
.PP
Backup is supported only if the source \f[I]pool set\f[] has no defined
replicas.
.PP
Pool sets with remote replicas are not supported neither as
\f[I]path\f[] nor as \f[I]backup_path\f[].
.PP
This is an example of a \f[I]check context\f[] initialization:
.IP
.nf
\f[C]
struct\ pmempool_check_args\ args\ =
{
\ \ \ \ .path\ =\ "/path/to/blk.pool",
\ \ \ \ .backup_path\ =\ NULL,
\ \ \ \ .pool_type\ =\ PMEMPOOL_POOL_TYPE_BLK,
\ \ \ \ .flags\ =\ PMEMPOOL_CHECK_REPAIR\ |\ PMEMPOOL_CHECK_DRY_RUN\ |
\ \ \ \ \ \ \ \ PMEMPOOL_CHECK_VERBOSE\ |\ PMEMPOOL_CHECK_FORMAT_STR
};
\f[]
.fi
.IP
.nf
\f[C]
PMEMpoolcheck\ *ppc\ =\ pmempool_check_init(&args,\ sizeof(args));
\f[]
.fi
.PP
The check will process a \f[I]pool\f[] of type
\f[B]PMEMPOOL_POOL_TYPE_BLK\f[] located in the path
\f[I]/path/to/blk.pool\f[].
Before check it will not create a backup of the \f[I]pool\f[]
(\f[I]backup_path == NULL\f[]).
If the check will find any issues it will try to perform repair steps
(\f[B]PMEMPOOL_CHECK_REPAIR\f[]), but it will not make any changes to
the \f[I]pool\f[] (\f[B]PMEMPOOL_CHECK_DRY_RUN\f[]) and it will not
perform any dangerous repair steps (no
\f[B]PMEMPOOL_CHECK_ADVANCED\f[]).
The check will ask before performing any repair steps (no
\f[B]PMEMPOOL_CHECK_ALWAYS_YES\f[]).
It will also generate detailed information about the check
(\f[B]PMEMPOOL_CHECK_VERBOSE\f[]).
\f[B]PMEMPOOL_CHECK_FORMAT_STR\f[] flag indicates string format statuses
(\f[I]struct pmempool_check_status\f[]).
Currently it is the only supported status format so this flag is
required.
.IP
.nf
\f[C]
struct\ pmempool_check_status\ *pmempool_check(PMEMpoolcheck\ *ppc);
\f[]
.fi
.PP
The \f[B]pmempool_check\f[]() function starts or resumes the check
indicated by \f[I]ppc\f[].
When next status will be generated it pauses the check and returns a
pointer to the \f[I]struct pmempool_check_status\f[] structure:
.IP
.nf
\f[C]
struct\ pmempool_check_status
{
\ \ \ \ enum\ pmempool_check_msg_type\ type;\ /*\ type\ of\ the\ status\ */
\ \ \ \ struct
\ \ \ \ {
\ \ \ \ \ \ \ \ const\ char\ *msg;\ /*\ status\ message\ string\ */
\ \ \ \ \ \ \ \ const\ char\ *answer;\ /*\ answer\ to\ message\ if\ applicable\ */
\ \ \ \ }\ str;
};
\f[]
.fi
.PP
This structure can describe three types of statuses:
.IP \[bu] 2
\f[B]PMEMPOOL_CHECK_MSG_TYPE_INFO\f[] \- detailed information about the
check.
Generated only if a \f[B]PMEMPOOL_CHECK_VERBOSE\f[] flag was set.
.IP \[bu] 2
\f[B]PMEMPOOL_CHECK_MSG_TYPE_ERROR\f[] \- encountered error
.IP \[bu] 2
\f[B]PMEMPOOL_CHECK_MSG_TYPE_QUESTION\f[] \- question.
Generated only if an \f[B]PMEMPOOL_CHECK_ALWAYS_YES\f[] flag was not
set.
It requires \f[I]answer\f[] to be set to "yes" or "no" before
continuing.
.PP
After calling \f[B]pmempool_check\f[]() again the previously provided
\f[I]struct pmempool_check_status*\f[] pointer must be considered
invalid.
When the check completes \f[B]pmempool_check\f[]() returns NULL pointer.
.IP
.nf
\f[C]
enum\ pmempool_check_result\ pmempool_check_end(PMEMpoolcheck*\ ppc);
\f[]
.fi
.PP
The \f[B]pmempool_check_end\f[]() function finalizes the check and
releases all related resources.
\f[I]ppc\f[] is not a valid pointer after calling
\f[B]pmempool_check_end\f[]().
It returns \f[I]enum pmempool_check_result\f[] summarizing result of the
finalized check.
\f[B]pmempool_check_end\f[]() can return one of the following values:
.IP \[bu] 2
\f[B]PMEMPOOL_CHECK_RESULT_CONSISTENT\f[] \- the \f[I]pool\f[] is
consistent
.IP \[bu] 2
\f[B]PMEMPOOL_CHECK_RESULT_NOT_CONSISTENT\f[] \- the \f[I]pool\f[] is
not consistent
.IP \[bu] 2
\f[B]PMEMPOOL_CHECK_RESULT_REPAIRED\f[] \- the \f[I]pool\f[] has issues
but all repair steps completed successfully
.IP \[bu] 2
\f[B]PMEMPOOL_CHECK_RESULT_CANNOT_REPAIR\f[] \- the \f[I]pool\f[] has
issues which can not be repaired
.IP \[bu] 2
\f[B]PMEMPOOL_CHECK_RESULT_ERROR\f[] \- the \f[I]pool\f[] has errors or
the check encountered issue
.SH POOL SET SYNCHRONIZATION AND TRANSFORMATION
.SS POOL SET SYNC
.IP
.nf
\f[C]
int\ pmempool_sync(const\ char\ *poolset_file,\ unsigned\ flags);\ (EXPERIMENTAL)
\f[]
.fi
.PP
The \f[B]pmempool_sync\f[]() function synchronizes data between replicas
within a pool set.
.PP
\f[B]pmempool_sync\f[]() accepts two arguments:
.IP \[bu] 2
\f[I]poolset_file\f[] \- a path to a pool set file,
.IP \[bu] 2
\f[I]flags\f[] \- a combination of flags (ORed) which modify the way of
synchronization.
.PP
NOTE: Only the pool set file used to create the pool should be used for
syncing the pool.
.PP
The following flags are available:
.IP \[bu] 2
\f[B]PMEMPOOL_DRY_RUN\f[] \- do not apply changes, only check for
viability of synchronization.
.PP
\f[B]pmempool_sync\f[]() function checks if metadata of all replicas in
a pool set are consistent, i.e.
all parts are healthy, and if any of them is not, the corrupted or
missing parts are recreated and filled with data from one of the healthy
replicas.
.PP
The function returns either 0 on success or \-1 in case of error with
proper errno set accordingly.
.RS
.PP
NOTE: The \f[B]pmempool_sync\f[]() API is experimental and it may change
in future versions of the library.
.RE
.SS POOL SET TRANSFORM
.IP
.nf
\f[C]
int\ pmempool_transform(const\ char\ *poolset_file_src,
\ \ \ \ const\ char\ *poolset_file_dst,
\ \ \ \ unsigned\ flags);\ (EXPERIMENTAL)
\f[]
.fi
.PP
The \f[B]pmempool_transform\f[]() function modifies internal structure
of a pool set.
It supports the following operations:
.IP \[bu] 2
adding one or more replicas,
.IP \[bu] 2
removing one or more replicas,
.IP \[bu] 2
reordering of replicas.
.PP
Currently these operations are allowed only for \f[B]pmemobj\f[] pools
(see \f[B]libpmemobj\f[](3)).
.PP
\f[B]pmempool_transform\f[]() accepts three arguments:
.IP \[bu] 2
\f[I]poolset_file_src\f[] \- a path to a pool set file which defines the
source pool set to be changed,
.IP \[bu] 2
\f[I]poolset_file_dst\f[] \- a path to a pool set file which defines the
target structure of the pool set,
.IP \[bu] 2
\f[I]flags\f[] \- a combination of flags (ORed) which modify the way of
synchronization.
.PP
The following flags are available:
.IP \[bu] 2
\f[B]PMEMPOOL_DRY_RUN\f[] \- do not apply changes, only check for
viability of synchronization.
.PP
When adding or deleting replicas, the two pool set files can differ only
in the definitions of replicas which are to be added or deleted.
One cannot add and remove replicas in the same step.
Only one of these operations can be performed at a time.
Reordering replicas can be combined with any of them.
Also, to add a replica it is necessary for its effective size to match
or exceed the pool size.
Otherwise the whole operation fails and no changes are applied.
Effective size of a replica is the sum of sizes of all its part files
decreased by 4096 bytes per each part file.
The 4096 bytes of each part file is utilized for storing internal
metadata of the pool part files.
.PP
The function returns either 0 on success or \-1 in case of error with
proper errno set accordingly.
.RS
.PP
NOTE: The \f[B]pmempool_transform\f[]() API is experimental and it may
change in future versions of the library.
.RE
.SH POOL SET MANAGEMENT FUNCTIONS:
.SS Removing pool
.IP
.nf
\f[C]
int\ pmempool_rm(const\ char\ *path,\ int\ flags);
\f[]
.fi
.PP
The \f[B]pmempool_rm\f[]() function removes pool pointed by
\f[I]path\f[].
The \f[I]path\f[] can point to either a regular file, device dax or pool
set file.
In case of pool set file the \f[B]pmempool_rm\f[]() will remove all part
files from local replicas using \f[B]unlink\f[](3) and all remote
replicas using \f[B]rpmem_remove\f[]() function (see
\f[B]librpmem\f[](3)), before removing the pool set file itself.
.PP
The \f[I]flags\f[] argument determines the behavior of
\f[B]pmempool_rm\f[]() function.
It is either 0 or the bitwise OR of one or more of the following flags:
.IP \[bu] 2
\f[B]PMEMPOOL_RM_FORCE\f[] Ignore all errors when removing part files
from local replicas or remote replica.
.IP \[bu] 2
\f[B]PMEMPOOL_RM_POOLSET_LOCAL\f[] Remove also local pool set file.
.IP \[bu] 2
\f[B]PMEMPOOL_RM_POOLSET_REMOTE\f[] Remove also remote pool set file.
.SH LIBRARY API VERSIONING
.PP
This section describes how the library API is versioned, allowing
applications to work with an evolving API.
.IP
.nf
\f[C]
const\ char\ *pmempool_check_version(
\ \ \ \ unsigned\ major_required,
\ \ \ \ unsigned\ minor_required);
\f[]
.fi
.PP
The \f[B]pmempool_check_version\f[]() function is used to see if the
installed \f[B]libpmempool\f[] supports the version of the library API
required by an application.
The easiest way to do this for the application is to supply the
compile\-time version information, supplied by defines in
\f[B]<libpmempool.h>\f[], like this:
.IP
.nf
\f[C]
reason\ =\ pmempool_check_version(PMEMPOOL_MAJOR_VERSION,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ PMEMPOOL_MINOR_VERSION);
if\ (reason\ !=\ NULL)\ {
\ \ \ \ /*\ version\ check\ failed,\ reason\ string\ tells\ you\ why\ */
}
\f[]
.fi
.PP
Any mismatch in the major version number is considered a failure, but a
library with a newer minor version number will pass this check since
increasing minor versions imply backwards compatibility.
.PP
An application can also check specifically for the existence of an
interface by checking for the version where that interface was
introduced.
These versions are documented in this man page as follows: unless
otherwise specified, all interfaces described here are available in
version 1.0 of the library.
Interfaces added after version 1.0 will contain the text \f[I]introduced
in version x.y\f[] in the section of this manual describing the feature.
.PP
When the version check performed by \f[B]pmempool_check_version\f[]() is
successful, the return value is NULL.
Otherwise the return value is a static string describing the reason for
failing the version check.
The string returned by \f[B]pmempool_check_version\f[]() must not be
modified or freed.
.SH DEBUGGING AND ERROR HANDLING
.PP
Two versions of libpmempool are typically available on a development
system.
The normal version, accessed when a program is linked using the
\f[B]\-lpmempool\f[] option, is optimized for performance.
That version skips checks that impact performance and exceptionally logs
any trace information or performs any run\-time assertions.
If an error is detected during the call to \f[B]libpmempool\f[]
function, an application may retrieve an error message describing the
reason of failure using the following function:
.IP
.nf
\f[C]
const\ char\ *pmempool_errormsg(void);
\f[]
.fi
.PP
The \f[B]pmempool_errormsg\f[]() function returns a pointer to a static
buffer containing the last error message logged for current thread.
The error message may include description of the corresponding error
code (if \f[I]errno\f[] was set), as returned by \f[B]strerror\f[](3).
The error message buffer is thread\-local; errors encountered in one
thread do not affect its value in other threads.
The buffer is never cleared by any library function; its content is
significant only when the return value of the immediately preceding call
to \f[B]libpmempool\f[] function indicated an error, or if
\f[I]errno\f[] was set.
The application must not modify or free the error message string, but it
may be modified by subsequent calls to other library functions.
.PP
A second version of \f[B]libpmempool\f[], accessed when a program uses
the libraries under \f[B]/usr/lib/nvml_debug\f[], contains run\-time
assertions and trace points.
The typical way to access the debug version is to set the environment
variable \f[B]LD_LIBRARY_PATH\f[] to \f[B]/usr/lib/nvml_debug\f[] or
\f[B]/usr/lib64/nvml_debug\f[] depending on where the debug libraries
are installed on the system.
The trace points in the debug version of the library are enabled using
the environment variable \f[B]PMEMPOOL_LOG_LEVEL\f[], which can be set
to the following values:
.IP \[bu] 2
\f[B]0\f[] \- This is the default level when \f[B]PMEMPOOL_LOG_LEVEL\f[]
is not set.
No log messages are emitted at this level.
.IP \[bu] 2
\f[B]1\f[] \- Additional details on any errors detected are logged (in
addition to returning the \f[I]errno\f[]\-based errors as usual).
The same information may be retrieved using
\f[B]pmempool_errormsg\f[]().
.IP \[bu] 2
\f[B]2\f[] \- A trace of basic operations is logged.
.IP \[bu] 2
\f[B]3\f[] \- This level enables a very verbose amount of function call
tracing in the library.
.IP \[bu] 2
\f[B]4\f[] \- This level enables voluminous and fairly obscure tracing
information that is likely only useful to the libpmempool developers.
.PP
The environment variable \f[B]PMEMPOOL_LOG_FILE\f[] specifies a file
name where all logging information should be written.
If the last character in the name is "\-", the PID of the current
process will be appended to the file name when the log file is created.
If \f[B]PMEMPOOL_LOG_FILE\f[] is not set, the logging output goes to
stderr.
.PP
Setting the environment variable \f[B]PMEMPOOL_LOG_FILE\f[] has no
effect on the non\-debug version of \f[B]libpmempool\f[].
.SH EXAMPLE
.PP
The following example illustrates how the \f[B]libpmempool\f[] API is
used.
The program detects the type and checks consistency of given pool.
If there are any issues detected, the pool is automatically repaired.
.IP
.nf
\f[C]
#include\ <stddef.h>
#include\ <unistd.h>
#include\ <stdlib.h>
#include\ <stdio.h>
#include\ <libpmempool.h>

#define\ PATH\ "./pmem\-fs/myfile"
#define\ CHECK_FLAGS\ (PMEMPOOL_CHECK_FORMAT_STR|PMEMPOOL_CHECK_REPAIR|\\
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ PMEMPOOL_CHECK_VERBOSE)

int
main(int\ argc,\ char\ *argv[])
{
\ \ \ \ PMEMpoolcheck\ *ppc;
\ \ \ \ struct\ pmempool_check_status\ *status;
\ \ \ \ enum\ pmempool_check_result\ ret;

\ \ \ \ /*\ arguments\ for\ check\ */
\ \ \ \ struct\ pmempool_check_args\ args\ =\ {
\ \ \ \ \ \ \ \ .path\ \ \ \ \ \ \ =\ PATH,
\ \ \ \ \ \ \ \ .backup_path\ \ \ \ =\ NULL,
\ \ \ \ \ \ \ \ .pool_type\ \ =\ PMEMPOOL_POOL_TYPE_DETECT,
\ \ \ \ \ \ \ \ .flags\ \ \ \ \ \ =\ CHECK_FLAGS
\ \ \ \ };

\ \ \ \ /*\ initialize\ check\ context\ */
\ \ \ \ if\ ((ppc\ =\ pmempool_check_init(&args,\ sizeof(args)))\ ==\ NULL)\ {
\ \ \ \ \ \ \ \ perror("pmempool_check_init");
\ \ \ \ \ \ \ \ exit(EXIT_FAILURE);
\ \ \ \ }

\ \ \ \ /*\ perform\ check\ and\ repair,\ answer\ \[aq]yes\[aq]\ for\ each\ question\ */
\ \ \ \ while\ ((status\ =\ pmempool_check(ppc))\ !=\ NULL)\ {
\ \ \ \ \ \ \ \ switch\ (status\->type)\ {
\ \ \ \ \ \ \ \ case\ PMEMPOOL_CHECK_MSG_TYPE_ERROR:
\ \ \ \ \ \ \ \ \ \ \ \ printf("%s\\n",\ status\->str.msg);
\ \ \ \ \ \ \ \ \ \ \ \ break;
\ \ \ \ \ \ \ \ case\ PMEMPOOL_CHECK_MSG_TYPE_INFO:
\ \ \ \ \ \ \ \ \ \ \ \ printf("%s\\n",\ status\->str.msg);
\ \ \ \ \ \ \ \ \ \ \ \ break;
\ \ \ \ \ \ \ \ case\ PMEMPOOL_CHECK_MSG_TYPE_QUESTION:
\ \ \ \ \ \ \ \ \ \ \ \ printf("%s\\n",\ status\->str.msg);
\ \ \ \ \ \ \ \ \ \ \ \ status\->str.answer\ =\ "yes";
\ \ \ \ \ \ \ \ \ \ \ \ break;
\ \ \ \ \ \ \ \ default:
\ \ \ \ \ \ \ \ \ \ \ \ pmempool_check_end(ppc);
\ \ \ \ \ \ \ \ \ \ \ \ exit(EXIT_FAILURE);
\ \ \ \ \ \ \ \ }
\ \ \ \ }

\ \ \ \ /*\ finalize\ the\ check\ and\ get\ the\ result\ */
\ \ \ \ ret\ =\ pmempool_check_end(ppc);
\ \ \ \ switch\ (ret)\ {
\ \ \ \ \ \ \ \ case\ PMEMPOOL_CHECK_RESULT_CONSISTENT:
\ \ \ \ \ \ \ \ case\ PMEMPOOL_CHECK_RESULT_REPAIRED:
\ \ \ \ \ \ \ \ \ \ \ \ return\ 0;
\ \ \ \ \ \ \ \ default:
\ \ \ \ \ \ \ \ \ \ \ \ return\ 1;
\ \ \ \ }
}
\f[]
.fi
.PP
See <http://pmem.io/nvml/libpmempool> for more examples using the
\f[B]libpmempool\f[] API.
.SH ACKNOWLEDGEMENTS
.PP
\f[B]libpmempool\f[] builds on the persistent memory programming model
recommended by the SNIA NVM Programming Technical Work Group:
<http://snia.org/nvmp>
.SH SEE ALSO
.PP
\f[B]mmap\f[](2), \f[B]munmap\f[](2), \f[B]msync\f[](2),
\f[B]strerror\f[](3), \f[B]libpmemobj\f[](3), \f[B]libpmemblk\f[](3),
\f[B]libpmemlog\f[](3), \f[B]libpmem\f[](3) and
\f[B]<http://pmem.io>\f[]
