.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "LIBPMEMLOG" "" "2017-06-30" "NVM Library - pmemlog API version 1.0" "NVML Programmer's Manual"
.hy
.\" Copyright 2014-2017, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of the copyright holder nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH NAME
.PP
\f[B]libpmemlog\f[] \-\- persistent memory resident log file
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmemlog.h>
cc\ ...\ \-lpmemlog\ \-lpmem
\f[]
.fi
.SS Most commonly used functions:
.IP
.nf
\f[C]
PMEMlogpool\ *pmemlog_open(const\ char\ *path);
PMEMlogpool\ *pmemlog_create(const\ char\ *path,\ size_t\ poolsize,\ mode_t\ mode);
void\ pmemlog_close(PMEMlogpool\ *plp);
size_t\ pmemlog_nbyte(PMEMlogpool\ *plp);
intpmemlog_append(PMEMlogpool\ *plp,\ const\ void\ *buf,\ size_t\ count);
int\ pmemlog_appendv(PMEMlogpool\ *plp,\ const\ struct\ iovec\ *iov,\ int\ iovcnt);
long\ long\ pmemlog_tell(PMEMlogpool\ *plp);
void\ pmemlog_rewind(PMEMlogpool\ *plp);
void\ pmemlog_walk(PMEMlogpool\ *plp,\ size_t\ chunksize,
\ \ \ \ int\ (*process_chunk)(const\ void\ *buf,\ size_t\ len,\ void\ *arg),
\ \ \ \ void\ *arg);
\f[]
.fi
.SS Library API versioning:
.IP
.nf
\f[C]
const\ char\ *pmemlog_check_version(
\ \ \ \ unsigned\ major_required,
\ \ \ \ unsigned\ minor_required);
\f[]
.fi
.SS Managing library behavior:
.IP
.nf
\f[C]
void\ pmemlog_set_funcs(
\ \ \ \ void\ *(*malloc_func)(size_t\ size),
\ \ \ \ void\ (*free_func)(void\ *ptr),
\ \ \ \ void\ *(*realloc_func)(void\ *ptr,\ size_t\ size),
\ \ \ \ char\ *(*strdup_func)(const\ char\ *s));
int\ pmemlog_check(const\ char\ *path);
\f[]
.fi
.SS Error handling:
.IP
.nf
\f[C]
const\ char\ *pmemlog_errormsg(void);
\f[]
.fi
.SH DESCRIPTION
.PP
\f[B]libpmemlog\f[] provides a log file in \f[I]persistent memory\f[]
(pmem) such that additions to the log are appended atomically.
This library is intended for applications using direct access storage
(DAX), which is storage that supports load/store access without paging
blocks from a block storage device.
Some types of \f[I]non\-volatile memory DIMMs\f[] (NVDIMMs) provide this
type of byte addressable access to storage.
A \f[I]persistent memory aware file system\f[] is typically used to
expose the direct access to applications.
Memory mapping a file from this type of file system results in the
load/store, non\-paged access to pmem.
\f[B]libpmemlog\f[] builds on this type of memory mapped file.
.PP
This library is for applications that need a persistent log file,
updated atomically (the updates cannot be \f[I]torn\f[] by program
interruption such as power failures).
This library builds on the low\-level pmem support provided by
\f[B]libpmem\f[](3), handling the transactional update of the log,
flushing to persistence, and recovery for the application.
.PP
\f[B]libpmemlog\f[] is one of a collection of persistent memory
libraries available, the others are:
.IP \[bu] 2
\f[B]libpmemobj\f[](3), a general use persistent memory API, providing
memory allocation and transactional operations on variable\-sized
objects.
.IP \[bu] 2
\f[B]libpmemblk\f[](3), providing pmem\-resident arrays of fixed\-sized
blocks with atomic updates.
.IP \[bu] 2
\f[B]libpmem\f[](3), low\-level persistent memory support.
.PP
Under normal usage, \f[B]libpmemlog\f[] will never print messages or
intentionally cause the process to exit.
The only exception to this is the debugging information, when enabled,
as described under \f[B]DEBUGGING AND ERROR HANDLING\f[] below.
.SH MOST COMMONLY USED FUNCTIONS
.PP
To use the pmem\-resident log file provided by \f[B]libpmemlog\f[], a
\f[I]memory pool\f[] is first created.
This is done with the \f[B]pmemlog_create\f[]() function described in
this section.
The other functions described in this section then operate on the
resulting log memory pool.
.PP
Once created, the memory pool is represented by an opaque handle, of
type \f[I]PMEMlogpool*\f[], which is passed to most of the other
functions in this section.
Internally, \f[B]libpmemlog\f[] will use either \f[B]pmem_persist\f[]()
or \f[B]msync\f[](2) when it needs to flush changes, depending on
whether the memory pool appears to be persistent memory or a regular
file (see the \f[B]pmem_is_pmem\f[]() function in \f[B]libpmem\f[](3)
for more information).
There is no need for applications to flush changes directly when using
the log memory API provided by \f[B]libpmemlog\f[].
.IP
.nf
\f[C]
PMEMlogpool\ *pmemlog_open(const\ char\ *path);
\f[]
.fi
.PP
The \f[B]pmemlog_open\f[]() function opens an existing log memory pool,
returning a memory pool handle used with most of the functions in this
section.
\f[I]path\f[] must be an existing file containing a log memory pool as
created by \f[B]pmemlog_create\f[]().
The application must have permission to open the file and memory map it
with read/write permissions.
If an error prevents the pool from being opened, \f[B]pmemlog_open\f[]()
returns NULL and sets \f[I]errno\f[] appropriately.
.IP
.nf
\f[C]
PMEMlogpool\ *pmemlog_create(const\ char\ *path,\ size_t\ poolsize,\ mode_t\ mode);
\f[]
.fi
.PP
The \f[B]pmemlog_create\f[]() function creates a log memory pool with
the given total \f[I]poolsize\f[].
Since the transactional nature of a log memory pool requires some space
overhead in the memory pool, the resulting available log size is less
than \f[I]poolsize\f[], and is made available to the caller via the
\f[B]pmemlog_nbyte\f[]() function described below.
\f[I]path\f[] specifies the name of the memory pool file to be created.
\f[I]mode\f[] specifies the permissions to use when creating the file as
described by \f[B]creat\f[](2).
The memory pool file is fully allocated to the size \f[I]poolsize\f[]
using \f[B]posix_fallocate\f[](3).
The caller may choose to take responsibility for creating the memory
pool file by creating it before calling \f[B]pmemlog_create\f[]() and
then specifying \f[I]poolsize\f[] as zero.
In this case \f[B]pmemlog_create\f[]() will take the pool size from the
size of the existing file and will verify that the file appears to be
empty by searching for any non\-zero data in the pool header at the
beginning of the file.
The minimum file size allowed by the library for a log pool is defined
in \f[B]<libpmemlog.h>\f[] as \f[B]PMEMLOG_MIN_POOL\f[].
.PP
Depending on the configuration of the system, the available space of
non\-volatile memory space may be divided into multiple memory devices.
In such case, the maximum size of the pmemlog memory pool could be
limited by the capacity of a single memory device.
The \f[B]libpmemlog\f[] allows building persistent memory resident log
spanning multiple memory devices by creation of persistent memory pools
consisting of multiple files, where each part of such a \f[I]pool
set\f[] may be stored on different pmem\-aware filesystem.
.PP
Creation of all the parts of the pool set can be done with the
\f[B]pmemlog_create\f[]() function.
However, the recommended method for creating pool sets is to do it by
using the \f[B]pmempool\f[](1) utility.
.PP
When creating the pool set consisting of multiple files, the
\f[I]path\f[] argument passed to \f[B]pmemlog_create\f[]() must point to
the special \f[I]set\f[] file that defines the pool layout and the
location of all the parts of the pool set.
The \f[I]poolsize\f[] argument must be 0.
The meaning of \f[I]layout\f[] and \f[I]mode\f[] arguments doesn\[aq]t
change, except that the same \f[I]mode\f[] is used for creation of all
the parts of the pool set.
If the error prevents any of the pool set files from being created,
\f[B]pmemlog_create\f[]() returns NULL and sets \f[I]errno\f[]
appropriately.
.PP
When opening the pool set consisting of multiple files, the
\f[I]path\f[] argument passed to \f[B]pmemlog_open\f[]() must not point
to the pmemlog memory pool file, but to the same \f[I]set\f[] file that
was used for the pool set creation.
If an error prevents any of the pool set files from being opened, or if
the actual size of any file does not match the corresponding part size
defined in \f[I]set\f[] file \f[B]pmemlog_open\f[]() returns NULL and
sets \f[I]errno\f[] appropriately.
.PP
The set file is a plain text file, which must start with the line
containing a \f[I]PMEMPOOLSET\f[] string, followed by the specification
of all the pool parts in the next lines.
For each part, the file size and the absolute path must be provided.
.PP
The size has to be compliant with the format specified in IEC 80000\-13,
IEEE 1541 or the Metric Interchange Format.
Standards accept SI units with obligatory B \- kB, MB, GB, ...
(multiplier by 1000) and IEC units with optional "iB" \- KiB, MiB, GiB,
..., K, M, G, ...
\- (multiplier by 1024).
.PP
The path of a part can point to a Device DAX and in such case the size
argument can be set to an "AUTO" string, which means that the size of
the device will be automatically resolved at pool creation time.
When using Device DAX there\[aq]s also one additional restriction \- it
is not allowed to concatenate more than one Device DAX device in a
single pool set if the configured internal alignment is other than 4KiB.
In such case a pool set can consist only of a single part (single Device
DAX).
Please see \f[B]ndctl\-create\-namespace\f[](1) for information on how
to configure desired alignment on Device DAX.
.PP
Device DAX is the device\-centric analogue of Filesystem DAX.
It allows memory ranges to be allocated and mapped without need of an
intervening file system.
For more information please see \f[B]ndctl\-create\-namespace\f[](1).
.PP
The minimum file size of each part of the pool set is the same as the
minimum size allowed for a log pool consisting of one file.
It is defined in \f[B]<libpmemlog.h>\f[] as \f[B]PMEMLOG_MIN_POOL\f[].
Lines starting with "#" character are ignored.
.PP
Here is the example "mylogpool.set" file:
.IP
.nf
\f[C]
PMEMPOOLSET
100G\ /mountpoint0/myfile.part0
200G\ /mountpoint1/myfile.part1
400G\ /mountpoint2/myfile.part2
\f[]
.fi
.PP
The files in the set may be created by running the following command:
.IP
.nf
\f[C]
$\ pmempool\ create\ log\ mylogpool.set
\f[]
.fi
.IP
.nf
\f[C]
void\ pmemlog_close(PMEMlogpool\ *plp);
\f[]
.fi
.PP
The \f[B]pmemlog_close\f[]() function closes the memory pool indicated
by \f[I]plp\f[] and deletes the memory pool handle.
The log memory pool itself lives on in the file that contains it and may
be re\-opened at a later time using \f[B]pmemlog_open\f[]() as described
above.
.IP
.nf
\f[C]
size_t\ pmemlog_nbyte(PMEMlogpool\ *plp);
\f[]
.fi
.PP
The \f[B]pmemlog_nbyte\f[]() function returns the amount of usable space
in the log \f[I]plp\f[].
This function may be used on a log to determine how much usable space is
available after \f[B]libpmemlog\f[] has added its metadata to the memory
pool.
.IP
.nf
\f[C]
int\ pmemlog_append(PMEMlogpool\ *plp,\ const\ void\ *buf,\ size_t\ count);
\f[]
.fi
.PP
The \f[B]pmemlog_append\f[]() function appends \f[I]count\f[] bytes from
\f[I]buf\f[] to the current write offset in the log memory pool
\f[I]plp\f[].
Calling this function is analogous to appending to a file.
The append is atomic and cannot be torn by a program failure or system
crash.
On success, zero is returned.
On error, \-1 is returned and \f[I]errno\f[] is set.
.IP
.nf
\f[C]
int\ pmemlog_appendv(PMEMlogpool\ *plp,\ const\ struct\ iovec\ *iov,\ int\ iovcnt);
\f[]
.fi
.PP
The \f[B]pmemlog_appendv\f[]() function appends to the log \f[I]plp\f[]
just like \f[B]pmemlog_append\f[]() above, but this function takes a
scatter/gather list in a manner similar to \f[B]writev\f[](2).
In this case, the entire list of buffers is appended atomically, as if
the buffers in \f[I]iov\f[] were concatenated in order.
On success, zero is returned.
On error, \-1 is returned and \f[I]errno\f[] is set.
.RS
.PP
NOTE: Since \f[B]libpmemlog\f[] is designed as a low\-latency code path,
many of the checks routinely done by the operating system for
\f[B]writev\f[](2) are not practical in the library\[aq]s implementation
of \f[B]pmemlog_appendv\f[]().
No attempt is made to detect NULL or incorrect pointers, or illegal
count values, for example.
.RE
.IP
.nf
\f[C]
long\ long\ pmemlog_tell(PMEMlogpool\ *plp);
\f[]
.fi
.PP
The \f[B]pmemlog_tell\f[]() function returns the current write point for
the log, expressed as a byte offset into the usable log space in the
memory pool.
This offset starts off as zero on a newly\-created log, and is
incremented by each successful append operation.
This function can be used to determine how much data is currently in the
log.
.IP
.nf
\f[C]
void\ pmemlog_rewind(PMEMlogpool\ *plp);
\f[]
.fi
.PP
The \f[B]pmemlog_rewind\f[]() function resets the current write point
for the log to zero.
After this call, the next append adds to the beginning of the log.
.IP
.nf
\f[C]
void\ pmemlog_walk(PMEMlogpool\ *plp,\ size_t\ chunksize,
\ \ \ \ int\ (*process_chunk)(const\ void\ *buf,\ size_t\ len,\ void\ *arg),
\ \ \ \ void\ *arg);
\f[]
.fi
.PP
The \f[B]pmemlog_walk\f[]() function walks through the log \f[I]plp\f[],
from beginning to end, calling the callback function
\f[I]process_chunk\f[] for each \f[I]chunksize\f[] block of data found.
The argument \f[I]arg\f[] is also passed to the callback to help avoid
the need for global state.
The \f[I]chunksize\f[] argument is useful for logs with fixed\-length
records and may be specified as 0 to cause a single call to the callback
with the entire log contents passed as the \f[I]buf\f[] argument.
The \f[I]len\f[] argument tells the \f[I]process_chunk\f[] function how
much data buf is holding.
The callback function should return 1 if \f[B]pmemlog_walk\f[]() should
continue walking through the log, or 0 to terminate the walk.
The callback function is called while holding \f[B]libpmemlog\f[]
internal locks that make calls atomic, so the callback function must not
try to append to the log itself or deadlock will occur.
.SH CAVEATS
.PP
\f[B]libpmemlog\f[] relies on the library destructor being called from
the main thread.
For this reason, all functions that might trigger destruction (e.g.
\f[B]dlclose\f[]()) should be called in the main thread.
Otherwise some of the resources associated with that thread might not be
cleaned up properly.
.SH LIBRARY API VERSIONING
.PP
This section describes how the library API is versioned, allowing
applications to work with an evolving API.
.IP
.nf
\f[C]
const\ char\ *pmemlog_check_version(
\ \ \ \ unsigned\ major_required,
\ \ \ \ unsigned\ minor_required);
\f[]
.fi
.PP
The \f[B]pmemlog_check_version\f[]() function is used to see if the
installed \f[B]libpmemlog\f[] supports the version of the library API
required by an application.
The easiest way to do this is for the application to supply the
compile\-time version information, supplied by defines in
\f[B]<libpmemlog.h>\f[], like this:
.IP
.nf
\f[C]
reason\ =\ pmemlog_check_version(PMEMLOG_MAJOR_VERSION,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ PMEMLOG_MINOR_VERSION);
if\ (reason\ !=\ NULL)\ {
\ \ \ \ /*\ version\ check\ failed,\ reason\ string\ tells\ you\ why\ */
}
\f[]
.fi
.PP
Any mismatch in the major version number is considered a failure, but a
library with a newer minor version number will pass this check since
increasing minor versions imply backwards compatibility.
.PP
An application can also check specifically for the existence of an
interface by checking for the version where that interface was
introduced.
These versions are documented in this man page as follows: unless
otherwise specified, all interfaces described here are available in
version 1.0 of the library.
Interfaces added after version 1.0 will contain the text \f[I]introduced
in version x.y\f[] in the section of this manual describing the feature.
.PP
When the version check performed by \f[B]pmemlog_check_version\f[]() is
successful, the return value is NULL.
Otherwise the return value is a static string describing the reason for
failing the version check.
The string returned by \f[B]pmemlog_check_version\f[]() must not be
modified or freed.
.SH MANAGING LIBRARY BEHAVIOR
.PP
The library entry points described in this section are less commonly
used than the previous sections.
.IP
.nf
\f[C]
void\ pmemlog_set_funcs(
\ \ \ \ void\ *(*malloc_func)(size_t\ size),
\ \ \ \ void\ (*free_func)(void\ *ptr),
\ \ \ \ void\ *(*realloc_func)(void\ *ptr,\ size_t\ size),
\ \ \ \ char\ *(*strdup_func)(const\ char\ *s));
\f[]
.fi
.PP
The \f[B]pmemlog_set_funcs\f[]() function allows an application to
override memory allocation calls used internally by \f[B]libpmemlog\f[].
Passing in NULL for any of the handlers will cause the
\f[B]libpmemlog\f[] default function to be used.
The library does not make heavy use of the system malloc functions, but
it does allocate approximately 4\-8 kilobytes for each memory pool in
use.
.IP
.nf
\f[C]
int\ pmemlog_check(const\ char\ *path);
\f[]
.fi
.PP
The \f[B]pmemlog_check\f[]() function performs a consistency check of
the file indicated by \f[I]path\f[] and returns 1 if the memory pool is
found to be consistent.
Any inconsistencies found will cause \f[B]pmemlog_check\f[]() to return
0, in which case the use of the file with \f[B]libpmemlog\f[] will
result in undefined behavior.
The debug version of \f[B]libpmemlog\f[] will provide additional details
on inconsistencies when \f[B]PMEMLOG_LOG_LEVEL\f[] is at least 1, as
described in the \f[B]DEBUGGING AND ERROR HANDLING\f[] section below.
\f[B]pmemlog_check\f[]() will return \-1 and set \f[I]errno\f[] if it
cannot perform the consistency check due to other errors.
\f[B]pmemlog_check\f[]() opens the given \f[I]path\f[] read\-only so it
never makes any changes to the file.
This function is not supported on Device DAX.
.SH DEBUGGING AND ERROR HANDLING
.PP
Two versions of \f[B]libpmemlog\f[] are typically available on a
development system.
The normal version, accessed when a program is linked using the
\f[B]\-lpmemlog\f[] option, is optimized for performance.
That version skips checks that impact performance and never logs any
trace information or performs any run\-time assertions.
If an error is detected during the call to \f[B]libpmemlog\f[] function,
an application may retrieve an error message describing the reason of
failure using the following function:
.IP
.nf
\f[C]
const\ char\ *pmemlog_errormsg(void);
\f[]
.fi
.PP
The \f[B]pmemlog_errormsg\f[]() function returns a pointer to a static
buffer containing the last error message logged for current thread.
The error message may include description of the corresponding error
code (if \f[I]errno\f[] was set), as returned by \f[B]strerror\f[](3).
The error message buffer is thread\-local; errors encountered in one
thread do not affect its value in other threads.
The buffer is never cleared by any library function; its content is
significant only when the return value of the immediately preceding call
to \f[B]libpmemlog\f[] function indicated an error, or if \f[I]errno\f[]
was set.
The application must not modify or free the error message string, but it
may be modified by subsequent calls to other library functions.
.PP
A second version of \f[B]libpmemlog\f[], accessed when a program uses
the libraries under \f[B]/usr/lib/nvml_debug\f[], contains run\-time
assertions and trace points.
The typical way to access the debug version is to set the environment
variable \f[B]LD_LIBRARY_PATH\f[] to \f[B]/usr/lib/nvml_debug\f[] or
\f[B]/usr/lib64/nvml_debug\f[] depending on where the debug libraries
are installed on the system.
The trace points in the debug version of the library are enabled using
the environment variable \f[B]PMEMLOG_LOG_LEVEL\f[], which can be set to
the following values:
.IP \[bu] 2
\f[B]0\f[] \- This is the default level when \f[B]PMEMLOG_LOG_LEVEL\f[]
is not set.
No log messages are emitted at this level.
.IP \[bu] 2
\f[B]1\f[] \- Additional details on any errors detected are logged (in
addition to returning the \f[I]errno\f[]\-based errors as usual).
The same information may be retrieved using \f[B]pmemlog_errormsg\f[]().
.IP \[bu] 2
\f[B]2\f[] \- A trace of basic operations is logged.
.IP \[bu] 2
\f[B]3\f[] \- This level enables a very verbose amount of function call
tracing in the library.
.IP \[bu] 2
\f[B]4\f[] \- This level enables voluminous and fairly obscure tracing
information that is likely only useful to the \f[B]libpmemlog\f[]
developers.
.PP
The environment variable \f[B]PMEMLOG_LOG_FILE\f[] specifies a file name
where all logging information should be written.
If the last character in the name is "\-", the PID of the current
process will be appended to the file name when the log file is created.
If \f[B]PMEMLOG_LOG_FILE\f[] is not set, the logging output goes to
stderr.
.PP
Setting the environment variable \f[B]PMEMLOG_LOG_LEVEL\f[] has no
effect on the non\-debug version of \f[B]libpmemlog\f[].
See also \f[B]libpmem\f[](3) to get information about other environment
variables affecting \f[B]libpmemlog\f[] behavior.
.SH EXAMPLE
.PP
The following example illustrates how the \f[B]libpmemlog\f[] API is
used.
.IP
.nf
\f[C]
#include\ <stdio.h>
#include\ <fcntl.h>
#include\ <errno.h>
#include\ <stdlib.h>
#include\ <unistd.h>
#include\ <string.h>
#include\ <libpmemlog.h>

/*\ size\ of\ the\ pmemlog\ pool\ \-\-\ 1\ GB\ */
#define\ POOL_SIZE\ ((size_t)(1\ <<\ 30))

/*
\ *\ printit\ \-\-\ log\ processing\ callback\ for\ use\ with\ pmemlog_walk()
\ */
int
printit(const\ void\ *buf,\ size_t\ len,\ void\ *arg)
{
\ \ \ \ fwrite(buf,\ len,\ 1,\ stdout);
\ \ \ \ return\ 0;
}

int
main(int\ argc,\ char\ *argv[])
{
\ \ \ \ const\ char\ path[]\ =\ "/pmem\-fs/myfile";
\ \ \ \ PMEMlogpool\ *plp;
\ \ \ \ size_t\ nbyte;
\ \ \ \ char\ *str;

\ \ \ \ /*\ create\ the\ pmemlog\ pool\ or\ open\ it\ if\ it\ already\ exists\ */
\ \ \ \ plp\ =\ pmemlog_create(path,\ POOL_SIZE,\ 0666);

\ \ \ \ if\ (plp\ ==\ NULL)
\ \ \ \ \ \ \ \ plp\ =\ pmemlog_open(path);

\ \ \ \ if\ (plp\ ==\ NULL)\ {
\ \ \ \ \ \ \ \ perror(path);
\ \ \ \ \ \ \ \ exit(1);
\ \ \ \ }

\ \ \ \ /*\ how\ many\ bytes\ does\ the\ log\ hold?\ */
\ \ \ \ nbyte\ =\ pmemlog_nbyte(plp);
\ \ \ \ printf("log\ holds\ %zu\ bytes",\ nbyte);

\ \ \ \ /*\ append\ to\ the\ log...\ */
\ \ \ \ str\ =\ "This\ is\ the\ first\ string\ appended";
\ \ \ \ if\ (pmemlog_append(plp,\ str,\ strlen(str))\ <\ 0)\ {
\ \ \ \ \ \ \ \ perror("pmemlog_append");
\ \ \ \ \ \ \ \ exit(1);
\ \ \ \ }
\ \ \ \ str\ =\ "This\ is\ the\ second\ string\ appended";
\ \ \ \ if\ (pmemlog_append(plp,\ str,\ strlen(str))\ <\ 0)\ {
\ \ \ \ \ \ \ \ perror("pmemlog_append");
\ \ \ \ \ \ \ \ exit(1);
\ \ \ \ }

\ \ \ \ /*\ print\ the\ log\ contents\ */
\ \ \ \ printf("log\ contains:");
\ \ \ \ pmemlog_walk(plp,\ 0,\ printit,\ NULL);

\ \ \ \ pmemlog_close(plp);
}
\f[]
.fi
.PP
See <http://pmem.io/nvml/libpmemlog> for more examples using the
\f[B]libpmemlog\f[] API.
.SH BUGS
.PP
Unlike \f[B]libpmemobj\f[], data replication is not supported in
\f[B]libpmemlog\f[].
Thus, it is not allowed to specify replica sections in pool set files.
.SH ACKNOWLEDGEMENTS
.PP
\f[B]libpmemlog\f[] builds on the persistent memory programming model
recommended by the SNIA NVM Programming Technical Work Group:
<http://snia.org/nvmp>
.SH SEE ALSO
.PP
\f[B]mmap\f[](2), \f[B]munmap\f[](2), \f[B]msync\f[](2),
\f[B]strerror\f[](3), \f[B]libpmemobj\f[](3), \f[B]libpmemblk\f[](3),
\f[B]libpmem\f[](3), \f[B]libvmem\f[](3),
\f[B]ndctl\-create\-namespace\f[](1) and \f[B]<http://pmem.io>\f[]
