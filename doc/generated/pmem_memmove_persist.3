.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "PMEM_MEMMOVE_PERSIST" "3" "2017-12-11" "NVM Library - pmem API version 1.0" "NVML Programmer's Manual"
.hy
.\" Copyright 2014-2017, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of the copyright holder nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH NAME
.PP
\f[B]pmem_memmove_persist\f[](), \f[B]pmem_memcpy_persist\f[](),
\f[B]pmem_memset_persist\f[](), \f[B]pmem_memmove_nodrain\f[](),
\f[B]pmem_memcpy_nodrain\f[](), \f[B]pmem_memset_nodrain\f[]() \-\-
functions that provide optimized copying to persistent memory
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmem.h>

void\ *pmem_memmove_persist(void\ *pmemdest,\ const\ void\ *src,\ size_t\ len);
void\ *pmem_memcpy_persist(void\ *pmemdest,\ const\ void\ *src,\ size_t\ len);
void\ *pmem_memset_persist(void\ *pmemdest,\ int\ c,\ size_t\ len);
void\ *pmem_memmove_nodrain(void\ *pmemdest,\ const\ void\ *src,\ size_t\ len);
void\ *pmem_memcpy_nodrain(void\ *pmemdest,\ const\ void\ *src,\ size_t\ len);
void\ *pmem_memset_nodrain(void\ *pmemdest,\ int\ c,\ size_t\ len);
\f[]
.fi
.SH DESCRIPTION
.PP
The \f[B]pmem_memmove_persist\f[](), \f[B]pmem_memcpy_persist\f[](), and
\f[B]pmem_memset_persist\f[](), functions provide the same memory
copying as their namesakes \f[B]memmove\f[](3), \f[B]memcpy\f[](3) and
\f[B]memset\f[](3), and ensure that the result has been flushed to
persistence before returning.
For example, the following code is functionally equivalent to
\f[B]pmem_memmove_persist\f[]():
.IP
.nf
\f[C]
void\ *
pmem_memmove_persist(void\ *pmemdest,\ const\ void\ *src,\ size_t\ len)
{
\ \ \ \ void\ *retval\ =\ memmove(pmemdest,\ src,\ len);

\ \ \ \ pmem_persist(pmemdest,\ len);

\ \ \ \ return\ retval;
}
\f[]
.fi
.PP
Calling \f[B]pmem_memmove_persist\f[]() may out\-perform the above code,
however, since the \f[B]libpmem\f[](7) implementation may take advantage
of the fact that \f[I]pmemdest\f[] is persistent memory and use
instructions such as \f[I]non\-temporal\f[] stores to avoid the need to
flush processor caches.
.RS
.PP
WARNING: Using these functions where \f[B]pmem_is_pmem\f[](3) returns
false may not do anything useful.
Use the normal libc functions in that case.
.RE
.PP
The \f[B]pmem_memmove_nodrain\f[](), \f[B]pmem_memcpy_nodrain\f[]() and
\f[B]pmem_memset_nodrain\f[]() functions are similar to
\f[B]pmem_memmove_persist\f[](), \f[B]pmem_memcpy_persist\f[](), and
\f[B]pmem_memset_persist\f[]() described above, except they skip the
final \f[B]pmem_drain\f[]() step.
This allows applications to optimize cases where several ranges are
being copied to persistent memory, followed by a single call to
\f[B]pmem_drain\f[]().
The following example illustrates how these functions might be used to
avoid multiple calls to \f[B]pmem_drain\f[]() when copying several
ranges of memory to pmem:
.IP
.nf
\f[C]
/*\ ...\ write\ several\ ranges\ to\ pmem\ ...\ */
pmem_memcpy_nodrain(pmemdest1,\ src1,\ len1);
pmem_memcpy_nodrain(pmemdest2,\ src2,\ len2);

/*\ ...\ */

/*\ wait\ for\ any\ pmem\ stores\ to\ drain\ from\ HW\ buffers\ */
pmem_drain();
\f[]
.fi
.SH RETURN VALUE
.PP
The \f[B]pmem_memmove_persist\f[](), \f[B]pmem_memcpy_persist\f[](),
\f[B]pmem_memset_persist\f[](), \f[B]pmem_memmove_nodrain\f[](),
\f[B]pmem_memcpy_nodrain\f[]() and \f[B]pmem_memset_nodrain\f[]()
functions return the address of the destination.
.SH SEE ALSO
.PP
\f[B]memcpy\f[](3), \f[B]memmove\f[](3), \f[B]memset\f[](3),
\f[B]libpmem\f[](7) and \f[B]<http://pmem.io>\f[]
