.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "PMEMCTO_OPEN" "3" "2017-12-11" "NVM Library - libpmemcto API version 1.0" "NVML Programmer's Manual"
.hy
.\" Copyright 2014-2017, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of the copyright holder nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH NAME
.PP
\f[B]pmemcto_create\f[](), \f[B]pmemcto_open\f[](),
\f[B]pmemcto_close\f[](), \f[B]pmemcto_check\f[]() \-\- create, open,
close and validate close\-to\-open persistence pool
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmemcto.h>

PMEMctopool\ *pmemcto_create(const\ char\ *path,\ *layout);
\ \ \ \ \ \ \ \ size_t\ poolsize,\ mode_t\ mode;
PMEMctopool\ *pmemcto_open(const\ char\ *path,\ *layout);;
void\ pmemcto_close(PMEMctopool\ *pbp);
int\ pmemcto_check(const\ char\ *path,\ *layout);;
\f[]
.fi
.SH DESCRIPTION
.PP
The \f[B]pmemcto_create\f[]() function creates a close\-to\-open
persistence pool with the given total \f[I]poolsize\f[].
The resulting pool is then used with functions like
\f[B]pmemcto_malloc\f[](3) and \f[B]pmemcto_free\f[](3) to provide the
familiar \f[I]malloc\-like\f[] programming model for the memory pool.
\f[I]path\f[] specifies the name of the memory pool file to be created.
\f[I]layout\f[] specifies the application\[aq]s layout type in the form
of a string.
The layout name is not interpreted by \f[B]libpmemcto\f[](7), but may be
used as a check when \f[B]pmemcto_open\f[]() is called.
The layout name, including the terminating null byte (\[aq]\[aq]),
cannot be longer than \f[B]PMEMCTO_MAX_LAYOUT\f[] as defined in
\f[B]<libpmemcto.h>\f[].
A NULL \f[I]layout\f[] is equivalent to using an empty string as a
layout name.
\f[I]mode\f[] specifies the permissions to use when creating the file,
as described by \f[B]creat\f[](2).
The memory pool file is fully allocated to the size \f[I]poolsize\f[]
using \f[B]posix_fallocate\f[](3).
The caller may choose to take responsibility for creating the memory
pool file by creating it before calling \f[B]pmemcto_create\f[](), and
then specifying \f[I]poolsize\f[] as zero.
In this case \f[B]pmemcto_create\f[]() will take the pool size from the
size of the existing file and will verify that the file appears to be
empty by searching for any non\-zero data in the pool header at the
beginning of the file.
The minimum net pool size allowed by the library for a local
close\-to\-open persistence pool is defined in \f[B]<libpmemcto.h>\f[]
as \f[B]PMEMCTO_MIN_POOL\f[].
.PP
Depending on the configuration of the system, the available
non\-volatile memory space may be divided into multiple memory devices.
In such case, the maximum size of the pmemcto memory pool could be
limited by the capacity of a single memory device.
\f[B]libpmemcto\f[](7) allows building a close\-to\-open persistence
pool spanning multiple memory devices by creation of persistent memory
pools consisting of multiple files, where each part of such a \f[I]pool
set\f[] may be stored on a different pmem\-aware filesystem.
.PP
Creation of all the parts of the pool set can be done with
\f[B]pmemcto_create\f[](); however, the recommended method for creating
pool sets is by using the \f[B]pmempool\f[](1) utility.
.PP
When creating a pool set consisting of multiple files, the \f[I]path\f[]
argument passed to \f[B]pmemcto_create\f[]() must point to the special
\f[I]set\f[] file that defines the pool layout and the location of all
the parts of the pool set.
The \f[I]poolsize\f[] argument must be 0.
The meaning of the \f[I]layout\f[] and \f[I]mode\f[] arguments does not
change, except that the same \f[I]mode\f[] is used for creation of all
the parts of the pool set.
.PP
For more information on pool set format, see \f[B]poolset\f[](5).
.PP
The \f[B]pmemcto_open\f[]() function opens an existing close\-to\-open
persistence memory pool.
\f[I]path\f[] must be an existing file containing a pmemcto memory pool
as created by \f[B]pmemcto_create\f[]().
If \f[I]layout\f[] is non\-NULL, it is compared to the layout name
provided to \f[B]pmemcto_create\f[]() when the pool was first created.
This can be used to verify that the layout of the pool matches what was
expected.
The application must have permission to open the file and memory map it
with read/write permissions.
.PP
The \f[B]pmemcto_close\f[]() function closes the memory pool indicated
by \f[I]pcp\f[] and deletes the memory pool handle.
The close\-to\-open memory pool itself lives on in the file that
contains it and may be re\-opened at a later time using
\f[B]pmemcto_open\f[]() as described above.
If the pool was not closed gracefully due to abnormal program
termination or power failure, the pool is in an inconsistent state
causing subsequent pool opening to fail.
.PP
The \f[B]pmemcto_check\f[]() function performs a consistency check of
the file indicated by \f[I]path\f[], and returns 1 if the memory pool is
found to be consistent.
If the pool is found not to be consistent, further use of the file with
\f[B]libpmemcto\f[](7) will result in undefined behavior.
The debug version of \f[B]libpmemcto\f[](7) will provide additional
details on inconsistencies when \f[B]PMEMCTO_LOG_LEVEL\f[] is at least
1, as described in the \f[B]DEBUGGING AND ERROR HANDLING\f[] section of
\f[B]libpmemcto\f[](7).
\f[B]pmemcto_check\f[]() will return \-1 and set \f[I]errno\f[] if it
cannot perform the consistency check due to other errors.
\f[B]pmemcto_check\f[]() opens the given \f[I]path\f[] read\-only so it
never makes any changes to the file.
This function is not supported on Device DAX.
.SH RETURN VALUE
.PP
On success, \f[B]pmemcto_create\f[]() returns a \f[I]PMEMctopool*\f[]
handle to the close\-to\-open persistence memory pool.
On error, it returns NULL and sets \f[I]errno\f[] appropriately.
.PP
On success, \f[B]pmemcto_open\f[]() returns a \f[I]PMEMctopool*\f[]
handle that can be used with most of the functions in
\f[B]libpmemcto\f[](7).
On error, it returns NULL and sets \f[I]errno\f[] appropriately.
.PP
The \f[B]pmemcto_close\f[]() function returns no value.
.PP
\f[B]pmemcto_check\f[]() returns 1 if the memory pool is found to be
consistent.
If the check is successfully performed but the pool is found to be
inconsistent, \f[B]pmemcto_check\f[]() returns 0.
This includes the case where \f[I]layout\f[] is non\-NULL and does not
match the layout string given when the pool was created.
If the consistency check cannot be performed, \f[B]pmemcto_check\f[]()
returns \-1 and sets \f[I]errno\f[] appropriately.
.SH ERRORS
.PP
\f[B]EINVAL\f[] "layout" string does not match the layout stored in pool
header.
.PP
\f[B]EINVAL\f[] "layout" string is longer than
\f[B]PMEMCTO_MAX_LAYOUT\f[].
.PP
\f[B]EINVAL\f[] \f[I]poolsize\f[] is less than
\f[B]PMEMCTO_MIN_POOL\f[].
.PP
\f[B]EINVAL\f[] \f[I]path\f[] passed to \f[B]pmemcto_create\f[]() points
to a pool set file, but \f[I]poolsize\f[] is not zero.
.PP
\f[B]EINVAL\f[] \f[I]path\f[] passed to \f[B]pmemcto_create\f[]() points
to an existing file, but \f[I]poolsize\f[] is not zero.
.PP
\f[B]EINVAL\f[] \f[I]path\f[] passed to \f[B]pmemcto_create\f[]() points
to an existing file, which is not\-empty.
.PP
\f[B]EINVAL\f[] Invalid format of the pool set file.
.PP
\f[B]EINVAL\f[] Invalid pool header.
.PP
\f[B]EAGAIN\f[] The pmemcto pool pointed by \f[I]path\f[] is already
open.
.PP
\f[B]EACCES\f[] No write access permission to the pool file(s).
.PP
\f[B]ENOMEM\f[] The pool cannot be mapped at the address it was created.
.SH CAVEATS
.PP
Not all file systems support \f[B]posix_fallocate\f[](3).
\f[B]pmemcto_create\f[]() will fail if the underlying file system does
not support \f[B]posix_fallocate\f[](3).
.SH BUGS
.PP
Unlike \f[B]libpmemobj\f[](7), data replication is not supported in
\f[B]libpmemcto\f[](7).
Thus, it is not allowed to specify replica sections in pool set files.
.SH SEE ALSO
.PP
\f[B]pmempool\-create\f[](1), \f[B]ndctl\-create\-namespace\f[](1),
\f[B]jemalloc\f[](3), \f[B]poolset\f[](5), \f[B]libpmemcto\f[](7),
\f[B]libpmemobj\f[](7) and \f[B]<http://pmem.io>\f[]
