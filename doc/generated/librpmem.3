.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "librpmem" "3" "2017-06-08" "NVM Library - rpmem API version 1.1.0" "NVML Programmer's Manual"
.hy
.\" Copyright 2014-2017, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of the copyright holder nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH NAME
.PP
\f[B]librpmem\f[] \-\- remote persistent memory support library
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <librpmem.h>
cc\ ...\ \-lrpmem
\f[]
.fi
.SS Most commonly used functions:
.IP
.nf
\f[C]
RPMEMpool\ *rpmem_create(const\ char\ *target,\ const\ char\ *pool_set_name,
\ \ \ \ void\ *pool_addr,\ size_t\ pool_size,\ unsigned\ *nlanes,
\ \ \ \ const\ struct\ rpmem_pool_attr\ *create_attr);
RPMEMpool\ *rpmem_open(const\ char\ *target,\ const\ char\ *pool_set_name,
\ \ \ \ void\ *pool_addr,\ size_t\ pool_size,\ unsigned\ *nlanes,
\ \ \ \ struct\ rpmem_pool_attr\ *open_attr);
int\ rpmem_set_attr(RPMEMpool\ *rpp,\ const\ struct\ rpmem_pool_attr\ *attr);
int\ rpmem_close(RPMEMpool\ *rpp);

int\ rpmem_persist(RPMEMpool\ *rpp,\ size_t\ offset,\ size_t\ length,\ unsigned\ lane);
int\ rpmem_read(RPMEMpool\ *rpp,\ void\ *buff,\ size_t\ offset,\ size_t\ length,\ unsigned\ lane);
int\ rpmem_remove(const\ char\ *target,\ const\ char\ *pool_set_name,\ int\ flags);
\f[]
.fi
.SS Library API versioning:
.IP
.nf
\f[C]
const\ char\ *rpmem_check_version(
\ \ \ \ unsigned\ major_required,
\ \ \ \ unsigned\ minor_required);
\f[]
.fi
.SS Error handling:
.IP
.nf
\f[C]
const\ char\ *rpmem_errormsg(void);
\f[]
.fi
.SH DESCRIPTION
.PP
\f[B]librpmem\f[] provides low\-level support for remote access to
\f[I]persistent memory\f[] (pmem) utilizing RDMA\-capable RNICs.
The library can be used to replicate remotely a memory region over RDMA
protocol.
It utilizes appropriate persistency mechanism based on remote node\[aq]s
platform capabilities.
The \f[B]librpmem\f[] utilizes the \f[B]ssh\f[] client to authenticate a
user on remote node and for encryption of connection\[aq]s out\-of\-band
configuration data.
See \f[B]SSH\f[] section for details.
.PP
This library is for applications that use remote persistent memory
directly, without the help of any library\-supplied transactions or
memory allocation.
Higher\-level libraries that build on \f[B]libpmem\f[] are available and
are recommended for most applications, see:
.IP \[bu] 2
\f[B]libpmemobj\f[](3), a general use persistent memory API, providing
memory allocation and transactional operations on variable\-sized
objects.
.SH MOST COMMONLY USED FUNCTIONS
.IP
.nf
\f[C]
RPMEMpool\ *rpmem_create(const\ char\ *target,\ const\ char\ *pool_set_name,
\ \ \ \ void\ *pool_addr,\ size_t\ pool_size,\ unsigned\ *nlanes,
\ \ \ \ const\ struct\ rpmem_pool_attr\ *create_attr);
\f[]
.fi
.PP
The \f[B]rpmem_create\f[]() function creates a remote pool on a given
\f[I]target\f[] node.
The \f[I]pool_set_name\f[] is a relative path in the root config
directory on the \f[I]target\f[] node that uniquely identifies the pool
set file on remote node to be used when mapping the remote pool.
The \f[I]pool_addr\f[] is a pointer to the associated local memory pool
of a given size specified by the \f[I]pool_size\f[] argument.
Both \f[I]pool_addr\f[] and \f[I]pool_size\f[] must be aligned to
system\[aq]s page size (see \f[B]sysconf\f[](3)).
The size of the remote pool must be at least \f[I]pool_size\f[].
See \f[B]REMOTE POOL SIZE\f[] section for details.
The \f[I]nlanes\f[] points to the maximum number of lanes which the
caller requests to use.
Upon successful creation of the remote pool, the \f[I]nlanes\f[]
contains the maximum number of lanes supported by both local and remote
nodes\[aq] hardware.
See \f[B]LANES\f[] section for details.
The \f[I]create_attr\f[] structure contains the attributes used for
creating the remote pool.
If \f[I]create_attr\f[] is NULL, a zeroed structure with attributes will
be used to create the pool.
The attributes are stored in pool\[aq]s meta\-data and can be read when
opening the remote pool using \f[B]rpmem_open\f[]() function call.
Upon success the \f[B]rpmem_create\f[]() returns an opaque handle to the
remote pool which shall be used in subsequent API calls.
If any error prevents the \f[B]librpmem\f[] from creating the remote
pool, the \f[B]rpmem_create\f[]() returns NULL and sets \f[I]errno\f[]
appropriately.
.IP
.nf
\f[C]
RPMEMpool\ *rpmem_open(const\ char\ *target,\ const\ char\ *pool_set_name,
\ \ \ \ void\ *pool_addr,\ size_t\ pool_size,\ unsigned\ *nlanes,
\ \ \ \ struct\ rpmem_pool_attr\ *open_attr);
\f[]
.fi
.PP
The \f[B]rpmem_open\f[]() function opens an existing remote pool on a
given \f[I]target\f[] node.
The \f[I]pool_set_name\f[] is a relative path in the root config
directory on the \f[I]target\f[] node that uniquely identifies the pool
set file on remote node to be used when mapping the remote pool.
The \f[I]pool_addr\f[] is a pointer to the associated local memory pool
of a given size specified by the \f[I]pool_size\f[] argument.
Both \f[I]pool_addr\f[] and \f[I]pool_size\f[] must be aligned to
system\[aq]s page size (see \f[B]sysconf\f[](3)).
The size of the remote pool must be at least \f[I]pool_size\f[].
See \f[B]REMOTE POOL SIZE\f[] section for details.
The \f[I]nlanes\f[] points to the maximum number of lanes which the
caller requests to use.
Upon successful opening of the remote pool, the \f[I]nlanes\f[] contains
the maximum number of lanes supported by both local and remote
nodes\[aq] hardware.
See \f[B]LANES\f[] section for details.
If the \f[I]open_attr\f[] argument is not NULL the remote pool
attributes are returned by the provided structure.
Upon success the \f[B]rpmem_open\f[]() returns an opaque handle to the
remote pool which shall be used in subsequent API calls.
If any error prevents the \f[B]librpmem\f[] from opening the remote
pool, the \f[B]rpmem_open\f[]() returns NULL and sets \f[I]errno\f[]
appropriately.
.IP
.nf
\f[C]
int\ rpmem_set_attr(RPMEMpool\ *rpp,\ const\ struct\ rpmem_pool_attr\ *attr);
\f[]
.fi
.PP
The \f[B]rpmem_set_attr\f[]() function overwrites pool\[aq]s attributes.
The \f[I]attr\f[] structure contains the attributes used for overwriting
the remote pool attributes that were passed to \f[B]rpmem_create\f[]()
at pool\[aq]s creation.
If \f[I]attr\f[] is NULL, a zeroed structure with attributes will be
used.
New attributes are stored in pool\[aq]s meta\-data.
.IP
.nf
\f[C]
int\ rpmem_close(RPMEMpool\ *rpp);
\f[]
.fi
.PP
The \f[B]rpmem_close\f[]() function closes a remote pool indicated by
\f[I]rpp\f[].
All resources are released on both local and remote side.
The pool itself lives on the remote node and may be re\-opened at a
later time using \f[B]rpmem_open\f[]() function as described above.
If any error occurred when closing remote pool, non\-zero value is
returned and \f[I]errno\f[] value is set.
.IP
.nf
\f[C]
int\ rpmem_persist(RPMEMpool\ *rpp,\ size_t\ offset,\ size_t\ length,\ unsigned\ lane);
\f[]
.fi
.PP
The \f[B]rpmem_persist\f[]() function copies data of given
\f[I]length\f[] at given \f[I]offset\f[] from the associated local
memory pool and makes sure the data is persistent on the remote node
before the function returns.
The remote node is identified by the \f[I]rpp\f[] handle which must be
returned from either \f[B]rpmem_open\f[]() or \f[B]rpmem_create\f[]()
functions.
The \f[I]offset\f[] is relative to the \f[I]pool_addr\f[] specified in
the \f[B]rpmem_open\f[]() or \f[B]rpmem_create\f[]() function calls.
The \f[I]offset\f[] and \f[I]length\f[] combined must not exceed the
\f[I]pool_size\f[] passed to the \f[B]rpmem_open\f[]() or
\f[B]rpmem_create\f[]() functions.
The \f[B]rpmem_persist\f[]() operation is performed using given
\f[I]lane\f[] number.
The lane must be less than the value returned by \f[B]rpmem_open\f[]()
or \f[B]rpmem_create\f[]() through the \f[I]nlanes\f[] argument (so it
can take a value from 0 to \f[I]nlanes\f[] \- 1).
If the entire memory area was made persistent on remote node the
\f[B]rpmem_persist\f[]() returns 0, otherwise it returns non\-zero value
and sets \f[I]errno\f[] appropriately.
.IP
.nf
\f[C]
int\ rpmem_read(RPMEMpool\ *rpp,\ void\ *buff,\ size_t\ offset,\ size_t\ length,
\ \ \ \ unsigned\ lane);
\f[]
.fi
.PP
The \f[B]rpmem_read\f[]() function reads \f[I]length\f[] bytes of data
from remote pool at \f[I]offset\f[] and copies it to the buffer
\f[I]buff\f[].
The operation is performed on a given lane.
The lane must be less than the value returned by \f[B]rpmem_open\f[]()
or \f[B]rpmem_create\f[]() through the \f[I]nlanes\f[] argument (so it
can take a value from 0 to \f[I]nlanes\f[] \- 1).
The function returns 0 if the data was read entirely, otherwise
non\-zero value is returned and \f[I]errno\f[] set appropriately.
The \f[I]rpp\f[] must point to a remote pool opened or created
previously by \f[B]rpmem_open\f[]() or \f[B]rpmem_create\f[]() functions
respectively.
.IP
.nf
\f[C]
int\ rpmem_remove(const\ char\ *target,\ const\ char\ *pool_set_name,\ int\ flags);
\f[]
.fi
.PP
The \f[B]rpmem_remove\f[]() function removes a remote pool on a given
\f[I]target\f[] node.
The \f[I]pool_set_name\f[] is a relative path in the root config
directory on the \f[I]target\f[] node that uniquely identifies the pool
set file on remote node.
By default only the pool part files are removed and pool set file is
left untouched.
If the pool is not consistent the \f[B]rpmem_remove\f[]() function
fails, unless otherwise specified.
The \f[I]flags\f[] argument determines the behavior of
\f[B]rpmem_remove\f[]() function.
It is either 0 or the bitwise OR of one or more of the following flags:
.IP \[bu] 2
\f[B]RPMEM_REMOVE_FORCE\f[] Ignore errors when opening inconsistent
pool.
The pool set file must be in appropriate format though.
.IP \[bu] 2
\f[B]RPMEM_REMOVE_POOL_SET\f[] Remove pool set file after removing the
pool described by this pool set.
.SH LANES
.PP
The term \f[I]lane\f[] means an isolated path of execution.
Due to a limited resources provided by underlying hardware utilized by
both local and remote nodes the maximum number of parallel
\f[B]rpmem_persist\f[]() operations is limited by the maximum number of
lanes returned from either the \f[B]rpmem_open\f[]() or
\f[B]rpmem_create\f[]() function calls.
The caller passes the maximum number of lanes one would like to utilize.
If the pool has been successfully created or opened, the lanes value is
updated to the minimum of: the number of lanes requested by the caller
and the maximum number of lanes supported by underlying hardware.
The application is obligated to use at most the returned number of lanes
in parallel.
The \f[B]rpmem_persist\f[]() does not provide any locking mechanism thus
the serialization of the calls shall be performed by the application if
required.
.SH TARGET NODE ADDRESS FORMAT
.IP
.nf
\f[C]
[<user>\@]<hostname>[:<port>]
\f[]
.fi
.PP
The target node address is described by the \f[I]hostname\f[] which the
client connects to, with an optional \f[I]user\f[] name.
The user must be authorized to authenticate to the remote machine
without querying for password/passphrase.
The optional \f[I]port\f[] number is used to establish the SSH
connection.
The default port number is 22.
.SH REMOTE POOL ATTRIBUTES
.PP
The \f[I]rpmem_pool_attr\f[] structure describes a remote pool and is
stored in remote pool\[aq]s metadata.
This structure must be passed to the \f[B]rpmem_create\f[]() function by
caller when creating a pool on remote node.
When opening the pool using \f[B]rpmem_open\f[]() function the
appropriate fields are read from pool\[aq]s metadata and returned back
to the caller.
.IP
.nf
\f[C]
#define\ RPMEM_POOL_HDR_SIG_LEN\ \ \ \ 8
#define\ RPMEM_POOL_HDR_UUID_LEN\ \ \ 16
#define\ RPMEM_POOL_USER_FLAGS_LEN\ 16

struct\ rpmem_pool_attr\ {
\ \ \ \ char\ signature[RPMEM_POOL_HDR_SIG_LEN];
\ \ \ \ uint32_t\ major;
\ \ \ \ uint32_t\ compat_features;
\ \ \ \ uint32_t\ incompat_features;
\ \ \ \ uint32_t\ ro_compat_features;
\ \ \ \ unsigned\ char\ poolset_uuid[RPMEM_POOL_HDR_UUID_LEN];
\ \ \ \ unsigned\ char\ uuid[RPMEM_POOL_HDR_UUID_LEN];
\ \ \ \ unsigned\ char\ next_uuid[RPMEM_POOL_HDR_UUID_LEN];
\ \ \ \ unsigned\ char\ prev_uuid[RPMEM_POOL_HDR_UUID_LEN];
\ \ \ \ unsigned\ char\ user_flags[RPMEM_POOL_USER_FLAGS_LEN];
};
\f[]
.fi
.PP
The \f[I]signature\f[] field is an 8\-byte field which describes the
pool\[aq]s on\-media format.
.PP
The \f[I]major\f[] field is a major version number of the pool\[aq]s
on\-media format.
.PP
The \f[I]compat_features\f[] field is a mask describing compatibility of
pool\[aq]s on\-media format optional features.
.PP
The \f[I]incompat_features\f[] field is a mask describing compatibility
of pool\[aq]s on\-media format required features.
.PP
The \f[I]ro_compat_features\f[] field is a mask describing compatibility
of pool\[aq]s on\-media format features.
If these features are not available, the pool shall be opened in
read\-only mode.
.PP
The \f[I]poolset_uuid\f[] field is an UUID of the pool which the remote
pool is associated with.
.PP
The \f[I]uuid\f[] field is an UUID of a first part of the remote pool.
This field can be used to connect the remote pool with other pools in a
list.
.PP
The \f[I]next_uuid\f[] and \f[I]prev_uuid\f[] fields are UUIDs of next
and previous replicas respectively.
These fields can be used to connect the remote pool with other pools in
a list.
.PP
The \f[I]user_flags\f[] field is a 16\-byte user\-defined flags.
.SH SSH
.PP
The \f[B]librpmem\f[] utilizes \f[B]ssh\f[](1) client to login and
execute the \f[B]rpmemd\f[](1) process on remote node.
By default the \f[B]ssh\f[] process is executed with \f[B]\-4\f[] option
which forces using \f[B]IPv4\f[] addressing.
The SSH command executed by \f[B]librpmem\f[] can be overwritten by
\f[B]RPMEM_SSH\f[] environment variable.
The command executed by the \f[B]ssh\f[] can be overwritten by
\f[B]RPMEM_CMD\f[] variable.
See \f[B]ENVIRONMENT\f[] section for details.
See \f[B]FORK\f[] section for more details.
.SH FORK
.PP
The \f[B]ssh\f[] process is executed by \f[B]rpmem_open\f[]() and
\f[B]rpmem_create\f[]() after forking a child process using
\f[B]fork\f[](2).
The application must take into account this fact when using
\f[B]wait\f[](2) and \f[B]waitpid\f[](2) functions which may return a
PID of the \f[B]ssh\f[] process executed by \f[B]librpmem\f[].
.PP
The \f[B]librpmem\f[] library requires \f[B]fork\f[](2) support in
\f[B]libibverbs\f[], otherwise \f[B]rpmem_open\f[] and
\f[B]rpmem_create\f[] functions will return an error.
By default \f[B]libfabric\f[] initializes \f[B]libibverbs\f[] with
\f[B]fork\f[](2) support by calling the \f[B]ibv_fork_init\f[](3)
function.
See \f[B]fi_verbs\f[](7) for more details.
.SH REMOTE POOL SIZE
.PP
A remote pool size depends on the configuration of a pool set file on
the remote node.
The remote pool size is a sum of sizes of all part files decreased by
4096 bytes per each part file.
The 4096 bytes of each part file is utilized for storing internal
metadata of the pool part files.
The minimum size of a part file for a remote pool is defined as
\f[B]RPMEM_MIN_PART\f[] in \f[B]<librpmem.h>\f[].
The minimum size of a remote pool allowed by the library is defined as
\f[B]RPMEM_MIN_POOL\f[] therein.
.SH LIBRARY API VERSIONING
.PP
This section describes how the library API is versioned, allowing
applications to work with an evolving API.
.IP
.nf
\f[C]
const\ char\ *rpmem_check_version(
\ \ \ \ unsigned\ major_required,
\ \ \ \ unsigned\ minor_required);
\f[]
.fi
.PP
The \f[B]rpmem_check_version\f[]() function is used to see if the
installed \f[B]librpmem\f[] supports the version of the library API
required by an application.
The easiest way to do this is for the application to supply the
compile\-time version information, supplied by defines in
\f[B]<librpmem.h>\f[], like this:
.IP
.nf
\f[C]
reason\ =\ rpmem_check_version(RPMEM_MAJOR_VERSION,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ RPMEM_MINOR_VERSION);
if\ (reason\ !=\ NULL)\ {
\ \ \ \ /*\ version\ check\ failed,\ reason\ string\ tells\ you\ why\ */
}
\f[]
.fi
.PP
Any mismatch in the major version number is considered a failure, but a
library with a newer minor version number will pass this check since
increasing minor versions imply backwards compatibility.
.PP
An application can also check specifically for the existence of an
interface by checking for the version where that interface was
introduced.
These versions are documented in this man page as follows: unless
otherwise specified, all interfaces described here are available in
version 1.0 of the library.
Interfaces added after version 1.0 will contain the text \f[I]introduced
in version x.y\f[] in the section of this manual describing the feature.
.PP
When the version check performed by \f[B]rpmem_check_version\f[]() is
successful, the return value is NULL.
Otherwise the return value is a static string describing the reason for
failing the version check.
The string returned by \f[B]rpmem_check_version\f[]() must not be
modified or freed.
.SH DEBUGGING AND ERROR HANDLING
.PP
Two versions of \f[B]librpmem\f[] are typically available on a
development system.
The normal version, accessed when a program is linked using the
\f[B]\-lrpmem\f[] option, is optimized for performance.
That version skips checks that impact performance and never logs any
trace information or performs any run\-time assertions.
If an error is detected during the call to \f[B]librpmem\f[] function,
an application may retrieve an error message describing the reason of
failure using the following function:
.IP
.nf
\f[C]
const\ char\ *rpmem_errormsg(void);
\f[]
.fi
.PP
The \f[B]rpmem_errormsg\f[]() function returns a pointer to a static
buffer containing the last error message logged for current thread.
The error message may include description of the corresponding error
code (if \f[I]errno\f[] was set), as returned by \f[B]strerror\f[](3).
The error message buffer is thread\-local; errors encountered in one
thread do not affect its value in other threads.
The buffer is never cleared by any library function; its content is
significant only when the return value of the immediately preceding call
to \f[B]librpmem\f[] function indicated an error, or if \f[I]errno\f[]
was set.
The application must not modify or free the error message string, but it
may be modified by subsequent calls to other library functions.
.PP
A second version of \f[B]librpmem\f[], accessed when a program uses the
libraries under \f[B]/usr/lib/nvml_debug\f[], contains run\-time
assertions and trace points.
The typical way to access the debug version is to set the environment
variable \f[B]LD_LIBRARY_PATH\f[] to \f[B]/usr/lib/nvml_debug\f[] or
\f[B]/usr/lib64/nvml_debug\f[] depending on where the debug libraries
are installed on the system.
The trace points in the debug version of the library are enabled using
the environment variable \f[B]RPMEM_LOG_LEVEL\f[], which can be set to
the following values:
.IP \[bu] 2
\f[B]0\f[] \- This is the default level when \f[B]RPMEM_LOG_LEVEL\f[] is
not set.
No log messages are emitted at this level.
.IP \[bu] 2
\f[B]1\f[] \- Additional details on any errors detected are logged (in
addition to returning the \f[I]errno\f[]\-based errors as usual).
The same information may be retrieved using \f[B]rpmem_errormsg\f[]().
.IP \[bu] 2
\f[B]2\f[] \- A trace of basic operations is logged.
.IP \[bu] 2
\f[B]3\f[] \- This level enables a very verbose amount of function call
tracing in the library.
.IP \[bu] 2
\f[B]4\f[] \- This level enables voluminous and fairly obscure tracing
information that is likely only useful to the \f[B]librpmem\f[]
developers.
.PP
The environment variable \f[B]RPMEM_LOG_FILE\f[] specifies a file name
where all logging information should be written.
If the last character in the name is "\-", the PID of the current
process will be appended to the file name when the log file is created.
If \f[B]RPMEM_LOG_FILE\f[] is not set, the logging output goes to
stderr.
.PP
Setting the environment variable \f[B]RPMEM_LOG_LEVEL\f[] has no effect
on the non\-debug version of \f[B]librpmem\f[].
.SH ENVIRONMENT
.PP
\f[B]librpmem\f[] can change its default behavior based on the following
environment variables.
These are largely intended for testing and are not normally required.
.IP \[bu] 2
\f[B]RPMEM_CMD\f[]=\f[I]cmd\f[]
.PP
Setting this environment variable makes it possible to override the
default command executed on remote node using \f[B]ssh\f[].
Setting this variable shall not be required normally, but it can be used
for testing and debugging purposes.
.PP
\f[B]RPMEM_CMD\f[] can contain multiple commands separated by vertical
bar (\f[C]|\f[]).
Each consecutive command is executed on remote node in order read from a
pool set file.
This environment variable is read when library is initialized so
\f[B]RPMEM_CMD\f[] must be set prior to application launch or prior to
\f[B]dlopen\f[](3) of \f[B]librpmem\f[] in case of using dynamic linking
loader.
.IP \[bu] 2
\f[B]RPMEM_SSH\f[]=\f[I]ssh_client\f[]
.PP
Setting this environment variable makes it possible to override the
default \f[B]ssh\f[] client command name.
Setting this variable shall not be required normally.
.IP \[bu] 2
\f[B]RPMEM_ENABLE_SOCKETS\f[]=0|1
.PP
Setting this variable to 1 enables using \f[B]fi_sockets\f[](7) provider
for in\-band RDMA connection.
By default the \f[I]sockets\f[] provider is disabled.
.IP \[bu] 2
\f[B]RPMEM_ENABLE_VERBS\f[]=0|1
.PP
Setting this variable to 0 disables using \f[B]fi_verbs\f[](7) provider
for in\-band RDMA connection.
The \f[I]verbs\f[] provider is enabled by default.
.SH EXAMPLE
.PP
The following example uses \f[B]librpmem\f[] to create a remote pool on
given target node identified by given pool set name.
The associated local memory pool is zeroed and the data is made
persistent on remote node.
Upon success the remote pool is closed.
.IP
.nf
\f[C]
#include\ <stdio.h>
#include\ <string.h>

#include\ <librpmem.h>

#define\ POOL_SIZE\ \ \ \ (32\ *\ 1024\ *\ 1024)
#define\ NLANES\ \ \ \ \ \ \ \ 4
unsigned\ char\ pool[POOL_SIZE];

int
main(int\ argc,\ char\ *argv[])
{
\ \ \ \ int\ ret;
\ \ \ \ unsigned\ nlanes\ =\ NLANES;

\ \ \ \ /*\ fill\ pool_attributes\ */
\ \ \ \ struct\ rpmem_pool_attr\ pool_attr;
\ \ \ \ memset(&pool_attr,\ 0,\ sizeof(pool_attr));

\ \ \ \ /*\ create\ a\ remote\ pool\ */
\ \ \ \ RPMEMpool\ *rpp\ =\ rpmem_create("localhost",\ "pool.set",
\ \ \ \ \ \ \ \ \ \ \ \ pool,\ POOL_SIZE,\ &nlanes,\ &pool_attr);
\ \ \ \ if\ (!rpp)\ {
\ \ \ \ \ \ \ \ fprintf(stderr,\ "rpmem_create:\ %s\\n",\ rpmem_errormsg());
\ \ \ \ \ \ \ \ return\ 1;
\ \ \ \ }

\ \ \ \ /*\ store\ data\ on\ local\ pool\ */
\ \ \ \ memset(pool,\ 0,\ POOL_SIZE);

\ \ \ \ /*\ make\ local\ data\ persistent\ on\ remote\ node\ */
\ \ \ \ ret\ =\ rpmem_persist(rpp,\ 0,\ POOL_SIZE,\ 0);
\ \ \ \ if\ (ret)\ {
\ \ \ \ \ \ \ \ fprintf(stderr,\ "rpmem_persist:\ %s\\n",\ rpmem_errormsg());
\ \ \ \ \ \ \ \ return\ 1;
\ \ \ \ }

\ \ \ \ /*\ close\ the\ remote\ pool\ */
\ \ \ \ ret\ =\ rpmem_close(rpp);
\ \ \ \ if\ (ret)\ {
\ \ \ \ \ \ \ \ fprintf(stderr,\ "rpmem_close:\ %s\\n",\ rpmem_errormsg());
\ \ \ \ \ \ \ \ return\ 1;
\ \ \ \ }

\ \ \ \ return\ 0;
}
\f[]
.fi
.SH ACKNOWLEDGEMENTS
.PP
\f[B]librpmem\f[] builds on the persistent memory programming model
recommended by the SNIA NVM Programming Technical Work Group:
<http://snia.org/nvmp>
.SH SEE ALSO
.PP
\f[B]libpmemobj\f[](3), \f[B]libpmemblk\f[](3), \f[B]libpmemlog\f[](3),
\f[B]libpmem\f[](3), \f[B]strerror\f[](3) and \f[B]<http://pmem.io>\f[]
