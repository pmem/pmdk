.\" Automatically generated by Pandoc 2.1.3
.\"
.TH "PMEMBLK_SET_ZERO" "3" "2018-05-07" "PMDK - pmemblk API version 1.1" "PMDK Programmer's Manual"
.hy
.\" Copyright 2014-2018, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of the copyright holder nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH NAME
.PP
\f[B]pmemblk_set_zero\f[](), \f[B]pmemblk_set_error\f[]() \[en] block
management functions
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmemblk.h>

int\ pmemblk_set_zero(PMEMblkpool\ *pbp,\ long\ long\ blockno);
int\ pmemblk_set_error(PMEMblkpool\ *pbp,\ long\ long\ blockno);
\f[]
.fi
.SH DESCRIPTION
.PP
The \f[B]pmemblk_set_zero\f[]() function writes zeros to block number
\f[I]blockno\f[] in persistent memory resident array of blocks
\f[I]pbp\f[].
Using this function is faster than actually writing a block of zeros
since \f[B]libpmemblk\f[](7) uses metadata to indicate the block should
read back as zero.
.PP
The \f[B]pmemblk_set_error\f[]() function sets the error state for block
number \f[I]blockno\f[] in persistent memory resident array of blocks
\f[I]pbp\f[].
A block in the error state returns \f[I]errno\f[] \f[B]EIO\f[] when
read.
Writing the block clears the error state and returns the block to normal
use.
.SH RETURN VALUE
.PP
On success, \f[B]pmemblk_set_zero\f[]() and \f[B]pmemblk_set_error\f[]()
return 0.
On error, they return \-1 and set \f[I]errno\f[] appropriately.
.SH SEE ALSO
.PP
\f[B]libpmemblk\f[](7) and \f[B]<http://pmem.io>\f[]
