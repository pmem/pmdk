.\" Automatically generated by Pandoc 2.1.3
.\"
.TH "LIBPMEMPOOL" "7" "2018-05-07" "PMDK - pmempool API version 1.3" "PMDK Programmer's Manual"
.hy
.\" Copyright 2014-2018, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of the copyright holder nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH NAME
.PP
\f[B]libpmempool\f[] \[en] persistent memory pool management library
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmempool.h>
cc\ \-std=gnu99\ ...\ \-lpmempool\ \-lpmem
\f[]
.fi
.SS Library API versioning:
.IP
.nf
\f[C]
const\ char\ *pmempool_check_version(
\ \ \ \ unsigned\ major_required,
\ \ \ \ unsigned\ minor_required);
\f[]
.fi
.SS Error handling:
.IP
.nf
\f[C]
const\ char\ *pmempool_errormsg(void);
\f[]
.fi
.SS Other library functions:
.PP
A description of other \f[B]libpmempool\f[] functions can be found on
the following manual pages:
.IP \[bu] 2
health check functions: \f[B]pmempool_check_init\f[](3)
.IP \[bu] 2
pool set synchronization and transformation: \f[B]pmempool_sync\f[](3)
.IP \[bu] 2
pool set management functions: \f[B]pmempool_rm\f[](3)
.SH DESCRIPTION
.PP
\f[B]libpmempool\f[] provides a set of utilities for off\-line analysis
and manipulation of a \f[I]pool\f[].
A \f[I]pool\f[] in this manpage means a pmemobj pool, pmemblk pool,
pmemlog pool or BTT layout, independent of the underlying storage.
Some \f[B]libpmempool\f[] functions are required to work without any
impact on the \f[I]pool\f[] but some may create a new or modify an
existing \f[I]pool\f[].
.PP
\f[B]libpmempool\f[] is for applications that need high reliability or
built\-in troubleshooting.
It may be useful for testing and debugging purposes also.
.PP
\f[B]libpmempool\f[] introduces functionality of pool set health check,
synchronization, transformation and removal.
.SH CAVEATS
.PP
\f[B]libpmempool\f[] relies on the library destructor being called from
the main thread.
For this reason, all functions that might trigger destruction (e.g.
\f[B]dlclose\f[](3)) should be called in the main thread.
Otherwise some of the resources associated with that thread might not be
cleaned up properly.
.PP
\f[B]libpmempool\f[] requires the \f[B]\-std=gnu99\f[] compilation flag
to build properly.
.SH LIBRARY API VERSIONING
.PP
This section describes how the library API is versioned, allowing
applications to work with an evolving API.
.PP
The \f[B]pmempool_check_version\f[]() function is used to see if the
installed \f[B]libpmempool\f[] supports the version of the library API
required by an application.
The easiest way to do this for the application is to supply the
compile\-time version information, supplied by defines in
\f[B]<libpmempool.h>\f[], like this:
.IP
.nf
\f[C]
reason\ =\ pmempool_check_version(PMEMPOOL_MAJOR_VERSION,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ PMEMPOOL_MINOR_VERSION);
if\ (reason\ !=\ NULL)\ {
\ \ \ \ /*\ version\ check\ failed,\ reason\ string\ tells\ you\ why\ */
}
\f[]
.fi
.PP
Any mismatch in the major version number is considered a failure, but a
library with a newer minor version number will pass this check since
increasing minor versions imply backwards compatibility.
.PP
An application can also check specifically for the existence of an
interface by checking for the version where that interface was
introduced.
These versions are documented in this man page as follows: unless
otherwise specified, all interfaces described here are available in
version 1.0 of the library.
Interfaces added after version 1.0 will contain the text \f[I]introduced
in version x.y\f[] in the section of this manual describing the feature.
.PP
When the version check performed by \f[B]pmempool_check_version\f[]() is
successful, the return value is NULL.
Otherwise the return value is a static string describing the reason for
failing the version check.
The string returned by \f[B]pmempool_check_version\f[]() must not be
modified or freed.
.SH DEBUGGING AND ERROR HANDLING
.PP
If an error is detected during the call to a \f[B]libpmempool\f[]
function, the application may retrieve an error message describing the
reason for the failure from \f[B]pmempool_errormsg\f[]().
This function returns a pointer to a static buffer containing the last
error message logged for the current thread.
If \f[I]errno\f[] was set, the error message may include a description
of the corresponding error code as returned by \f[B]strerror\f[](3).
The error message buffer is thread\-local; errors encountered in one
thread do not affect its value in other threads.
The buffer is never cleared by any library function; its content is
significant only when the return value of the immediately preceding call
to a \f[B]libpmempool\f[] function indicated an error, or if
\f[I]errno\f[] was set.
The application must not modify or free the error message string, but it
may be modified by subsequent calls to other library functions.
.PP
Two versions of \f[B]libpmempool\f[] are typically available on a
development system.
The normal version, accessed when a program is linked using the
\f[B]\-lpmempool\f[] option, is optimized for performance.
That version skips checks that impact performance and never logs any
trace information or performs any run\-time assertions.
.PP
A second version of \f[B]libpmempool\f[], accessed when a program uses
the libraries under \f[B]/usr/lib/pmdk_debug\f[], contains run\-time
assertions and trace points.
The typical way to access the debug version is to set the environment
variable \f[B]LD_LIBRARY_PATH\f[] to \f[B]/usr/lib/pmdk_debug\f[] or
\f[B]/usr/lib64/pmdk_debug\f[], as appropriate.
Debugging output is controlled using the following environment
variables.
These variables have no effect on the non\-debug version of the library.
.IP \[bu] 2
\f[B]PMEMPOOL_LOG_LEVEL\f[]
.PP
The value of \f[B]PMEMPOOL_LOG_LEVEL\f[] enables trace points in the
debug version of the library, as follows:
.IP \[bu] 2
\f[B]0\f[] \- This is the default level when \f[B]PMEMPOOL_LOG_LEVEL\f[]
is not set.
No log messages are emitted at this level.
.IP \[bu] 2
\f[B]1\f[] \- Additional details on any errors detected are logged (in
addition to returning the \f[I]errno\f[]\-based errors as usual).
The same information may be retrieved using
\f[B]pmempool_errormsg\f[]().
.IP \[bu] 2
\f[B]2\f[] \- A trace of basic operations is logged.
.IP \[bu] 2
\f[B]3\f[] \- Enables a very verbose amount of function call tracing in
the library.
.IP \[bu] 2
\f[B]4\f[] \- Enables voluminous and fairly obscure tracing information
that is likely only useful to the \f[B]libpmempool\f[] developers.
.PP
Unless \f[B]PMEMPOOL_LOG_FILE\f[] is set, debugging output is written to
\f[I]stderr\f[].
.IP \[bu] 2
\f[B]PMEMPOOL_LOG_FILE\f[]
.PP
Specifies the name of a file where all logging information should be
written.
If the last character in the name is \[lq]\-\[rq], the \f[I]PID\f[] of
the current process will be appended to the file name when the log file
is created.
If \f[B]PMEMPOOL_LOG_FILE\f[] is not set, output is written to
\f[I]stderr\f[].
.SH EXAMPLE
.PP
The following example illustrates how the \f[B]libpmempool\f[] API is
used.
The program detects the type and checks consistency of given pool.
If there are any issues detected, the pool is automatically repaired.
.IP
.nf
\f[C]
#include\ <stddef.h>
#include\ <unistd.h>
#include\ <stdlib.h>
#include\ <stdio.h>
#include\ <libpmempool.h>

#define\ PATH\ "./pmem\-fs/myfile"
#define\ CHECK_FLAGS\ (PMEMPOOL_CHECK_FORMAT_STR|PMEMPOOL_CHECK_REPAIR|\\
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ PMEMPOOL_CHECK_VERBOSE)

int
main(int\ argc,\ char\ *argv[])
{
\ \ \ \ PMEMpoolcheck\ *ppc;
\ \ \ \ struct\ pmempool_check_status\ *status;
\ \ \ \ enum\ pmempool_check_result\ ret;

\ \ \ \ /*\ arguments\ for\ check\ */
\ \ \ \ struct\ pmempool_check_args\ args\ =\ {
\ \ \ \ \ \ \ \ .path\ \ \ \ \ \ \ =\ PATH,
\ \ \ \ \ \ \ \ .backup_path\ \ \ \ =\ NULL,
\ \ \ \ \ \ \ \ .pool_type\ \ =\ PMEMPOOL_POOL_TYPE_DETECT,
\ \ \ \ \ \ \ \ .flags\ \ \ \ \ \ =\ CHECK_FLAGS
\ \ \ \ };

\ \ \ \ /*\ initialize\ check\ context\ */
\ \ \ \ if\ ((ppc\ =\ pmempool_check_init(&args,\ sizeof(args)))\ ==\ NULL)\ {
\ \ \ \ \ \ \ \ perror("pmempool_check_init");
\ \ \ \ \ \ \ \ exit(EXIT_FAILURE);
\ \ \ \ }

\ \ \ \ /*\ perform\ check\ and\ repair,\ answer\ \[aq]yes\[aq]\ for\ each\ question\ */
\ \ \ \ while\ ((status\ =\ pmempool_check(ppc))\ !=\ NULL)\ {
\ \ \ \ \ \ \ \ switch\ (status\->type)\ {
\ \ \ \ \ \ \ \ case\ PMEMPOOL_CHECK_MSG_TYPE_ERROR:
\ \ \ \ \ \ \ \ \ \ \ \ printf("%s\\n",\ status\->str.msg);
\ \ \ \ \ \ \ \ \ \ \ \ break;
\ \ \ \ \ \ \ \ case\ PMEMPOOL_CHECK_MSG_TYPE_INFO:
\ \ \ \ \ \ \ \ \ \ \ \ printf("%s\\n",\ status\->str.msg);
\ \ \ \ \ \ \ \ \ \ \ \ break;
\ \ \ \ \ \ \ \ case\ PMEMPOOL_CHECK_MSG_TYPE_QUESTION:
\ \ \ \ \ \ \ \ \ \ \ \ printf("%s\\n",\ status\->str.msg);
\ \ \ \ \ \ \ \ \ \ \ \ status\->str.answer\ =\ "yes";
\ \ \ \ \ \ \ \ \ \ \ \ break;
\ \ \ \ \ \ \ \ default:
\ \ \ \ \ \ \ \ \ \ \ \ pmempool_check_end(ppc);
\ \ \ \ \ \ \ \ \ \ \ \ exit(EXIT_FAILURE);
\ \ \ \ \ \ \ \ }
\ \ \ \ }

\ \ \ \ /*\ finalize\ the\ check\ and\ get\ the\ result\ */
\ \ \ \ ret\ =\ pmempool_check_end(ppc);
\ \ \ \ switch\ (ret)\ {
\ \ \ \ \ \ \ \ case\ PMEMPOOL_CHECK_RESULT_CONSISTENT:
\ \ \ \ \ \ \ \ case\ PMEMPOOL_CHECK_RESULT_REPAIRED:
\ \ \ \ \ \ \ \ \ \ \ \ return\ 0;
\ \ \ \ \ \ \ \ default:
\ \ \ \ \ \ \ \ \ \ \ \ return\ 1;
\ \ \ \ }
}
\f[]
.fi
.PP
See <http://pmem.io/pmdk/libpmempool> for more examples using the
\f[B]libpmempool\f[] API.
.SH ACKNOWLEDGEMENTS
.PP
\f[B]libpmempool\f[] builds on the persistent memory programming model
recommended by the SNIA NVM Programming Technical Work Group:
<http://snia.org/nvmp>
.SH SEE ALSO
.PP
\f[B]dlclose\f[](3), \f[B]pmempool_check_init\f[](3),
\f[B]pmempool_rm\f[](3), \f[B]pmempool_sync\f[](3),
\f[B]strerror\f[](3), \f[B]libpmem\f[](7), \f[B]libpmemblk\f[](7),
\f[B]libpmemcto\f[](7), \f[B]libpmemlog\f[](7), \f[B]libpmemobj\f[](7)
and \f[B]<http://pmem.io>\f[]
