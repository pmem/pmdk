.\" Automatically generated by Pandoc 2.1.3
.\"
.TH "PMEMLOG_TELL" "3" "2018-05-07" "PMDK - pmemlog API version 1.1" "PMDK Programmer's Manual"
.hy
.\" Copyright 2014-2018, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of the copyright holder nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH NAME
.PP
\f[B]pmemlog_tell\f[](), \f[B]pmemlog_rewind\f[](),
\f[B]pmemlog_walk\f[]() \[en] checks current write point for the log or
walks through the log
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmemlog.h>

long\ long\ pmemlog_tell(PMEMlogpool\ *plp);
void\ pmemlog_rewind(PMEMlogpool\ *plp);
void\ pmemlog_walk(PMEMlogpool\ *plp,\ size_t\ chunksize,
\ \ \ \ int\ (*process_chunk)(const\ void\ *buf,\ size_t\ len,\ void\ *arg),
\ \ \ \ void\ *arg);
\f[]
.fi
.SH DESCRIPTION
.PP
The \f[B]pmemlog_tell\f[]() function returns the current write point for
the log, expressed as a byte offset into the usable log space in the
memory pool.
This offset starts off as zero on a newly\-created log, and is
incremented by each successful append operation.
This function can be used to determine how much data is currently in the
log.
.PP
The \f[B]pmemlog_rewind\f[]() function resets the current write point
for the log to zero.
After this call, the next append adds to the beginning of the log.
.PP
The \f[B]pmemlog_walk\f[]() function walks through the log \f[I]plp\f[],
from beginning to end, calling the callback function
\f[I]process_chunk\f[] for each \f[I]chunksize\f[] block of data found.
The argument \f[I]arg\f[] is also passed to the callback to help avoid
the need for global state.
The \f[I]chunksize\f[] argument is useful for logs with fixed\-length
records and may be specified as 0 to cause a single call to the callback
with the entire log contents passed as the \f[I]buf\f[] argument.
The \f[I]len\f[] argument tells the \f[I]process_chunk\f[] function how
much data \f[I]buf\f[] is holding.
The callback function should return 1 if \f[B]pmemlog_walk\f[]() should
continue walking through the log, or 0 to terminate the walk.
The callback function is called while holding \f[B]libpmemlog\f[](7)
internal locks that make calls atomic, so the callback function must not
try to append to the log itself or deadlock will occur.
.SH RETURN VALUE
.PP
On success, \f[B]pmemlog_tell\f[]() returns the current write point for
the log.
On error, it returns \-1 and sets \f[I]errno\f[] appropriately.
.PP
The \f[B]pmemlog_rewind\f[]() and \f[B]pmemlog_walk\f[]() functions
return no value.
.SH SEE ALSO
.PP
\f[B]libpmemlog\f[](7) and \f[B]<http://pmem.io>\f[]
