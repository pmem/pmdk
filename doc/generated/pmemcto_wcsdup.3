.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "PMEMCTO_WCSDUP" "3" "2017-12-11" "NVM Library - libpmemcto API version 1.0" "NVML Programmer's Manual"
.hy
.\" Copyright 2014-2017, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of the copyright holder nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH NAME
.PP
pmemcto_wcsdup \-\- duplicate a wide\-char string
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmemcto.h>

wchar_t\ *pmemcto_wcsdup(PMEMctopool\ *pcp,\ const\ wchar_t\ *s);
\f[]
.fi
.SH DESCRIPTION
.PP
The \f[B]pmemcto_wcsdup\f[]() function provides the same semantics as
\f[B]wcsdup\f[](3), but operates on the memory pool \f[I]pcp\f[] instead
of the process heap supplied by the system.
It returns a pointer to a new wide\-char string which is a duplicate of
the string \f[I]s\f[].
Memory for the new string is obtained with \f[B]pmemcto_malloc\f[](3),
on the given memory pool, and can be freed with \f[B]pmemcto_free\f[](3)
on the same memory pool.
.SH RETURN VALUE
.PP
On success, the \f[B]pmemcto_wcsdup\f[]() function returns a pointer to
the duplicated string.
If \f[B]pmemcto_wcsdup\f[]() is unable to satisfy the allocation
request, a NULL pointer is returned and \f[I]errno\f[] is set
appropriately.
.SH ERRORS
.PP
\f[B]ENOMEM\f[] Insufficient memory available to allocate duplicated
string.
.SH SEE ALSO
.PP
\f[B]pmemcto_malloc\f[](3), \f[B]pmemcto_strdup\f[](3),
\f[B]strdup\f[](3), \f[B]wcsdup\f[](3), \f[B]malloc\f[](3),
\f[B]jemalloc\f[](3), \f[B]libpmemcto\f[](7) and
\f[B]<http://pmem.io>\f[]
