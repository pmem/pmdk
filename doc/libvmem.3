.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "libvmem" "3" "" "" ""
.hy
.PP
NAME
.PP
SYNOPSIS
.PP
DESCRIPTION
.PP
MANAGING MEMORY POOLS
.PP
MEMORY ALLOCATION
.PP
MANAGING LIBRARY BEHAVIOR
.PP
DEBUGGING AND ERROR HANDLING
.PP
EXAMPLE
.PP
BUGS
.PP
ACKNOWLEDGEMENTS
.PP
SEE ALSO
.SS NAME
.PP
\f[B]libvmem\f[] − volatile memory allocation library
.SS SYNOPSIS
.IP
.nf
\f[C]
#include\ <libvmem.h>
cc\ ...\ \-lvmem
\f[]
.fi
.SS Memory pool management:
.IP
.nf
\f[C]
VMEM\ *vmem_create(const\ char\ *dir,\ size_t\ size);

VMEM\ *vmem_create_in_region(void\ *addr,\ size_t\ size);

void\ vmem_delete(VMEM\ *vmp);

int\ vmem_check(VMEM\ *vmp);

void\ vmem_stats_print(VMEM\ *vmp,\ const\ char\ *opts);
\f[]
.fi
.SS Memory allocation related functions:
.IP
.nf
\f[C]
void\ *vmem_malloc(VMEM\ *vmp,\ size_t\ size);

void\ vmem_free(VMEM\ *vmp,\ void\ *ptr);

void\ *vmem_calloc(VMEM\ *vmp,\ size_t\ nmemb,\ size_t\ size);

void\ *vmem_realloc(VMEM\ *vmp,\ void\ *ptr,\ size_t\ size);

void\ *vmem_aligned_alloc(VMEM\ *vmp,\ size_t\ alignment,\ size_t\ size);

char\ *vmem_strdup(VMEM\ *vmp,\ const\ char\ *s);

size_t\ vmem_malloc_usable_size(VMEM\ *vmp,\ void\ *ptr);
\f[]
.fi
.SS Managing overall library behavior:
.IP
.nf
\f[C]
const\ char\ *vmem_check_version(unsigned\ major_required,\ unsigned\ minor_required);

void\ vmem_set_funcs(
\ \ \ \ void\ *(*malloc_func)(size_t\ size),
\ \ \ \ void\ (*free_func)(void\ *ptr),
\ \ \ \ void\ *(*realloc_func)(void\ *ptr,\ size_t\ size),
\ \ \ \ char\ *(*strdup_func)(const\ char\ *s),
\ \ \ \ void\ (*print_func)(const\ char\ *s));
\f[]
.fi
.SS Error handling:
.IP
.nf
\f[C]
const\ char\ *vmem_errormsg(void);
\f[]
.fi
.SS DESCRIPTION
.PP
\f[B]libvmem\f[] provides common \f[I]malloc\-like\f[] interfaces to
memory pools built on memory\-mapped files.
These interfaces are for traditional \f[B]volatile\f[] memory allocation
but, unlike the functions described in \f[B]malloc\f[](3), the memory
managed by \f[B]libvmem\f[] may have different attributes, depending on
the file system containing the memory\-mapped files.
In particular, \f[B]libvmem\f[] is part of the \f[I]Non\-Volatile Memory
Library\f[] because it is sometimes useful to use non\-volatile memory
as a volatile memory pool, leveraging its capacity, cost, or performance
characteristics.
.PP
\f[B]libvmem\f[] uses the \f[B]mmap\f[](2) system call to create a pool
of volatile memory.
The library is most useful when used with \f[I]Direct Access\f[] storage
(DAX), which is memory\-addressable persistent storage that supports
load/store access without being paged via the system page cache.
A Persistent Memory\-aware file system is typically used to provide this
type of access.
Memory\-mapping a file from a Persistent Memory\-aware file system
provides the raw memory pools, and this library supplies the more
familiar \f[I]malloc\-like\f[] interfaces on top of those pools.
.PP
Under normal usage, \f[B]libvmem\f[] will never print messages or
intentionally cause the process to exit.
Exceptions to this are prints caused by calls to
\f[C]vmem_stats_print()\f[], or by enabling debugging as described under
\f[B]DEBUGGING AND ERROR HANDLING\f[] below.
The library uses \f[B]pthreads\f[](7) to be fully MT\-safe, but never
creates or destroys threads itself.
The library does not make use of any signals, networking, and never
calls \f[C]select()\f[] or \f[C]poll()\f[].
The system memory allocation routines like \f[C]malloc()\f[] and
\f[C]free()\f[] are used by \f[B]libvmem\f[] for managing a small amount
of run\-time state, but applications are allowed to override these calls
if necessary (see the description of \f[C]vmem_set_funcs()\f[] below).
.PP
\f[B]libvmem\f[] interfaces are grouped into three categories: those
that manage memory pools, those providing the basic memory allocation
functions, and those interfaces less commonly used for managing the
overall library behavior.
These groups of interfaces are described in the following three
sections.
.SS MANAGING MEMORY POOLS
.PP
To use \f[B]libvmem\f[], a \f[I]memory pool\f[] is first created.
This is most commonly done with the \f[C]vmem_create()\f[] function
described in this section.
The other functions described in this section are for less common cases,
where applications have special needs for creating pools or examining
library state.
.PP
Once created, a memory pool is represented by an opaque pool handle, of
type \f[C]VMEM*\f[], which is passed to the functions for memory
allocation described in the next section.
.IP
.nf
\f[C]
VMEM\ *vmem_create(const\ char\ *dir,\ size_t\ size);
\f[]
.fi
.PP
The \f[C]vmem_create()\f[] function creates a memory pool.
The resulting pool is then used with functions like
\f[C]vmem_malloc()\f[] and \f[C]vmem_free()\f[] to provide the familiar
\f[I]malloc\-like\f[] programming model for the memory pool.
\f[C]vmem_create()\f[] creates the pool by allocating a temporary file
in the given directory \f[I]dir\f[].
The file is created in a fashion similar to \f[B]tmpfile\f[](3), so that
the file name does not appear when the directory is listed and the space
is automatically freed when the program terminates.
\f[C]size\f[] bytes are allocated and the resulting space is
memory\-mapped.
The minimum \f[C]size\f[] value allowed by the library is defined in
\f[C]<libvmem.h>\f[] as \f[C]VMEM_MIN_POOL\f[].
Calling \f[C]vmem_create()\f[] with a size smaller than that will return
an error.
The maximum allowed size is not limited by \f[B]libvmem\f[], but by the
file system specified by the \f[C]dir\f[] argument.
The \f[C]size\f[] passed in is the raw size of the memory pool and
\f[B]libvmem\f[] will use some of that space for its own metadata.
\f[C]vmem_create()\f[] returns an opaque memory pool handle or
\f[C]NULL\f[] if an error occurred (in which case \f[C]errno\f[] is set
appropriately).
The opaque memory pool handle is then used with the other functions
described in this man page that operate on a specific memory pool.
.IP
.nf
\f[C]
VMEM\ *vmem_create_in_region(void\ *addr,\ size_t\ size);
\f[]
.fi
.PP
The \f[C]vmem_create_in_region()\f[] is an alternate \f[B]libvmem\f[]
entry point for creating a memory pool.
It is for the rare case where an application needs to create a memory
pool from an already memory\-mapped region.
Instead of allocating space from a given file system,
\f[C]vmem_create_in_region()\f[] is given the memory region explicitly
via the \f[C]addr\f[] and \f[C]size\f[] arguments.
Any data in the region is lost by calling
\f[C]vmem_create_in_region()\f[], which will immediately store its own
data structures for managing the pool there.
Like \f[C]vmem_create()\f[] above, the minimum \f[C]size\f[] allowed is
defined as \f[C]VMEM_MIN_POOL\f[].
The \f[C]addr\f[] argument must be page aligned.
\f[C]vmem_create_in_region()\f[] returns an opaque memory pool handle or
\f[C]NULL\f[] if an error occurred (in which case \f[C]errno\f[] is set
appropriately).
Undefined behavior occurs if \f[C]addr\f[] does not point to the
contiguous memory region in the virtual address space of the calling
process, or if the \f[C]size\f[] is larger than the actual size of the
memory region pointed by \f[C]addr\f[].
.IP
.nf
\f[C]
void\ vmem_delete(VMEM\ *vmp);
\f[]
.fi
.PP
The \f[C]vmem_delete()\f[] function releases the memory pool
\f[C]vmp\f[].
If the memory pool was created using \f[C]vmem_create_pool()\f[],
deleting it allows the space to be reclaimed.
.IP
.nf
\f[C]
int\ vmem_check(VMEM\ *vmp);
\f[]
.fi
.PP
The \f[C]vmem_check()\f[] function performs an extensive consistency
check of all \f[B]libvmem\f[] internal data structures in memory pool
\f[C]vmp\f[].
It returns 1 if the memory pool during the check is found to be
consistent and 0 otherwise.
Cases where the check couldn't be performed, are indicated by a return
value of \-1.
Since an error return indicates memory pool corruption, applications
should not continue to use a pool in this state.
Additional details about errors found are logged when the log level is
at least 1 (see \f[B]DEBUGGING AND ERROR HANDLING\f[] below).
During the consistency check performed by \f[C]vmem_check()\f[], other
operations on the same memory pool are locked out.
The checks are all read\-only; \f[C]vmem_check()\f[] never modifies the
memory pool.
This function is mostly useful for \f[B]libvmem\f[] developers during
testing/debugging.
.IP
.nf
\f[C]
void\ vmem_stats_print(VMEM\ *vmp,\ const\ char\ *opts);
\f[]
.fi
.PP
The \f[C]vmem_stats_print()\f[] function produces messages containing
statistics about the given memory pool.
The output is printed using \f[B]libvmem\f[]'s internal
\f[I]print_func\f[] function (see \f[C]vmem_set_funcs()\f[] below).
That means the output typically appears on \f[I]stderr\f[] unless the
caller supplies a replacement \f[I]print_func\f[] or sets the
environment variable \f[C]VMEM_LOG_FILE\f[] to direct output elsewhere.
The \f[C]opts\f[] string can either be \f[C]NULL\f[] or it can contain a
list of options that change the stats printed.
General information that never changes during execution can be omitted
by specifying “g” as a character within the opts string.
The characters “m” and “a” can be specified to omit merged arena and per
arena statistics, respectively; “b” and “l” can be specified to omit per
size class statistics for bins and large objects, respectively.
Unrecognized characters are silently ignored.
Note that thread caching may prevent some statistics from being
completely up to date.
See \f[B]jemalloc\f[](3) for more detail (the description of the
available \f[C]opts\f[] above was taken from that man page).
.SS MEMORY ALLOCATION
.PP
This section describes the \f[I]malloc\-like\f[] API provided by
\f[B]libvmem\f[].
These functions provide the same semantics as their libc namesakes, but
operate on the memory pools specified by their first arguments.
.IP
.nf
\f[C]
void\ *vmem_malloc(VMEM\ *vmp,\ size_t\ size);
\f[]
.fi
.PP
The \f[C]vmem_malloc()\f[] function provides the same semantics as
\f[B]malloc\f[](3), but operates on the memory pool \f[C]vmp\f[] instead
of the process heap supplied by the system.
It allocates \f[C]size\f[] bytes and returns a pointer to the allocated
memory.
\f[I]The memory is not initialized\f[].
If \f[C]size\f[] is 0, then \f[C]vmem_malloc()\f[] returns either
\f[C]NULL\f[], or a unique pointer value that can later be successfully
passed to \f[C]vmem_free()\f[].
If \f[C]vmem_malloc()\f[] is unable to satisfy the allocation request, a
\f[C]NULL\f[] pointer is returned and \f[C]errno\f[] is set
appropriately.
.IP
.nf
\f[C]
void\ vmem_free(VMEM\ *vmp,\ void\ *ptr);
\f[]
.fi
.PP
The \f[C]vmem_free()\f[] function provides the same semantics as
\f[B]free\f[](3), but operates on the memory pool \f[C]vmp\f[] instead
of the process heap supplied by the system.
It frees the memory space pointed to by \f[C]ptr\f[], which must have
been returned by a previous call to \f[C]vmem_malloc()\f[],
\f[C]vmem_calloc()\f[] or \f[C]vmem_realloc()\f[] for \f[I]the same pool
of memory\f[].
Undefined behavior occurs if frees do not correspond to allocated memory
from the same memory pool.
If \f[C]ptr\f[] is \f[C]NULL\f[], no operation is performed.
.IP
.nf
\f[C]
void\ *vmem_calloc(VMEM\ *vmp,\ size_t\ nmemb,\ size_t\ size);
\f[]
.fi
.PP
The \f[C]vmem_calloc()\f[] function provides the same semantics as
\f[B]calloc\f[](3), but operates on the memory pool \f[C]vmp\f[] instead
of the process heap supplied by the system.
It allocates memory for an array of \f[C]nmemb\f[] elements of
\f[C]size\f[] bytes each and returns a pointer to the allocated memory.
The memory is set to zero.
If \f[C]nmemb\f[] or \f[C]size\f[] is 0, then \f[C]vmem_calloc()\f[]
returns either \f[C]NULL\f[], or a unique pointer value that can later
be successfully passed to \f[C]vmem_free()\f[].
If \f[C]vmem_calloc()\f[] is unable to satisfy the allocation request, a
\f[C]NULL\f[] pointer is returned and \f[C]errno\f[] is set
appropriately.
.IP
.nf
\f[C]
void\ *vmem_realloc(VMEM\ *vmp,\ void\ *ptr,\ size_t\ size);
\f[]
.fi
.PP
The \f[C]vmem_realloc()\f[] function provides the same semantics as
\f[B]realloc\f[](3), but operates on the memory pool \f[C]vmp\f[]
instead of the process heap supplied by the system.
It changes the size of the memory block pointed to by \f[C]ptr\f[] to
\f[C]size\f[] bytes.
The contents will be unchanged in the range from the start of the region
up to the minimum of the old and new sizes.
If the new size is larger than the old size, the added memory will
\f[I]not\f[] be initialized.
If \f[C]ptr\f[] is \f[C]NULL\f[], then the call is equivalent to
\f[C]vmem_malloc(vmp,\ size)\f[], for all values of \f[C]size\f[]; if
\f[C]size\f[] is equal to zero, and \f[C]ptr\f[] is not \f[C]NULL\f[],
then the call is equivalent to \f[C]vmem_free(vmp,\ ptr)\f[].
Unless \f[C]ptr\f[] is \f[C]NULL\f[], it must have been returned by an
earlier call to \f[C]vmem_malloc()\f[], \f[C]vmem_calloc()\f[] or
\f[C]vmem_realloc()\f[].
If the area pointed to was moved, a \f[C]vmem_free(vmp,\ ptr)\f[] is
done.
If \f[C]vmem_realloc()\f[] is unable to satisfy the allocation request,
a \f[C]NULL\f[] pointer is returned and \f[C]errno\f[] is set
appropriately.
.IP
.nf
\f[C]
void\ *vmem_aligned_alloc(VMEM\ *vmp,\ size_t\ alignment,\ size_t\ size);
\f[]
.fi
.PP
The \f[C]vmem_aligned_alloc()\f[] function provides the same semantics
as \f[B]aligned_alloc\f[](3), but operates on the memory pool
\f[C]vmp\f[] instead of the process heap supplied by the system.
It allocates \f[C]size\f[] bytes from the memory pool and returns a
pointer to the allocated memory.
The memory address will be a multiple of \f[C]alignment\f[], which must
be a power of two.
If \f[C]vmem_aligned_alloc()\f[] is unable to satisfy the allocation
request, a \f[C]NULL\f[] pointer is returned and \f[C]errno\f[] is set
appropriately.
.IP
.nf
\f[C]
char\ *vmem_strdup(VMEM\ *vmp,\ const\ char\ *s);
\f[]
.fi
.PP
The \f[C]vmem_strdup()\f[] function provides the same semantics as
\f[B]strdup\f[](3), but operates on the memory pool \f[C]vmp\f[] instead
of the process heap supplied by the system.
It returns a pointer to a new string which is a duplicate of the string
\f[I]s\f[].
Memory for the new string is obtained with \f[C]vmem_malloc()\f[], on
the given memory pool, and can be freed with \f[C]vmem_free()\f[] on the
same memory pool.
If \f[C]vmem_strdup()\f[] is unable to satisfy the allocation request, a
\f[C]NULL\f[] pointer is returned and \f[C]errno\f[] is set
appropriately.
.IP
.nf
\f[C]
size_t\ vmem_malloc_usable_size(VMEM\ *vmp,\ void\ *ptr);
\f[]
.fi
.PP
The \f[C]vmem_malloc_usable_size()\f[] function provides the same
semantics as \f[B]malloc_usable_size\f[](3), but operates on the memory
pool \f[C]vmp\f[] instead of the process heap supplied by the system.
It returns the number of usable bytes in the block of allocated memory
pointed to by \f[C]ptr\f[], a pointer to a block of memory allocated by
\f[C]vmem_malloc()\f[] or a related function.
If \f[C]ptr\f[] is \f[C]NULL\f[], 0 is returned.
.SS MANAGING LIBRARY BEHAVIOR
.PP
The library entry points described in this section are less commonly
used than the previous section.
These entry points expose library information or alter the default
library behavior.
.IP
.nf
\f[C]
const\ char\ *vmem_check_version(unsigned\ major_required,\ unsigned\ minor_required);
\f[]
.fi
.PP
The \f[C]vmem_check_version()\f[] function is used to see if the
installed \f[B]libvmem\f[] supports the version of the library API
required by an application.
The easiest way to do this is for the application to supply the
compile\-time version information, supplied by defines in
\f[C]<libvmem.h>\f[], like this:
.IP
.nf
\f[C]
reason\ =\ vmem_check_version(VMEM_MAJOR_VERSION,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ VMEM_MINOR_VERSION);
if\ (reason\ !=\ NULL)\ {
\ \ \ \ /*\ \ version\ check\ failed,\ reason\ string\ tells\ you\ why\ */
}
\f[]
.fi
.PP
Any mismatch in the major version number is considered a failure, but a
library with a newer minor version number will pass this check since
increasing minor versions imply backwards compatibility.
.PP
An application can also check specifically for the existence of an
interface by checking for the version where that interface was
introduced.
These versions are documented in this man page as follows: unless
otherwise specified, all interfaces described here are available in
version 1.0 of the library.
Interfaces added after version 1.0 will contain the text \f[I]introduced
in version x.y\f[] in the section of this manual describing the feature.
.PP
When the version check performed by \f[C]vmem_check_version()\f[] is
successful, the return value is \f[C]NULL\f[].
Otherwise the return value is a static string describing the reason for
failing the version check.
The string returned by \f[C]vmem_check_version()\f[] must not be
modified or freed.
.IP
.nf
\f[C]
void\ vmem_set_funcs(
\ \ \ \ void\ *(*malloc_func)(size_t\ size),
\ \ \ \ void\ (*free_func)(void\ *ptr),
\ \ \ \ void\ *(*realloc_func)(void\ *ptr,\ size_t\ size),
\ \ \ \ char\ *(*strdup_func)(const\ char\ *s),
\ \ \ \ void\ (*print_func)(const\ char\ *s));
\f[]
.fi
.PP
The \f[C]vmem_set_funcs()\f[] function allows an application to override
some interfaces used internally by \f[B]libvmem\f[].
Passing in \f[C]NULL\f[] for any of the handlers will cause the
\f[B]libvmem\f[] default function to be used.
The library does not make heavy use of the system malloc functions, but
it does allocate approximately 4\-8 kilobytes for each memory pool in
use.
The only functions in the malloc family used by the library are
represented by the first four arguments to \f[C]vmem_set_funcs()\f[].
The \f[I]print_func\f[] function is called by \f[B]libvmem\f[] when the
\f[C]vmem_stats_print()\f[] entry point is used, or when additional
tracing is enabled in the debug version of the library as described in
the \f[B]DEBUGGING AND ERROR HANDLING\f[] section below.
The default \f[I]print_func\f[] used by the library prints to the file
specified by the \f[C]VMEM_LOG_FILE\f[] environment variable, or to
\f[I]stderr\f[] if that variable is not set.
.SS DEBUGGING AND ERROR HANDLING
.PP
Two versions of \f[B]libvmem\f[] are typically available on a
development system.
The normal version, accessed when a program is linked using the
\f[C]\-lvmem\f[] option, is optimized for performance.
That version skips checks that impact performance and never logs any
trace information or performs any run\-time assertions.
If an error is detected during the call to \f[B]libvmem\f[] function, an
application may retrieve an error message describing the reason of
failure using the following function:
.IP
.nf
\f[C]
const\ char\ *vmem_errormsg(void);
\f[]
.fi
.PP
The \f[C]vmem_errormsg()\f[] function returns a pointer to a static
buffer containing the last error message logged for current thread.
The error message may include description of the corresponding error
code (if \f[C]errno\f[] was set), as returned by \f[B]strerror\f[](3).
The error message buffer is thread\-local; errors encountered in one
thread do not affect its value in other threads.
The buffer is never cleared by any library function; its content is
significant only when the return value of the immediately preceding call
to \f[B]libvmem\f[] function indicated an error, or if \f[C]errno\f[]
was set.
The application must not modify or free the error message string, but it
may be modified by subsequent calls to other library functions.
.PP
A second version of \f[B]libvmem\f[], accessed when a program uses the
libraries under \f[B]/usr/lib/nvml_debug\f[], contains run\-time
assertions and trace points.
The typical way to access the debug version is to set the environment
variable \f[C]LD_LIBRARY_PATH\f[] to \f[B]/usr/lib/nvml_debug\f[] or
\f[B]/usr/lib64/nvml_debug\f[] depending on where the debug libraries
are installed on the system.
The trace points in the debug version of the library are enabled using
the environment variable \f[C]VMEM_LOG_LEVEL\f[], which can be set to
the following values:
.IP \[bu] 2
\f[B]0\f[] \- This is the default level when \f[C]VMEM_LOG_LEVEL\f[] is
not set.
Only statistics are logged, and then only in response to a call to
\f[C]vmem_stats_print()\f[].
.IP \[bu] 2
\f[B]1\f[] \- Additional details on any errors detected are logged (in
addition to returning the \f[C]errno\f[]\-based errors as usual).
The same information may be retrieved using \f[C]vmem_errormsg()\f[].
.IP \[bu] 2
\f[B]2\f[] \- A trace of basic operations including allocations and
deallocations is logged.
.IP \[bu] 2
\f[B]3\f[] \- This level enables a very verbose amount of function call
tracing in the library.
.IP \[bu] 2
\f[B]4\f[] \- This level enables voluminous and fairly obscure tracing
information that is likely only useful to the \f[B]libvmem\f[]
developers.
.PP
The environment variable \f[C]VMEM_LOG_FILE\f[] specifies a file name
where all logging information should be written.
If the last character in the name is “\-”, the PID of the current
process will be appended to the file name when the log file is created.
If \f[C]VMEM_LOG_FILE\f[] is not set, output goes to stderr.
All prints are done using the \f[I]print_func\f[] function in
\f[B]libvmem\f[] (see \f[C]vmem_set_funcs()\f[] above for details on how
to override that function).
.PP
Setting the environment variable \f[C]VMEM_LOG_LEVEL\f[] has no effect
on the non\-debug version of \f[B]libvmem\f[].
.SS EXAMPLE
.PP
The following example creates a memory pool, allocates some memory to
contain the string “hello, world”, and then frees that memory.
.IP
.nf
\f[C]
#include\ <stdio.h>
#include\ <stdlib.h>
#include\ <string.h>
#include\ <libvmem.h>

main()
{
\ \ \ \ VMEM\ *vmp;
\ \ \ \ char\ *ptr;

\ \ \ \ /*\ create\ minimum\ size\ pool\ of\ memory\ */
\ \ \ \ if\ ((vmp\ =\ vmem_create("/pmem\-fs",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ VMEM_MIN_POOL))\ ==\ NULL)\ {
\ \ \ \ \ \ \ \ perror("vmem_create");
\ \ \ \ \ \ \ \ exit(1);
\ \ \ \ }

\ \ \ \ if\ ((ptr\ =\ vmem_malloc(vmp,\ 100))\ ==\ NULL)\ {
\ \ \ \ \ \ \ \ perror("vmem_malloc");
\ \ \ \ \ \ \ \ exit(1);
\ \ \ \ }

\ \ \ \ strcpy(ptr,\ "hello,\ world");

\ \ \ \ /*\ give\ the\ memory\ back\ */
\ \ \ \ vmem_free(vmp,\ ptr);

\ \ \ \ /*\ ...\ */
}
\f[]
.fi
.PP
See <http://pmem.io/nvml/libvmem> for more examples using the
\f[B]libvmem\f[] API.
.SS BUGS
.PP
Unlike the normal \f[B]malloc\f[](), which asks the system for
additional memory when it runs out, \f[B]libvmem\f[] allocates the size
it is told to and never attempts to grow or shrink that memory pool.
.SS ACKNOWLEDGEMENTS
.PP
\f[B]libvmem\f[] depends on jemalloc, written by Jason Evans, to do the
heavy lifting of managing dynamic memory allocation.
See:
.PP
<http://www.canonware.com/jemalloc/>
.PP
\f[B]libvmem\f[] builds on the persistent memory programming model
recommended by the SNIA NVM Programming Technical Work Group:
.PP
<http://snia.org/nvmp>
.SS SEE ALSO
.PP
\f[B]malloc\f[](3), \f[B]posix_memalign\f[](3), \f[B]strdup\f[](3),
\f[B]mmap\f[](2), \f[B]strerror\f[](3), \f[B]jemalloc\f[](3),
\f[B]libpmem\f[](3).
