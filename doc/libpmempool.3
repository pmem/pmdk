.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "libpmempool" "3" "" "" ""
.hy
.PP
NAME
.PP
SYNOPSIS
.PP
DESCRIPTION
.PP
POOL CHECKING FUNCTIONS
.PP
LIBRARY API VERSIONING
.PP
DEBUGGING AND ERROR HANDLING
.PP
ACKNOWLEDGEMENTS
.PP
SEE ALSO
.SS NAME
.PP
\f[B]libpmempool\f[] \- pool management library
.SS SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmempool.h>\ 
cc\ \-std=gnu99\ ...\ \-lpmempool\ \-lpmem
\f[]
.fi
.SS Health check functions:
.IP
.nf
\f[C]
PMEMpoolcheck\ *pmempool_check_init(struct\ pmempool_check_args\ *args,\ size_t\ args_size);

struct\ pmempool_check_status\ *pmempool_check(PMEMpoolcheck\ *ppc);

enum\ pmempool_check_result\ pmempool_check_end(PMEMpoolcheck\ *ppc);
\f[]
.fi
.SS Library API versioning:
.IP
.nf
\f[C]
const\ char\ *pmempool_check_version(
\ \ \ \ unsigned\ major_required,
\ \ \ \ unsigned\ minor_required);
\f[]
.fi
.SS Error handling:
.IP
.nf
\f[C]
const\ char\ *pmempool_errormsg(void);
\f[]
.fi
.SS DESCRIPTION
.PP
\f[B]libpmempool\f[] provides a set of utilities for off\-line analysis
and manipulation of a \f[I]pool\f[].
By \f[I]pool\f[] in this manpage we mean pmemobj pool, pmemblk pool,
pmemlog pool or BTT layout, independent of the underlying storage.
Some of \f[B]libpmempool\f[] functions are required to work without any
impact on processed \f[I]pool\f[] but some of them may create a new or
modify an existing one.
.PP
\f[B]libpmempool\f[] is for applications that need high reliability or
built\-in troubleshooting.
It may be useful for testing and debugging purposes also.
.PP
Currently \f[B]libpmempool\f[] implements only consistency check and
repair functions.
.SS POOL CHECKING FUNCTIONS
.PP
To perform check provided by \f[B]libpmempool\f[], a \f[I]check
context\f[] must be first initialized using
\f[C]pmempool_check_init()\f[] function described in this section.
Once initialized \f[I]check context\f[] is represented by an opaque
handle, of type \f[C]PMEMpoolcheck\ *\f[], which is passed to all of the
other functions described in this section.
.PP
To execute check \f[C]pmempool_check()\f[] must be called iteratively.
Each call resumes check till new status will be generated.
Each status is represented by \f[C]struct\ pmempool_check_status\ *\f[]
structure.
It may carry various types of messages described in this section.
.PP
When check is completed \f[C]pmempool_check()\f[] returns \f[C]NULL\f[]
pointer.
Check must be finalized using \f[C]pmempool_check_end()\f[].
It returns \f[C]enum\ pmempool_check_result\f[] describing result of the
whole check.
.IP
.nf
\f[C]
PMEMpoolcheck\ *pmempool_check_init(
struct\ pmempool_check_args\ *args,
size_t\ args_size);
\f[]
.fi
.PP
The \f[C]pmempool_check_init()\f[] initializes check context.
\f[C]args\f[] describes parameters of the check context.
\f[C]args_size\f[] should be equal to the size of the
\f[C]struct\ pmempool_check_args\f[].
\f[C]struct\ \ \ pmempool_check_args\f[] is defined as follows:
.IP
.nf
\f[C]
struct\ pmempool_check_args\ 
{
\ \ \ \ /*\ path\ to\ the\ pool\ to\ check\ */
\ \ \ \ const\ char\ *path;\ \ \ 
\ \ \ \ 
\ \ \ \ /*\ optional\ backup\ path\ */\ \ 
\ \ \ \ const\ char\ *backup_path;
\ \ \ \ 
\ \ \ \ /*\ type\ of\ the\ pool\ */
\ \ \ \ enum\ pmempool_pool_type\ pool_type;
\ \ \ \ 
\ \ \ \ /*\ parameters\ */\ 
\ \ \ \ int\ flags;
};
\f[]
.fi
.PP
The \f[C]flags\f[] argument accepts any combination of the following
values (ORed):
.IP \[bu] 2
\f[C]PMEMPOOL_CHECK_REPAIR\f[] \- perform repairs
.IP \[bu] 2
\f[C]PMEMPOOL_CHECK_DRY_RUN\f[] \- emulate repairs
.IP \[bu] 2
\f[C]PMEMPOOL_CHECK_ADVANCED\f[] \- perform hazardous repairs
.IP \[bu] 2
\f[C]PMEMPOOL_CHECK_ALWAYS_YES\f[] \- do not ask before repairs
.IP \[bu] 2
\f[C]PMEMPOOL_CHECK_VERBOSE\f[] \- generate info statuses
.IP \[bu] 2
\f[C]PMEMPOOL_CHECK_FORMAT_STR\f[] \- generate string format statuses
.PP
If provided parameters are invalid or initialization process fails
\f[C]pmempool_check_init()\f[] returns \f[C]NULL\f[] and sets
\f[C]errno\f[] appropriately.
\f[C]pool_type\f[] has to match type of the \f[I]pool\f[] being
processed.
You can turn on pool type detection by setting \f[C]pool_type\f[] to
\f[C]PMEMPOOL_POOL_TYPE_DETECT\f[].
Pool type detection fail ends check.
.PP
This is an example of a \f[I]check context\f[] initialization:
.IP
.nf
\f[C]
struct\ pmempool_check_args\ args\ =\ 
{\ 
\ \ \ \ .path\ =\ "/path/to/blk.pool",
\ \ \ \ .backup_path\ =\ NULL,
\ \ \ \ .pool_type\ =\ PMEMPOOL_POOL_TYPE_BLK,
\ \ \ \ .flags\ =\ PMEMPOOL_CHECK_REPAIR\ |\ PMEMPOOL_CHECK_DRY_RUN\ |
\ \ \ \ PMEMPOOL_CHECK_VERBOSE\ |\ PMEMPOOL_CHECK_FORMAT_STR
};
\f[]
.fi
.IP
.nf
\f[C]
PMEMpoolcheck\ *ppc\ =\ pmempool_check_init(&args,\ sizeof(args));
\f[]
.fi
.PP
The check will process a \f[I]pool\f[] of type
\f[C]PMEMPOOL_POOL_TYPE_BLK\f[] located in the path /path/to/blk.pool.
Before check it will not create a backup of the \f[I]pool\f[]
(\f[C]backup_path\ ==\ NULL\f[]).
If the check will find any issues it will try to perform repair steps
(\f[C]PMEMPOOL_CHECK_REPAIR\f[]), but it will not make any changes to
the \f[I]pool\f[] (\f[C]PMEMPOOL_CHECK_DRY_RUN\f[]) and it will not
perform any dangerous repair steps (no
\f[C]PMEMPOOL_CHECK_ADVANCED\f[]).
The check will ask before performing any repair steps (no
\f[C]PMEMPOOL_CHECK_ALWAYS_YES\f[]).
It will also generate detailed information about the check
(\f[C]PMEMPOOL_CHECK_VERBOSE\f[]).
\f[C]PMEMPOOL_CHECK_FORMAT_STR\f[] flag indicates string format statuses
(\f[C]struct\ pmempool_check_status\f[]).
Currently it is the only supported status format so this flag is
required.
.IP
.nf
\f[C]
struct\ pmempool_check_status\ *pmempool_check(PMEMpoolcheck\ *ppc);
\f[]
.fi
.PP
The \f[C]pmempool_check()\f[] function starts or resumes the check
indicated by \f[C]ppc\f[].
When next status will be generated it pauses the check and returns a
pointer to the \f[C]struct\ \ \ pmempool_check_status\f[] structure:
.IP
.nf
\f[C]
struct
pmempool_check_status\ 
{
\ \ \ \ enum\ pmempool_check_msg_type\ type;\ /*\ type\ of\ the\ status\ */
\ \ \ \ struct
\ \ \ \ {\ 
\ \ \ \ \ \ \ \ const\ char\ *msg;\ /*\ status\ message\ string\ */\ 
\ \ \ \ \ \ \ \ const\ char\ *answer;\ /*\ answer\ to\ message\ if\ applicable\ */
\ \ \ \ }\ str;\ 
};
\f[]
.fi
.PP
This structure can describe three types of statuses:
.IP \[bu] 2
\f[C]PMEMPOOL_CHECK_MSG_TYPE_INFO\f[] \- detailed information about the
check.
Generated only if a \f[C]PMEMPOOL_CHECK_VERBOSE\f[] flag was set.
.IP \[bu] 2
\f[C]PMEMPOOL_CHECK_MSG_TYPE_ERROR\f[] \- encountered error
.IP \[bu] 2
\f[C]PMEMPOOL_CHECK_MSG_TYPE_QUESTION\f[] \- question.
Generated only if an \f[C]PMEMPOOL_CHECK_ALWAYS_YES\f[] flag was not
set.
It requires \f[C]answer\f[] to be set to "yes" or "no" before
continuing.
.PP
After calling \f[C]pmempool_check()\f[] again the previously provided
\f[C]struct\ pmempool_check_status\ *\f[] pointer must be considered
invalid.
When the check completes \f[C]pmempool_check()\f[] returns \f[C]NULL\f[]
pointer.
.IP
.nf
\f[C]
enum\ pmempool_check_result\ pmempool_check_end(PMEMpoolcheck*\ ppc);
\f[]
.fi
.PP
The \f[C]pmempool_check_end()\f[] function finalizes the check and
releases all related resources.
\f[C]ppc\f[] is not a valid pointer after calling
\f[C]pmempool_check_end()\f[].
It returns \f[C]enum\ pmempool_check_result\f[] summarizing result of
the finalized check.
\f[C]pmempool_check_end()\f[] can return one of the following values:
.IP \[bu] 2
\f[C]PMEMPOOL_CHECK_RESULT_CONSISTENT\f[] \- the \f[I]pool\f[] is
consistent
.IP \[bu] 2
\f[C]PMEMPOOL_CHECK_RESULT_NOT_CONSISTENT\f[] \- the \f[I]pool\f[] is
not consistent
.IP \[bu] 2
\f[C]PMEMPOOL_CHECK_RESULT_REPAIRED\f[] \- the \f[I]pool\f[] has issues
but all repair steps completed succesfully
.IP \[bu] 2
\f[C]PMEMPOOL_CHECK_RESULT_CANNOT_REPAIR\f[] \- the \f[I]pool\f[] has
issues which can not be repaired
.IP \[bu] 2
\f[C]PMEMPOOL_CHECK_RESULT_ERROR\f[] \- the \f[I]pool\f[] has errors or
the check encountered issue
.SS LIBRARY API VERSIONING
.PP
This section describes how the library API is versioned, allowing
applications to work with an evolving API.
.IP
.nf
\f[C]
const\ char\ *pmempool_check_version(
unsigned\ major_required,
unsigned\ minor_required);
\f[]
.fi
.PP
The \f[C]pmempool_check_version()\f[] function is used to see if the
installed \f[B]libpmempool\f[] supports the version of the library API
required by an application.
The easiest way to do this for the application is to supply the
compile\-time version information, supplied by defines in
\f[C]<libpmempool.h>\f[], like this:
.IP
.nf
\f[C]
reason\ =\ pmempool_check_version(
PMEMPOOL_MAJOR_VERSION,
PMEMPOOL_MINOR_VERSION);

if\ (reason\ !=\ NULL)\ 
{
\ \ \ \ /*\ version\ check\ failed,\ reason\ string\ tells\ you\ why\ */
}
\f[]
.fi
.PP
Any mismatch in the major version number is considered a failure, but a
library with a newer minor version number will pass this check since
increasing minor versions imply backwards compatibility.
.PP
An application can also check specifically for the existence of an
interface by checking for the version where that interface was
introduced.
These versions are documented in this man page as follows: unless
otherwise specified, all interfaces described here are available in
version 1.0 of the library.
Interfaces added after version 1.0 will contain the text introduced in
version x.y in the section of this manual describing the feature.
.PP
When the version check performed by \f[C]pmempool_check_version()\f[] is
successful, the return value is \f[C]NULL\f[].
Otherwise the return value is a static string describing the reason for
failing the version check.
The string returned by \f[C]pmempool_check_version()\f[] must not be
modified or freed.
.SS DEBUGGING AND ERROR HANDLING
.PP
Two versions of libpmempool are typically available on a development
system.
The normal version, accessed when a program is linked using the
\f[C]\-lpmempool\f[] option, is optimized for performance.
That version skips checks that impact performance and exceptionally logs
any trace information or performs any run\-time assertions.
If an error is detected during the call to \f[I]libpmempool\f[]
function, an application may retrieve an error message describing the
reason of failure using the following function:
.IP
.nf
\f[C]
const\ char\ *pmempool_errormsg(void);
\f[]
.fi
.PP
The \f[C]pmempool_errormsg()\f[] function returns a pointer to a static
buffer containing the last error message logged for current thread.
The error message may include description of the corresponding error
code (if errno was set), as returned by \f[C]strerror(3)\f[].
The error message buffer is thread\-local; errors encountered in one
thread do not affect its value in other threads.
The buffer is never cleared by any library function; its content is
significant only when the return value of the immediately preceding call
to \f[B]libpmempool\f[] function indicated an error, or if
\f[C]errno\f[] was set.
The application must not modify or free the error message string, but it
may be modified by subsequent calls to other library functions.
.PP
A second version of \f[B]libpmempool\f[], accessed when a program uses
the libraries under \f[B]/usr/lib/nvml_debug\f[], contains run\-time
assertions and trace points.
The typical way to access the debug version is to set the environment
variable \f[C]LD_LIBRARY_PATH\f[] to \f[B]/usr/lib/nvml_debug\f[] or
\f[B]/usr/lib64/nvml_debug\f[] depending on where the debug libraries
are installed on the system.
The trace points in the debug version of the library are enabled using
the environment variable \f[C]PMEMPOOL_LOG_LEVEL\f[], which can be set
to the following values:
.IP \[bu] 2
\f[B]0\f[] \- This is the default level when \f[C]PMEMPOOL_LOG_LEVEL\f[]
is not set.
No log messages are emitted at this level.
.IP \[bu] 2
\f[B]1\f[] \- Additional details on any errors detected are logged (in
addition to returning the errno\-based errors as usual).
The same information may be retrieved using
\f[C]pmempool_errormsg()\f[].
.IP \[bu] 2
\f[B]2\f[] \- A trace of basic operations is logged.
.IP \[bu] 2
\f[B]3\f[] \- This level enables a very verbose amount of function call
tracing in the library.
.IP \[bu] 2
\f[B]4\f[] \- This level enables voluminous and fairly obscure tracing
information that is likely only useful to the libpmempool developers.
.PP
The environment variable \f[C]PMEMPOOL_LOG_FILE\f[] specifies a file
name where all logging information should be written.
If the last character in the name is "\-", the PID of the current
process will be appended to the file name when the log file is created.
If \f[C]PMEMPOOL_LOG_FILE\f[] is not set, the logging output goes to
stderr.
.PP
Setting the environment variable \f[C]PMEMPOOL_LOG_FILE\f[] has no
effect on the non\-debug version of \f[B]libpmempool\f[].
.SS ACKNOWLEDGEMENTS
.PP
\f[B]libpmempool\f[] builds on the persistent memory programming model
recommended by the SNIA NVM Programming Technical Work
.PP
Group: <http://snia.org/nvmp>
.SS SEE ALSO
.PP
\f[B]mmap\f[](2), \f[B]munmap\f[](2), \f[B]msync\f[](2),
\f[B]strerror\f[](3), \f[B]libpmemobj\f[](3), \f[B]libpmemblk\f[](3),
\f[B]libpmemlog\f[](3), \f[B]libpmem\f[](3) and
\f[B]<http://pmem.io>\f[]
