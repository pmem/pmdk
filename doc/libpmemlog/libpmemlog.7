.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "" "" "2023-07-04" "PMDK - " "PMDK Programmer's Manual"
.hy
.\" SPDX-License-Identifier: BSD-3-Clause
.\" Copyright 2016-2023, Intel Corporation
.SH NAME
.PP
\f[B]libpmemlog\f[R] - persistent memory resident log file (DEPRECATED)
.SH SYNOPSIS
.IP
.nf
\f[C]
#include <libpmemlog.h>
cc ... -lpmemlog -lpmem
\f[R]
.fi
.SS Library API versioning:
.IP
.nf
\f[C]
const char *pmemlog_check_version(
    unsigned major_required,
    unsigned minor_required);
\f[R]
.fi
.SS Managing library behavior:
.IP
.nf
\f[C]
void pmemlog_set_funcs(
    void *(*malloc_func)(size_t size),
    void (*free_func)(void *ptr),
    void *(*realloc_func)(void *ptr, size_t size),
    char *(*strdup_func)(const char *s));
\f[R]
.fi
.SS Error handling:
.IP
.nf
\f[C]
int pmemlog_check(const char *path);
\f[R]
.fi
.SS Other library functions:
.PP
A description of other \f[B]libpmemlog\f[R] functions can be found on
the following manual pages:
.PP
\f[B]pmemlog_append\f[R](3), \f[B]pmemlog_create\f[R](3),
\f[B]pmemlog_ctl_exec\f[R](3), \f[B]pmemlog_ctl_get\f[R](3),
\f[B]pmemlog_ctl_set\f[R](3), \f[B]pmemlog_nbyte\f[R](3),
\f[B]pmemlog_tell\f[R](3)
.SH DESCRIPTION
.PP
\f[B]libpmemlog\f[R] provides a log file in \f[I]persistent memory\f[R]
(pmem) such that additions to the log are appended atomically.
This library is intended for applications using direct access storage
(DAX), which is storage that supports load/store access without paging
blocks from a block storage device.
Some types of \f[I]non-volatile memory DIMMs\f[R] (NVDIMMs) provide this
type of byte addressable access to storage.
A \f[I]persistent memory aware file system\f[R] is typically used to
expose the direct access to applications.
Memory mapping a file from this type of file system results in the
load/store, non-paged access to pmem.
\f[B]libpmemlog\f[R] builds on thistype of memory mapped file.
.PP
This library is for applications that need a persistent log file updated
atomically (the updates cannot be \f[I]torn\f[R] by program interruption
such as power failures).
This library builds on the low-level pmem support provided by
\f[B]libpmem\f[R](7), handling the transactional update of the log,
flushing to persistence, and recovery for the application.
.PP
\f[B]libpmemlog\f[R] is one of a collection of persistent memory
libraries available.
The others are:
.IP \[bu] 2
\f[B]libpmemobj\f[R](7), a general use persistent memory API, providing
memory allocation and transactional operations on variable-sized
objects.
.IP \[bu] 2
\f[B]libpmem\f[R](7), low-level persistent memory support.
.PP
Under normal usage, \f[B]libpmemlog\f[R] will never print messages or
intentionally cause the process to exit.
The only exception to this is the debugging information, when enabled,
as described under \f[B]DEBUGGING AND ERROR HANDLING\f[R] below.
.PP
To use the pmem-resident log file provided by \f[B]libpmemlog\f[R], a
\f[I]memory pool\f[R] is first created.
This is done with the \f[B]pmemlog_create\f[R](3) function.
The other functions mentioned above in SYNOPSIS section then operate on
the resulting log memory pool.
.PP
Once created, the memory pool is represented by an opaque handle, of
type \f[I]PMEMlogpool*\f[R], which is passed to most of the other
functions from \f[B]libpmemlog\f[R].
Internally, \f[B]libpmemlog\f[R] will use either
\f[B]pmem_persist\f[R](3) or \f[B]msync\f[R](2) when it needs to flush
changes, depending on whether the memory pool appears to be persistent
memory or a regular file (see the \f[B]pmem_is_pmem\f[R](3) function in
\f[B]libpmem\f[R](7) for more information).
There is no need for applications to flush changes directly when using
the log memory API provided by \f[B]libpmemlog\f[R].
.SH CAVEATS
.PP
\f[B]libpmemlog\f[R] relies on the library destructor being called from
the main thread.
For this reason, all functions that might trigger destruction (e.g.
\f[B]dlclose\f[R](3)) should be called in the main thread.
Otherwise some of the resources associated with that thread might not be
cleaned up properly.
.SH LIBRARY API VERSIONING
.PP
This section describes how the library API is versioned, allowing
applications to work with an evolving API.
.PP
The \f[B]pmemlog_check_version\f[R]() function is used to determine
whether the installed \f[B]libpmemlog\f[R] supports the version of the
library API required by an application.
The easiest way to do this is for the application to supply the
compile-time version information provided by defines in
\f[B]<libpmemlog.h>\f[R], like this:
.IP
.nf
\f[C]
reason = pmemlog_check_version(PMEMLOG_MAJOR_VERSION,
                               PMEMLOG_MINOR_VERSION);
if (reason != NULL) {
    /* version check failed, reason string tells you why */
}
\f[R]
.fi
.PP
Any mismatch in the major version number is considered a failure, but a
library with a newer minor version number will pass this check since
increasing minor versions imply backwards compatibility.
.PP
An application can also check specifically for the existence of an
interface by checking for the version where that interface was
introduced.
These versions are documented in this man page as follows: unless
otherwise specified, all interfaces described here are available in
version 1.0 of the library.
Interfaces added after version 1.0 will contain the text \f[I]introduced
in version x.y\f[R] in the section of this manual describing the
feature.
.PP
On success, \f[B]pmemlog_check_version\f[R]() returns NULL.
Otherwise, the return value is a static string describing the reason the
version check failed.
The string returned by \f[B]pmemlog_check_version\f[R]() must not be
modified or freed.
.SH MANAGING LIBRARY BEHAVIOR
.PP
The \f[B]pmemlog_set_funcs\f[R]() function allows an application to
override memory allocation calls used internally by
\f[B]libpmemlog\f[R].
Passing in NULL for any of the handlers will cause the
\f[B]libpmemlog\f[R] default function to be used.
The library does not make heavy use of the system malloc functions, but
it does allocate approximately 4-8 kilobytes for each memory pool in
use.
.SH DEBUGGING AND ERROR HANDLING
.PP
The \f[B]pmemlog_errormsg\f[R]() function returns a pointer to a static
buffer containing the last error message logged for the current thread.
If \f[I]errno\f[R] was set, the error message may include a description
of the corresponding error code as returned by \f[B]strerror\f[R](3).
The error message buffer is thread-local; errors encountered in one
thread do not affect its value in other threads.
The buffer is never cleared by any library function; its content is
significant only when the return value of the immediately preceding call
to a \f[B]libpmemlog\f[R] function indicated an error, or if
\f[I]errno\f[R] was set.
The application must not modify or free the error message string, but it
may be modified by subsequent calls to other library functions.
.PP
Two versions of \f[B]libpmemlog\f[R] are typically available on a
development system.
The normal version, accessed when a program is linked using the
\f[B]-lpmemlog\f[R] option, is optimized for performance.
That version skips checks that impact performance and never logs any
trace information or performs any run-time assertions.
.PP
A second version of \f[B]libpmemlog\f[R], accessed when a program uses
the libraries under \f[B]/usr/lib/pmdk_debug\f[R], contains run-time
assertions and trace points.
The typical way to access the debug version is to set the environment
variable \f[B]LD_LIBRARY_PATH\f[R] to \f[B]/usr/lib/pmdk_debug\f[R] or
\f[B]/usr/lib64/pmdk_debug\f[R], as appropriate.
Debugging output is controlled using the following environment
variables.
These variables have no effect on the non-debug version of the library.
.IP \[bu] 2
\f[B]PMEMLOG_LOG_LEVEL\f[R]
.PP
The value of \f[B]PMEMLOG_LOG_LEVEL\f[R] enables trace points in the
debug version of the library, as follows:
.IP \[bu] 2
\f[B]0\f[R] - This is the default level when \f[B]PMEMLOG_LOG_LEVEL\f[R]
is not set.
No log messages are emitted at this level.
.IP \[bu] 2
\f[B]1\f[R] - Additional details on any errors detected are logged, in
addition to returning the \f[I]errno\f[R]-based errors as usual.
The same information may be retrieved using
\f[B]pmemlog_errormsg\f[R]().
.IP \[bu] 2
\f[B]2\f[R] - A trace of basic operations is logged.
.IP \[bu] 2
\f[B]3\f[R] - Enables a very verbose amount of function call tracing in
the library.
.IP \[bu] 2
\f[B]4\f[R] - Enables voluminous and fairly obscure tracing information
that is likely only useful to the \f[B]libpmemlog\f[R] developers.
.PP
Unless \f[B]PMEMLOG_LOG_FILE\f[R] is set, debugging output is written to
\f[I]stderr\f[R].
.IP \[bu] 2
\f[B]PMEMLOG_LOG_FILE\f[R]
.PP
Specifies the name of a file name where all logging information should
be written.
If the last character in the name is \[lq]-\[rq], the \f[I]PID\f[R] of
the current process will be appended to the file name when the log file
is created.
If \f[B]PMEMLOG_LOG_FILE\f[R] is not set, logging output is written to
\f[I]stderr\f[R].
.PP
See also \f[B]libpmem\f[R](7) for information about other environment
variables affecting \f[B]libpmemlog\f[R] behavior.
.SH EXAMPLE
.PP
The following example illustrates how the \f[B]libpmemlog\f[R] API is
used.
.IP
.nf
\f[C]
#include <stdio.h>
#include <fcntl.h>
#include <errno.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <libpmemlog.h>

/* size of the pmemlog pool -- 1 GB */
#define POOL_SIZE ((size_t)(1 << 30))

/*
 * printit -- log processing callback for use with pmemlog_walk()
 */
int
printit(const void *buf, size_t len, void *arg)
{
    fwrite(buf, len, 1, stdout);
    return 0;
}

int
main(int argc, char *argv[])
{
    const char path[] = \[dq]/pmem-fs/myfile\[dq];
    PMEMlogpool *plp;
    size_t nbyte;
    char *str;

    /* create the pmemlog pool or open it if it already exists */
    plp = pmemlog_create(path, POOL_SIZE, 0666);

    if (plp == NULL)
        plp = pmemlog_open(path);

    if (plp == NULL) {
        perror(path);
        exit(1);
    }

    /* how many bytes does the log hold? */
    nbyte = pmemlog_nbyte(plp);
    printf(\[dq]log holds %zu bytes\[dq], nbyte);

    /* append to the log... */
    str = \[dq]This is the first string appended\[dq];
    if (pmemlog_append(plp, str, strlen(str)) < 0) {
        perror(\[dq]pmemlog_append\[dq]);
        exit(1);
    }
    str = \[dq]This is the second string appended\[dq];
    if (pmemlog_append(plp, str, strlen(str)) < 0) {
        perror(\[dq]pmemlog_append\[dq]);
        exit(1);
    }

    /* print the log contents */
    printf(\[dq]log contains:\[dq]);
    pmemlog_walk(plp, 0, printit, NULL);

    pmemlog_close(plp);
}
\f[R]
.fi
.PP
See <https://pmem.io/pmdk/libpmemlog> for more examples using the
\f[B]libpmemlog\f[R] API.
.SH BUGS
.PP
Unlike \f[B]libpmemobj\f[R](7), data replication is not supported in
\f[B]libpmemlog\f[R].
Thus, specifying replica sections in pool set files is not allowed.
.SH NOTE
.RS
.PP
NOTICE: The \f[B]libpmemlog\f[R] library is deprecated since PMDK 1.13.0
release and will be removed in the PMDK 1.14.0 release.
.RE
.SH ACKNOWLEDGEMENTS
.PP
\f[B]libpmemlog\f[R] builds on the persistent memory programming model
recommended by the SNIA NVM Programming Technical Work Group:
<https://snia.org/nvmp>
.SH SEE ALSO
.PP
\f[B]msync\f[R](2), \f[B]pmemlog_append\f[R](3),
\f[B]pmemlog_create\f[R](3), \f[B]pmemlog_ctl_exec\f[R](3),
\f[B]pmemlog_ctl_get\f[R](3), \f[B]pmemlog_ctl_set\f[R](3),
\f[B]pmemlog_nbyte\f[R](3), \f[B]pmemlog_tell\f[R](3),
\f[B]strerror\f[R](3), \f[B]libpmem\f[R](7), \f[B]libpmemobj\f[R](7) and
\f[B]<https://pmem.io>\f[R]
