.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "libvmmalloc" "3" "" "" ""
.hy
.PP
NAME
.PP
SYNOPSIS
.PP
DESCRIPTION
.PP
ENVIRONMENT
.PP
DEBUGGING
.PP
NOTES
.PP
BUGS
.PP
ACKNOWLEDGEMENTS
.PP
SEE ALSO
.SS NAME
.PP
\f[B]libvmmalloc\f[] − general purpose volatile memory allocation
library
.SS SYNOPSIS
.IP
.nf
\f[C]
$\ LD_PRELOAD=libvmmalloc.so\ command\ [\ args...\ ]
\f[]
.fi
.PP
or
.IP
.nf
\f[C]
#include\ <stdlib.h>
#include\ <malloc.h>
#include\ <libvmmalloc.h>
\f[]
.fi
.IP
.nf
\f[C]
$\ cc\ [\ flag...\ ]\ file...\ \-lvmmalloc\ [\ library...\ ]
\f[]
.fi
.SS Most commonly used functions:
.IP
.nf
\f[C]
void\ *malloc(size_t\ size);

void\ free(void\ *ptr);

void\ *calloc(size_t\ number,\ size_t\ size);

void\ *realloc(void\ *ptr,\ size_t\ size);

int\ posix_memalign(void\ **memptr,\ size_t\ alignment,\ size_t\ size);

void\ *aligned_alloc(size_t\ alignment,\ size_t\ size);

void\ *memalign(size_t\ alignment,\ size_t\ size);

void\ *valloc(size_t\ size);

void\ *pvalloc(size_t\ size);

size_t\ malloc_usable_size(const\ void\ *ptr);

void\ cfree(void\ *ptr);
\f[]
.fi
.SS DESCRIPTION
.PP
\f[B]libvmmalloc\f[] transparently converts all the dynamic memory
allocations into Persistent Memory allocations.
.PP
The typical usage of \f[B]libvmmalloc\f[] does not require any
modification of the target program.
It is enough to load \f[B]libvmmalloc\f[] before all other libraries by
setting the environment variable \f[C]LD_PRELOAD\f[].
When used in that way, \f[B]libvmmalloc\f[] interposes the standard
system memory allocation routines, as defined in \f[B]malloc\f[](3),
\f[B]posix_memalign\f[](3) and \f[B]malloc_usable_size\f[](3), and
provides that all dynamic memory allocations are made from a \f[I]memory
pool\f[] built on memory\-mapped file, instead of a system heap.
The memory managed by \f[B]libvmmalloc\f[] may have different
attributes, depending on the file system containing the memory\-mapped
file.
In particular, \f[B]libvmmalloc\f[] is part of the \f[I]Non\-Volatile
Memory Library\f[] because it is sometimes useful to use non\-volatile
memory as a volatile memory pool, leveraging its capacity, cost, or
performance characteristics.
.PP
\f[B]libvmmalloc\f[] may be also linked to the program, by providing the
\f[C]\-lvmmalloc\f[] argument to the linker.
Then it becomes the default memory allocator for given program.
.RS
.PP
NOTE: Due to the fact the library operates on a memory\-mapped file,
\f[B]it may not work properly with the programs that perform fork\f[](3)
\f[B]not followed by exec\f[](3).
There are two variants of experimental fork() support available in
libvmmalloc.
The desired library behavior may be selected by setting VMMALLOC_FORK
environment variable.
By default variant #1 is enabled.
See ENVIRONMENT section for more details.
.RE
.PP
\f[B]libvmmalloc\f[] uses the \f[B]mmap\f[](2) system call to create a
pool of volatile memory.
The library is most useful when used with \f[I]Direct Access\f[] storage
(DAX), which is memory\-addressable persistent storage that supports
load/store access without being paged via the system page cache.
A Persistent Memory\-aware file system is typically used to provide this
type of access.
Memory\-mapping a file from a Persistent Memory\-aware file system
provides the raw memory pools, and this library supplies the traditional
\f[I]malloc\f[] interfaces on top of those pools.
.PP
The memory pool acting as a system heap replacement is created
automatically at the library initialization time.
User may control its location and size by setting the environment
variables described in \f[B]ENVIRONMENT\f[] section.
The allocated file space is reclaimed when process terminates or in case
of system crash.
.PP
Under normal usage, \f[B]libvmmalloc\f[] will never print messages or
intentionally cause the process to exit.
The library uses \f[B]pthreads\f[](7) to be fully MT\-safe, but never
creates or destroys threads itself.
The library does not make use of any signals, networking, and never
calls \f[C]select()\f[] or \f[C]poll()\f[].
.SS ENVIRONMENT
.PP
There are two configuration variables that \f[B]must\f[] be set to make
\f[B]libvmmalloc\f[] work properly.
If any of them is not specified, or if their values are not valid, the
library prints the appropriate error message and terminates the process.
.TP
.B \f[C]VMMALLOC_POOL_DIR\f[]
Specifies a path to directory where the memory pool file should be
created.
The directory must exist and be writable.
.RS
.RE
.TP
.B \f[C]VMMALLOC_POOL_SIZE\f[]
Defines the desired size (in bytes) of the memory pool file.
It must be not less than the minimum allowed size
\f[C]VMMALLOC_MIN_POOL\f[] as defined in \f[C]<libvmmalloc.h>\f[].
.RS
.RE
.RS
.PP
NOTE that due to the fact the library adds some metadata to the memory
pool, the amount of actual usable space is typically less than the size
of the memory pool file.
.RE
.PP
Setting the \f[C]VMMALLOC_FORK\f[] configuration variable is optional.
It controls the behavior of \f[B]libvmmalloc\f[] in case of
\f[B]fork\f[](3), and can be set to the following values:
.IP \[bu] 2
\f[B]0\f[] \- Fork support is disabled.
The behavior is undefined in such case, but most likely results in the
memory pool corruption and the program crash due to segmentation fault.
.IP \[bu] 2
\f[B]1\f[] \- The memory pool file is remapped with \f[C]MAP_PRIVATE\f[]
flag before the fork completes.
From this moment, any access to memory that modifies the heap pages,
both in the parent and in the child process, will trigger creation of a
copy of those pages in RAM (copy\-on\-write).
The benefit of such approach is that it does not significantly increase
the time of fork operation, and does not require additional space on the
file system.
However, all the subsequent memory allocations and modifications of the
memory allocated before fork, will consume system memory resources
instead of the memory pool.
.IP \[bu] 2
\f[B]2\f[] \- A copy of the entire memory pool file is created for the
use of the child process.
This requires additional space on the file system, but both the parent
and the child process may still operate on their memory pools, not
consuming the system memory resources.
.RS
.PP
NOTE: In case of large memory pools, creating a copy of the pool file
may stall the fork operation for a quite long time.
.RE
.IP \[bu] 2
\f[B]3\f[] \- The library first attempts to create a copy of the memory
pool (as for option #2), but if it fails (i.e.
because of insufficient amount of free space on the file system), it
will fall back to option #1.
.SS DEBUGGING
.PP
Two versions of \f[B]libvmmalloc\f[] are typically available on a
development system.
The normal version is optimized for performance.
That version skips checks that impact performance and never logs any
trace information or performs any run\-time assertions.
A second version, accessed when using the libraries under
\f[B]/usr/lib/nvml_debug\f[], contains run\-time assertions and trace
points.
The typical way to access the debug version is to set the environment
variable \f[C]LD_LIBRARY_PATH\f[] to \f[B]/usr/lib/nvml_debug\f[] or
\f[B]/usr/lib64/nvml_debug\f[] depending on where the debug libraries
are installed on the system.
The trace points in the debug version of the library are enabled using
the environment variable \f[C]VMMALLOC_LOG_LEVEL\f[] which can be set to
the following values:
.IP \[bu] 2
\f[B]0\f[] \- Tracing is disabled.
This is the default level when \f[C]VMMALLOC_LOG_LEVEL\f[] is not set.
.IP \[bu] 2
\f[B]1\f[] \- Additional details on any errors detected are logged (in
addition to returning the \f[C]errno\f[]\-based errors as usual).
.IP \[bu] 2
\f[B]2\f[] \- A trace of basic operations is logged.
.IP \[bu] 2
\f[B]3\f[] \- This level enables a very verbose amount of function call
tracing in the library.
.IP \[bu] 2
\f[B]4\f[] \- This level enables voluminous tracing information about
all the memory allocations and deallocations.
.PP
The environment variable \f[C]VMMALLOC_LOG_FILE\f[] specifies a file
name where all logging information should be written.
If the last character in the name is “\-”, the PID of the current
process will be appended to the file name when the log file is created.
If \f[C]VMMALLOC_LOG_FILE\f[] is not set, output goes to stderr.
.PP
Setting the environment variable \f[C]VMMALLOC_LOG_LEVEL\f[] has no
effect on the non\-debug version of \f[B]libvmmalloc\f[].
.TP
.B \f[C]VMMALLOC_LOG_STATS\f[]=1
Setting this environment variable to 1 enables logging the
human\-readable summary statistics at the program termination.
Statistics are written only for the debug version of
\f[B]libvmmalloc\f[].
.RS
.RE
.SS NOTES
.PP
Unlike the normal \f[C]malloc()\f[], which asks the system for
additional memory when it runs out, \f[B]libvmmalloc\f[] allocates the
size it is told to and never attempts to grow or shrink that memory
pool.
.SS BUGS
.PP
\f[B]libvmmalloc\f[] may not work properly with the programs that
perform \f[B]fork\f[](3) and do not call \f[B]exec\f[](3) immediately
afterwards.
See \f[B]ENVIRONMENT\f[] section for more details about the experimental
\f[C]fork()\f[] support.
.PP
If the trace points in the debug version of the library are enabled and
the process performs fork, there is no new log file created for the
child process, even if the configured log file name is terminated with
“\-” character.
All the logging information from the child process will be written to
the log file owned by the parent process, which may lead to corruption
or partial loss of the log data.
.PP
Malloc hooks (see \f[B]malloc_hook\f[](3)), are not supported when using
\f[B]libvmmalloc\f[].
.SS ACKNOWLEDGEMENTS
.PP
\f[B]libvmmalloc\f[] depends on jemalloc, written by Jason Evans, to do
the heavy lifting of managing dynamic memory allocation.
See:
.PP
<http://www.canonware.com/jemalloc/>
.SS SEE ALSO
.PP
\f[B]ld.so\f[](8), \f[B]malloc\f[](3), \f[B]posix_memalign\f[](3),
\f[B]malloc_usable_size\f[](3), \f[B]malloc_hook\f[](3),
\f[B]jemalloc\f[](3), \f[B]libvmem\f[](3), \f[B]libpmem\f[](3).
