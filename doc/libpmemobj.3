.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "libpmemobj" "3" "" "" ""
.hy
.PP
NAME
.PP
SYNOPSIS
.PP
DESCRIPTION
.PP
MOST COMMONLY USED FUNCTIONS
.PP
LOW\-LEVEL MEMORY MANIPULATION
.PP
POOL SETS AND REPLICAS
.PP
LOCKING
.PP
PERSISTENT OBJECTS
.PP
TYPE\-SAFETY
.PP
LAYOUT DECLARATION
.PP
OBJECT CONTAINERS
.PP
ROOT OBJECT MANAGEMENT
.PP
NON\-TRANSACTIONAL ATOMIC
ALLOCATIONS
.PP
NON\-TRANSACTIONAL PERSISTENT ATOMIC
LISTS
.PP
TYPE\-SAFE NON\-TRANSACTIONAL PERSISTENT ATOMIC
LISTS
.PP
TRANSACTIONAL OBJECT MANIPULATION
.PP
CAVEATS
.PP
LIBRARY API VERSIONING
.PP
MANAGING LIBRARY BEHAVIOR
.PP
DEBUGGING AND ERROR HANDLING
.PP
EXAMPLES
.PP
ACKNOWLEDGEMENTS
.PP
SEE ALSO
.SS NAME
.PP
\f[B]libpmemobj\f[] − persistent memory transactional object store
.SS SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmemobj.h>

cc\ \-std=gnu99\ ...\ \-lpmemobj\ \-lpmem
\f[]
.fi
.SS Most commonly used functions:
.IP
.nf
\f[C]
PMEMobjpool\ *pmemobj_open(const\ char\ *path,\ const\ char\ *layout);

PMEMobjpool\ *pmemobj_create(
\ \ \ \ const\ char\ *path,
\ \ \ \ const\ char\ *layout,
\ \ \ \ size_t\ poolsize,
\ \ \ \ mode_t\ mode);

void\ pmemobj_close(PMEMobjpool\ *pop);
\f[]
.fi
.SS Low\-level memory manipulation:
.IP
.nf
\f[C]
void\ *pmemobj_memcpy_persist(PMEMobjpool\ *pop,\ void\ *dest,\ const\ void\ *src,\ size_t\ len);

void\ *pmemobj_memcpy_persist(PMEMobjpool\ *pop,\ void\ *dest,\ const\ void\ *src,\ size_t\ len);

void\ *pmemobj_memset_persist(PMEMobjpool\ *pop,\ void\ *dest,\ int\ c,\ size_t\ len);

void\ pmemobj_persist(PMEMobjpool\ *pop,\ const\ void\ *addr,\ size_t\ len);

void\ pmemobj_flush(PMEMobjpool\ *pop,\ const\ void\ *addr,\ size_t\ len);

void\ pmemobj_drain(PMEMobjpool\ *pop);
\f[]
.fi
.SS Locking:
.IP
.nf
\f[C]
void\ pmemobj_mutex_zero(PMEMobjpool\ *pop,\ PMEMmutex\ *mutexp);

int\ pmemobj_mutex_lock(PMEMobjpool\ *pop,\ PMEMmutex\ *mutexp);

int\ pmemobj_mutex_timedlock(
\ \ \ \ PMEMobjpool\ *pop,
\ \ \ \ PMEMmutex\ *restrict\ mutexp,
\ \ \ \ const\ struct\ timespec\ *restrict\ abs_timeout);

int\ pmemobj_mutex_trylock(PMEMobjpool\ *pop,\ PMEMmutex\ *mutexp);

int\ pmemobj_mutex_unlock(PMEMobjpool\ *pop,\ PMEMmutex\ *mutexp);

void\ pmemobj_rwlock_zero(PMEMobjpool\ *pop,\ PMEMrwlock\ *rwlockp);

int\ pmemobj_rwlock_rdlock(PMEMobjpool\ *pop,\ PMEMrwlock\ *rwlockp);

int\ pmemobj_rwlock_wrlock(PMEMobjpool\ *pop,\ PMEMrwlock\ *rwlockp);

int\ pmemobj_rwlock_timedrdlock(
\ \ \ \ PMEMobjpool\ *pop,
\ \ \ \ PMEMrwlock\ *restrict\ rwlockp,
\ \ \ \ const\ struct\ timespec\ *restrict\ abs_timeout);

int\ pmemobj_rwlock_timedwrlock(
\ \ \ \ PMEMobjpool\ *pop,
\ \ \ \ PMEMrwlock\ *restrict\ rwlockp,
\ \ \ \ const\ struct\ timespec\ *restrict\ abs_timeout);

int\ pmemobj_rwlock_tryrdlock(PMEMobjpool\ *pop,\ PMEMrwlock\ *rwlockp);

int\ pmemobj_rwlock_trywrlock(PMEMobjpool\ *pop,\ PMEMrwlock\ *rwlockp);

int\ pmemobj_rwlock_unlock(PMEMobjpool\ *pop,\ PMEMrwlock\ *rwlockp);

void\ pmemobj_cond_zero(PMEMobjpool\ *pop,\ PMEMcond\ *condp);

int\ pmemobj_cond_broadcast(PMEMobjpool\ *pop,\ PMEMcond\ *condp);

int\ pmemobj_cond_signal(PMEMobjpool\ *pop,\ PMEMcond\ *condp);

int\ pmemobj_cond_timedwait(
\ \ \ \ PMEMobjpool\ *pop,
\ \ \ \ PMEMcond\ *restrict\ condp,
\ \ \ \ PMEMmutex\ *restrict\ mutexp,
\ \ \ \ const\ struct\ timespec\ *restrict\ abs_timeout);

int\ pmemobj_cond_wait(PMEMobjpool\ *pop,\ PMEMcond\ *condp,\ PMEMmutex\ *restrict\ mutexp);
\f[]
.fi
.SS Persistent object identifier:
.IP
.nf
\f[C]
OID_IS_NULL(PMEMoid\ oid)

OID_EQUALS(PMEMoid\ lhs,\ PMEMoid\ rhs)
\f[]
.fi
.SS Type\-safety:
.IP
.nf
\f[C]
TOID(TYPE)

TOID_DECLARE(TYPE,\ uint64_t\ type_num)

TOID_DECLARE_ROOT(ROOT_TYPE)

TOID_TYPE_NUM(TYPE)

TOID_TYPE_NUM_OF(TOID\ oid)

TOID_VALID(TOID\ oid)

OID_INSTANCEOF(PMEMoid\ oid,\ TYPE)

TOID_ASSIGN(TOID\ oid,\ VALUE)

TOID_IS_NULL(TOID\ oid)

TOID_EQUALS(TOID\ lhs,\ TOID\ rhs)

TOID_TYPEOF(TOID\ "\ oid)

DIRECT_RW(TOID\ oid)

DIRECT_RO(TOID\ oid)

D_RW(TOID\ oid)

D_RO(TOID\ oid)
\f[]
.fi
.SS Layout declaration:
.IP
.nf
\f[C]
POBJ_LAYOUT_BEGIN(layout)

POBJ_LAYOUT_TOID(layout,\ TYPE)

POBJ_LAYOUT_ROOT(layout,\ ROOT_TYPE)

POBJ_LAYOUT_NAME(layout)

POBJ_LAYOUT_END(layout)

POBJ_LAYOUT_TYPES_NUM(layout)
\f[]
.fi
.SS Non\-transactional atomic allocations:
.IP
.nf
\f[C]
typedef\ int\ (*pmemobj_constr)(PMEMobjpool\ *pop,\ void\ *ptr,\ void\ *arg);

int\ pmemobj_alloc(
\ \ \ \ PMEMobjpool\ *pop,\ PMEMoid\ *oidp,\ size_t\ size,
\ \ \ \ uint64_t\ type_num,\ pmemobj_constr\ constructor,\ void\ *arg);

int\ pmemobj_zalloc(PMEMobjpool\ *pop,\ PMEMoid\ *oidp,\ size_t\ size,\ uint64_t\ type_num);

int\ pmemobj_realloc(PMEMobjpool\ *pop,\ PMEMoid\ *oidp,\ size_t\ size,\ uint64_t\ type_num);

int\ pmemobj_zrealloc(PMEMobjpool\ *pop,\ PMEMoid\ *oidp,\ size_t\ size,\ uint64_t\ type_num);

void\ pmemobj_free(PMEMoid\ *oidp);

int\ pmemobj_strdup(PMEMobjpool\ *pop,\ PMEMoid\ *oidp,\ const\ char\ *s,\ uint64_t\ type_num);

size_t\ pmemobj_alloc_usable_size(PMEMoid\ oid);

PMEMobjpool\ *pmemobj_pool_by_oid(PMEMoid\ oid);

PMEMobjpool\ *pmemobj_pool_by_ptr(const\ void\ *addr);

void\ *pmemobj_direct(PMEMoid\ oid);

uint64_t\ pmemobj_type_num(PMEMoid\ oid);

POBJ_NEW(PMEMobjpool\ *pop,\ TOID\ *oidp,\ TYPE,\ pmemobj_constr\ constructor,\ void\ *arg)

POBJ_ALLOC(
\ \ \ \ PMEMobjpool\ *pop,\ TOID\ *oidp,
\ \ \ \ TYPE,\ size_t\ size,\ pmemobj_constr\ constructor,\ void\ *arg)

POBJ_ZNEW(PMEMobjpool\ *pop,\ TOID\ *oidp,\ TYPE)

POBJ_ZALLOC(PMEMobjpool\ *pop,\ TOID\ *oidp,\ TYPE,\ size_t\ size)

POBJ_REALLOC(PMEMobjpool\ *pop,\ TOID\ *oidp,\ TYPE,\ size_t\ size)

POBJ_ZREALLOC(PMEMobjpool\ *pop,\ TOID\ *oidp,\ TYPE,\ size_t\ size)

POBJ_FREE(TOID\ *oidp)
\f[]
.fi
.SS Root object management:
.IP
.nf
\f[C]
PMEMoid\ pmemobj_root(PMEMobjpool\ *pop,\ size_t\ size);

PMEMoid\ pmemobj_root_construct(
\ \ \ \ PMEMobjpool\ *pop,\ size_t\ size,
\ \ \ \ pmemobj_constr\ constructor,\ void\ *arg);

size_t\ pmemobj_root_size(PMEMobjpool\ *pop);

POBJ_ROOT(PMEMobjpool\ *pop,\ TYPE)
\f[]
.fi
.SS Object containers:
.IP
.nf
\f[C]
PMEMoid\ pmemobj_first(PMEMobjpool\ *pop);

PMEMoid\ pmemobj_next(PMEMoid\ oid);

POBJ_FIRST_TYPE_NUM(PMEMobjpool\ *pop,\ uint64_t\ type_num)

POBJ_FIRST(PMEMobjpool\ *pop,\ TYPE)

POBJ_NEXT_TYPE_NUM(PMEMoid\ oid)

POBJ_NEXT(TOID\ oid)

POBJ_FOREACH(PMEMobjpool\ *pop,\ PMEMoid\ varoid)

POBJ_FOREACH_SAFE(PMEMobjpool\ *pop,\ PMEMoid\ varoid,\ PMEMoid\ nvaroid)

POBJ_FOREACH_TYPE(PMEMobjpool\ *pop,\ TOID\ var)

POBJ_FOREACH_SAFE_TYPE(PMEMobjpool\ *pop,\ TOID\ var,\ TOID\ nvar)
\f[]
.fi
.SS Non\-transactional persistent atomic circular doubly\-linked list:
.IP
.nf
\f[C]
int\ pmemobj_list_insert(
\ \ \ \ PMEMobjpool\ *pop,\ size_t\ pe_offset,
\ \ \ \ void\ *head,\ PMEMoid\ dest,\ int\ before,\ PMEMoid\ oid);

PMEMoid\ pmemobj_list_insert_new(
\ \ \ \ PMEMobjpool\ *pop,\ size_t\ pe_offset,
\ \ \ \ void\ *head,\ PMEMoid\ dest,
\ \ \ \ int\ before,\ size_t\ size,
\ \ \ \ uint64_t\ type_num,\ pmemobj_constr\ constructor,
\ \ \ \ void\ *arg);

int\ pmemobj_list_remove(
\ \ \ \ PMEMobjpool\ *pop,\ size_t\ pe_offset,
\ \ \ \ void\ *head,\ PMEMoid\ oid,\ int\ free);

int\ pmemobj_list_move(
\ \ \ \ PMEMobjpool\ *pop,
\ \ \ \ size_t\ pe_old_offset,\ void\ *head_old,
\ \ \ \ size_t\ pe_new_offset,\ void\ *head_new,
\ \ \ \ PMEMoid\ dest,\ int\ before,\ PMEMoid\ oid);

POBJ_LIST_ENTRY(TYPE)

POBJ_LIST_HEAD(HEADNAME,\ TYPE)

POBJ_LIST_FIRST(POBJ_LIST_HEAD\ *head)

POBJ_LIST_NEXT(TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)

POBJ_LIST_LAST(POBJ_LIST_HEAD\ *head,\ POBJ_LIST_ENTRY\ FIELD)

POBJ_LIST_PREV(TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)

POBJ_LIST_DEST_TAIL

POBJ_LIST_EMPTY(POBJ_LIST_HEAD\ *head)

POBJ_LIST_DEST_HEAD

POBJ_LIST_FOREACH(TOID\ var,\ POBJ_LIST_HEAD\ *head,\ POBJ_LIST_ENTRY\ FIELD)

POBJ_LIST_FOREACH_REVERSE(TOID\ var,\ POBJ_LIST_HEAD\ *head,\ POBJ_LIST_ENTRY\ FIELD)

POBJ_LIST_INSERT_HEAD(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)

POBJ_LIST_INSERT_TAIL(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)

POBJ_LIST_INSERT_AFTER(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ TOID\ listelm,\ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)

POBJ_LIST_INSERT_BEFORE(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ TOID\ listelm,\ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)

POBJ_LIST_INSERT_NEW_HEAD(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ POBJ_LIST_ENTRY\ FIELD,\ size_t\ size,
\ \ \ \ pmemobj_constr\ constructor,\ void\ *arg)

POBJ_LIST_INSERT_NEW_TAIL(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ POBJ_LIST_ENTRY\ FIELD,\ size_t\ size,
\ \ \ \ void\ (*constructor)(PMEMobjpool\ *pop,\ void\ *ptr,\ void\ *arg),
\ \ \ \ void\ *arg)

POBJ_LIST_INSERT_NEW_AFTER(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ TOID\ listelm,\ POBJ_LIST_ENTRY\ FIELD,\ size_t\ size,
\ \ \ \ pmemobj_constr\ constructor,\ void\ *arg)

POBJ_LIST_INSERT_NEW_BEFORE(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ TOID\ listelm,\ POBJ_LIST_ENTRY\ FIELD,\ size_t\ size,
\ \ \ \ pmemobj_constr\ constructor,\ void\ *arg)

POBJ_LIST_REMOVE(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)

POBJ_LIST_REMOVE_FREE(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)

POBJ_LIST_MOVE_ELEMENT_HEAD(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ POBJ_LIST_HEAD\ *head_new,\ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD,
\ \ \ \ POBJ_LIST_ENTRY\ field_new)

POBJ_LIST_MOVE_ELEMENT_TAIL(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ POBJ_LIST_HEAD\ *head_new,\ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD,
\ \ \ \ POBJ_LIST_ENTRY\ field_new)

POBJ_LIST_MOVE_ELEMENT_AFTER(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ POBJ_LIST_HEAD\ *head_new,\ TOID\ listelm,\ TOID\ elm,
\ \ \ \ POBJ_LIST_ENTRY\ FIELD,\ POBJ_LIST_ENTRY\ field_new)

POBJ_LIST_MOVE_ELEMENT_BEFORE(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ POBJ_LIST_HEAD\ *head_new,\ TOID\ listelm,\ TOID\ elm,
\ \ \ \ POBJ_LIST_ENTRY\ FIELD,\ POBJ_LIST_ENTRY\ field_new)
\f[]
.fi
.SS Transactional object manipulation:
.IP
.nf
\f[C]
enum\ tx_stage\ pmemobj_tx_stage(void);

int\ pmemobj_tx_begin(PMEMobjpool\ *pop,\ jmp_buf\ *env,\ enum\ tx_lock,\ ...);

int\ pmemobj_tx_lock(enum\ tx_lock\ lock_type,\ void\ *lockp);

void\ pmemobj_tx_abort(int\ errnum);

void\ pmemobj_tx_commit(void);

int\ pmemobj_tx_end(void);

int\ pmemobj_tx_errno(void);

void\ pmemobj_tx_process(void);

int\ pmemobj_tx_add_range(PMEMoid\ oid,\ uint64_t\ off,\ size_t\ size);

int\ pmemobj_tx_add_range_direct(const\ void\ *ptr,\ size_t\ size);

PMEMoid\ pmemobj_tx_alloc(size_t\ size,\ uint64_t\ type_num);

PMEMoid\ pmemobj_tx_zalloc(size_t\ size,\ uint64_t\ type_num);

PMEMoid\ pmemobj_tx_realloc(PMEMoid\ oid,\ size_t\ size,\ uint64_t\ type_num);

PMEMoid\ pmemobj_tx_zrealloc(PMEMoid\ oid,\ size_t\ size,\ uint64_t\ type_num);

PMEMoid\ pmemobj_tx_strdup(const\ char\ *s,\ uint64_t\ type_num);

int\ pmemobj_tx_free(PMEMoid\ oid);

TX_BEGIN_LOCK(PMEMobjpool\ *pop,\ ...)

TX_BEGIN(PMEMobjpool\ *pop)

TX_ONABORT

TX_ONCOMMIT

TX_FINALLY

TX_END

TX_ADD(TOID\ o)

TX_ADD_FIELD(TOID\ o,\ FIELD)

TX_ADD_DIRECT(TYPE\ *p)

TX_ADD_FIELD_DIRECT(TYPE\ *p,\ FIELD)

TX_NEW(TYPE)

TX_ALLOC(TYPE,\ size_t\ size)

TX_ZNEW(TYPE)

TX_ZALLOC(TYPE,\ size_t\ size)

TX_REALLOC(TOID\ o,\ size_t\ size)

TX_ZREALLOC(TOID\ o,\ size_t\ size)

TX_STRDUP(const\ char\ *s,\ uint64_t\ type_num)

TX_FREE(TOID\ o)

TX_SET(TOID\ o,\ FIELD,\ VALUE)

TX_SET_DIRECT(TYPE\ *p,\ FIELD,\ VALUE)

TX_MEMCPY(void\ *dest,\ const\ void\ *src,\ size_t\ num)

TX_MEMSET(void\ *dest,\ int\ c,\ size_t\ num)
\f[]
.fi
.SS Library API versioning:
.IP
.nf
\f[C]
const\ char\ *pmemobj_check_version(unsigned\ major_required,\ unsigned\ minor_required);
\f[]
.fi
.SS Managing library behavior:
.IP
.nf
\f[C]
void\ pmemobj_set_funcs(
\ \ \ \ void\ *(*malloc_func)(size_t\ size),
\ \ \ \ void\ (*free_func)(void\ *ptr),
\ \ \ \ void\ *(*realloc_func)(void\ *ptr,\ size_t\ size),
\ \ \ \ char\ *(*strdup_func)(const\ char\ *s));

int\ pmemobj_check(const\ char\ *path,\ const\ char\ *layout);
\f[]
.fi
.SS Error handling:
.IP
.nf
\f[C]
const\ char\ *pmemobj_errormsg(void);
\f[]
.fi
.SS DESCRIPTION
.PP
\f[B]libpmemobj\f[] provides a transactional object store in
\f[I]persistent memory\f[] (pmem).
This library is intended for applications using direct access storage
(DAX), which is storage that supports load/store access without paging
blocks from a block storage device.
Some types of \f[I]non\-volatile memory DIMMs\f[] (NVDIMMs) provide this
type of byte addressable access to storage.
A \f[I]persistent memory aware file system\f[] is typically used to
expose the direct access to applications.
Memory mapping a file from this type of file system results in the
load/store, non\-paged access to pmem.
\f[B]libpmemobj\f[] builds on this type of memory mapped file.
.PP
This library is for applications that need a transactions and persistent
memory management.
The \f[B]libpmemobj\f[] requires a \f[C]\-std=gnu99\f[] compilation flag
to build properly.
This library builds on the low\-level pmem support provided by
\f[B]libpmem\f[], handling the transactional updates, flushing changes
to persistence, and recovery for the application.
.PP
\f[B]libpmemobj\f[] is one of a collection of persistent memory
libraries available, the others are:
.IP \[bu] 2
\f[B]libpmemblk\f[](3), providing pmem\-resident arrays of fixed\-sized
blocks with atomic updates.
.IP \[bu] 2
\f[B]libpmemlog\f[](3), providing a pmem\-resident log file.
.IP \[bu] 2
\f[B]libpmem\f[](3), low\-level persistent memory support.
.PP
Under normal usage, \f[B]libpmemobj\f[] will never print messages or
intentionally cause the process to exit.
The only exception to this is the debugging information, when enabled,
as described under \f[B]DEBUGGING AND ERROR HANDLING\f[] below.
.SS MOST COMMONLY USED FUNCTIONS
.PP
To use the pmem\-resident transactional object store provided by
\f[B]libpmemobj\f[], a \f[I]memory pool\f[] is first created.
This is done with the \f[C]pmemobj_create()\f[] function described in
this section.
The other functions described in this section then operate on the
resulting memory pool.
.PP
Once created, the memory pool is represented by an opaque handle, of
type \f[C]PMEMobjpool\ *\f[], which is passed to most of the other
functions in this section.
Internally, \f[B]libpmemobj\f[] will use either \f[C]pmem_persist()\f[]
or \f[B]msync\f[](2) when it needs to flush changes, depending on
whether the memory pool appears to be persistent memory or a regular
file (see the \f[C]pmem_is_pmem()\f[] function in \f[B]libpmem\f[](3)
for more information).
There is no need for applications to flush changes directly when using
the obj memory API provided by \f[B]libpmemobj\f[].
.IP
.nf
\f[C]
PMEMobjpool\ *pmemobj_open(const\ char\ *path,\ const\ char\ *layout);
\f[]
.fi
.PP
The \f[C]pmemobj_open()\f[] function opens an existing object store
memory pool, returning a memory pool handle used with most of the
functions in this section.
\f[C]path\f[] must be an existing file containing a pmemobj memory pool
as created by \f[C]pmemobj_create()\f[].
If \f[C]layout\f[] is non\-\f[C]NULL\f[], it is compared to the layout
name provided to \f[C]pmemobj_create()\f[] when the pool was first
created.
This can be used to verify the layout of the pool matches what was
expected.
The application must have permission to open the file and memory map it
with read/write permissions.
If an error prevents the pool from being opened, or if the given
\f[C]layout\f[] does not match the pool's layout,
\f[C]pmemobj_open()\f[] returns \f[C]NULL\f[] and sets \f[C]errno\f[]
appropriately.
.IP
.nf
\f[C]
PMEMobjpool\ *pmemobj_create(
\ \ \ \ const\ char\ *path,\ const\ char\ *layout,
\ \ \ \ size_t\ poolsize,\ mode_t\ mode);
\f[]
.fi
.PP
The \f[C]pmemobj_create()\f[] function creates a transactional object
store with the given total \f[C]poolsize\f[].
\f[C]path\f[] specifies the name of the memory pool file to be created.
\f[C]layout\f[] specifies the application's layout type in the form of a
string.
The layout name is not interpreted by \f[B]libpmemobj\f[], but may be
used as a check when \f[C]pmemobj_open()\f[] is called.
The layout name, including the null termination, cannot be longer than
\f[C]PMEMOBJ_MAX_LAYOUT\f[] as defined in \f[C]<libpmemobj.h>\f[].
It is allowed to pass \f[C]NULL\f[] as \f[C]layout\f[], which is
equivalent for using an empty string as a layout name.
\f[C]mode\f[] specifies the permissions to use when creating the file as
described by \f[B]creat\f[](2).
The memory pool file is fully allocated to the size \f[C]poolsize\f[]
using \f[B]posix_fallocate\f[](3).
The caller may choose to take responsibility for creating the memory
pool file by creating it before calling \f[C]pmemobj_create()\f[] and
then specifying \f[I]poolsize\f[] as zero.
In this case \f[C]pmemobj_create()\f[] will take the pool size from the
size of the existing file and will verify that the file appears to be
empty by searching for any non\-zero data in the pool header at the
beginning of the file.
The minimum file size allowed by the library for a transactional object
store is defined in \f[C]<libpmemobj.h>\f[] as
\f[C]PMEMOBJ_MIN_POOL\f[].
.IP
.nf
\f[C]
void\ pmemobj_close(PMEMobjpool\ *pop);
\f[]
.fi
.PP
The \f[C]pmemobj_close()\f[] function closes the memory pool indicated
by \f[C]pop\f[] and deletes the memory pool handle.
The object store itself lives on in the file that contains it and may be
re\-opened at a later time using \f[C]pmemobj_open()\f[] as described
above.
.SS LOW\-LEVEL MEMORY MANIPULATION
.PP
The \f[B]libpmemobj\f[] specific low\-level memory manipulation
functions leverage the knowledge of the additional configuration options
available for \f[B]libpmemobj\f[] pools, such as replication.
They also take advantage of the type of storage behind the pool and use
appropriate flush/drain functions.
It is advised to use these functions in conjunction with
\f[B]libpmemobj\f[] objects, instead of using low\-level memory
manipulations functions from \f[B]libpmem\f[].
.IP
.nf
\f[C]
void\ pmemobj_persist(PMEMobjpool\ *pop,\ const\ void\ *addr,\ size_t\ len);
\f[]
.fi
.PP
Forces any changes in the range [\f[C]addr\f[],
\f[C]addr\f[]+\f[C]len\f[]) to be stored durably in persistent memory.
Internally this may call either \f[C]pmem_msync()\f[] or
\f[C]pmem_persist()\f[].
There are no alignment restrictions on the range described by
\f[C]addr\f[] and \f[C]len\f[], but \f[C]pmemobj_persist()\f[] may
expand the range as necessary to meet platform alignment requirements.
.RS
.PP
WARNING: Like \f[B]msync\f[](2), there is nothing atomic or
transactional about this call.
Any unwritten stores in the given range will be written, but some stores
may have already been written by virtue of normal cache
eviction/replacement policies.
Correctly written code must not depend on stores waiting until
\f[C]pmemobj_persist()\f[] is called to become persistent \[en] they can
become persistent at any time before \f[C]pmemobj_persist()\f[] is
called.
.RE
.IP
.nf
\f[C]
void\ pmemobj_flush(PMEMobjpool\ *pop,\ const\ void\ *addr,\ size_t\ len);
\f[]
.fi
.IP
.nf
\f[C]
void\ pmemobj_drain(PMEMobjpool\ *pop);
\f[]
.fi
.PP
These functions provide partial versions of the
\f[C]pmemobj_persist()\f[] function described above.
\f[C]pmemobj_persist()\f[] can be thought of as this:
.IP
.nf
\f[C]
void
pmemobj_persist(PMEMobjpool\ *pop,\ const\ void\ *addr,\ size_t\ len)
{
\ \ \ \ /*\ flush\ the\ processor\ caches\ */
\ \ \ \ pmemobj_flush(pop,\ addr,\ len);

\ \ \ /*\ wait\ for\ any\ pmem\ stores\ to\ drain\ from\ HW\ buffers\ */
\ \ \ \ pmemobj_drain(pop);
}
\f[]
.fi
.PP
These functions allow advanced programs to create their own variations
of \f[C]pmemobj_persist()\f[].
For example, a program that needs to flush several discontiguous ranges
can call \f[C]pmemobj_flush()\f[] for each range and then follow up by
calling \f[C]pmemobj_drain()\f[] once.
For more information on partial flushing operations see the
\f[B]libpmem\f[] manpage.
.IP
.nf
\f[C]
void\ *pmemobj_memcpy_persist(
\ \ \ \ PMEMobjpool\ *pop,\ void\ *dest,
\ \ \ \ const\ void\ *src,\ size_t\ len);
\f[]
.fi
.IP
.nf
\f[C]
void\ *pmemobj_memset_persist(PMEMobjpool\ *pop,\ void\ *dest,\ int\ c,\ size_t\ len);
\f[]
.fi
.PP
The \f[C]pmemobj_memcpy_persist()\f[], and
\f[C]pmemobj_memset_persist()\f[], functions provide the same memory
copying as their namesakes \f[B]memcpy\f[](3), and \f[B]memset\f[](3),
and ensure that the result has been flushed to persistence before
returning.
For example, the following code is functionally equivalent to
\f[C]pmemobj_memcpy_persist()\f[]:
.IP
.nf
\f[C]
void\ *
pmemobj_memcpy_persist(PMEMobjpool\ *pop,\ void\ *dest,
\ \ \ \ const\ void\ *src,\ size_t\ len)
{
\ \ \ \ void\ *retval\ =\ memcpy(pop,\ dest,\ src,\ len);

\ \ \ pmemobj_persist(pop,\ dest,\ len);

\ \ \ return\ retval;
}
\f[]
.fi
.SS POOL SETS AND REPLICAS
.PP
Depending on the configuration of the system, the available space of
non\-volatile memory space may be divided into multiple memory devices.
In such case, the maximum size of the transactional object store could
be limited by the capacity of a single memory device.
The \f[B]libpmemobj\f[] allows building transactional object stores
spanning multiple memory devices by creation of persistent memory pools
consisting of multiple files, where each part of such a \f[I]pool
set\f[] may be stored on different pmem\-aware filesystem.
.PP
To improve reliability and eliminate the single point of failure, all
the changes of the data stored in the persistent memory pool could be
also automatically written to local pool replicas, thereby providing a
backup for a persistent memory pool by producing a \f[I]mirrored pool
set\f[].
In practice, the pool replicas may be considered binary copies of the
“master” pool set.
.PP
Creation of all the parts of the pool set and the associated replica
sets can be done with the \f[C]pmemobj_create()\f[] function or by using
the \f[B]pmempool\f[](1) utility.
.PP
When creating the pool set consisting of multiple files, or when
creating the replicated pool set, the \f[C]path\f[] argument passed to
\f[C]pmemobj_create()\f[] must point to the special \f[I]set\f[] file
that defines the pool layout and the location of all the parts of the
pool set.
The \f[C]poolsize\f[] argument must be 0.
The meaning of \f[C]layout\f[] and \f[C]mode\f[] arguments doesn't
change, except that the same \f[C]mode\f[] is used for creation of all
the parts of the pool set and replicas.
If the error prevents any of the pool set files from being created,
\f[C]pmemobj_create()\f[] returns \f[C]NULL\f[] and sets \f[C]errno\f[]
appropriately.
.PP
When opening the pool set consisting of multiple files, or when opening
the replicated pool set, the \f[C]path\f[] argument passed to
\f[C]pmemobj_open()\f[] must not point to the pmemobj memory pool file,
but to the same \f[I]set\f[] file that was used for the pool set
creation.
If an error prevents any of the pool set files from being opened, or if
the actual size of any file does not match the corresponding part size
defined in \f[I]set\f[] file \f[C]pmemobj_open()\f[] returns
\f[C]NULL\f[] and sets \f[C]errno\f[] appropriately.
.PP
The set file is a plain text file, which must start with the line
containing a \f[I]PMEMPOOLSET\f[] string, followed by the specification
of all the pool parts in the next lines.
For each part, the file size and the absolute path must be provided.
The size has to be compliant with the format specified in IEC 80000\-13,
IEEE 1541 or the Metric Interchange Format.
Standards accept SI units with obligatory B \- kB, MB, GB, ...
(multiplier by 1000) and IEC units with optional “iB” \- KiB, MiB, GiB,
\&..., K, M, G, \&... \- (multiplier by 1024).
.PP
The minimum file size of each part of the pool set is the same as the
minimum size allowed for a transactional object store consisting of one
file.
It is defined in \f[C]<libpmemobj.h>\f[] as \f[C]PMEMOBJ_MIN_POOL\f[].
Sections defining the replica sets are optional.
There could be multiple replica sections and each must start with the
line containing a \f[I]REPLICA\f[] string.
Lines starting with “#” character are ignored.
.PP
Here is the example “myobjpool.set” file:
.IP
.nf
\f[C]
PMEMPOOLSET
100G\ /mountpoint0/myfile.part0
200G\ /mountpoint1/myfile.part1
400G\ /mountpoint2/myfile.part2

REPLICA
500G\ /mountpoint3/mymirror.part0
200G\ /mountpoint4/mymirror.part1
\f[]
.fi
.PP
The files in the set may be created by running the following command:
.IP
.nf
\f[C]
pmempool\ create\ \-\-layout="mylayout"\ obj\ myobjpool.set
\f[]
.fi
.SS LOCKING
.PP
\f[B]libpmemobj\f[] provides several types of synchronization
primitives, designed so as to use them with persistent memory.
The locks are not dynamically allocated, but embedded in pmem\-resident
objects.
For performance reasons, they are also padded up to 64 bytes (cache line
size).
.PP
Pmem\-aware locks implementation is based on the standard POSIX Thread
Library, as described in \f[B]pthread_mutex\f[](3),
\f[B]pthread_rwlock\f[](3) and \f[B]pthread_cond\f[](3).
They provide semantics similar to standard \f[B]pthread\f[] locks,
except that they are considered initialized by zeroing them.
So allocating the locks with \f[C]pmemobj_zalloc()\f[] or
\f[C]pmemobj_tx_zalloc()\f[] does not require another initialization
step.
.PP
The fundamental property of pmem\-aware locks is their automatic
reinitialization every time the persistent object store pool is open.
This way, all the pmem\-aware locks may be considered initialized
(unlocked) right after opening the pool, regardless of their state at
the time the pool was closed for the last time.
.PP
Pmem\-aware mutexes, read/write locks and condition variables must be
declared with one of the \f[C]PMEMmutex\f[], \f[C]PMEMrwlock\f[], or
\f[C]PMEMcond\f[] type respectively.
.IP
.nf
\f[C]
void\ pmemobj_mutex_zero(PMEMobjpool\ *pop,\ PMEMmutex\ *mutexp);
\f[]
.fi
.PP
The \f[C]pmemobj_mutex_zero()\f[] function explicitly initializes
pmem\-aware mutex pointed by \f[C]mutexp\f[] by zeroing it.
Initialization is not necessary if the object containing the mutex has
been allocated using one of \f[C]pmemobj_zalloc()\f[] or
\f[C]pmemobj_tx_zalloc()\f[] functions.
.IP
.nf
\f[C]
int\ pmemobj_mutex_lock(PMEMobjpool\ *pop,\ PMEMmutex\ *mutexp);
\f[]
.fi
.PP
The \f[C]pmemobj_mutex_lock()\f[] function locks pmem\-aware mutex
pointed by \f[C]mutexp\f[].
If the mutex is already locked, the calling thread will block until the
mutex becomes available.
If this is the first use of the mutex since opening of the pool
\f[C]pop\f[], the mutex is automatically reinitialized and then locked.
.IP
.nf
\f[C]
int\ pmemobj_mutex_timedlock(
\ \ \ \ PMEMobjpool\ *pop,
\ \ \ \ PMEMmutex\ *restrictrestrict\ mutexp,
\ \ \ \ const\ struct\ timespec\ *restrict\ abs_timeout);
\f[]
.fi
.PP
The \f[C]pmemobj_mutex_timedlock()\f[] performs the same action as
\f[C]pmemobj_mutex_lock()\f[], but will not wait beyond
\f[C]abs_timeout\f[] to obtain the lock before returning.
.IP
.nf
\f[C]
int\ pmemobj_mutex_trylock(PMEMobjpool\ *pop,\ PMEMmutex\ *mutexp);
\f[]
.fi
.PP
The \f[C]pmemobj_mutex_trylock()\f[] function locks pmem\-aware mutex
pointed by \f[C]mutexp\f[].
If the mutex is already locked, \f[C]pthread_mutex_trylock()\f[] will
not block waiting for the mutex, but will return an error condition.
If this is the first use of the mutex since opening of the pool
\f[C]pop\f[] the mutex is automatically reinitialized and then locked.
.IP
.nf
\f[C]
int\ pmemobj_mutex_unlock(PMEMobjpool\ *pop,\ PMEMmutex\ *mutexp);
\f[]
.fi
.PP
The \f[C]pmemobj_mutex_unlock()\f[] function unlocks an acquired
pmem\-aware mutex pointed by \f[C]mutexp\f[].
Undefined behavior follows if a thread tries to unlock a mutex that has
not been locked by it, or if a thread tries to release a mutex that is
already unlocked or not initialized.
.IP
.nf
\f[C]
void\ pmemobj_rwlock_zero(PMEMobjpool\ *pop,\ PMEMrwlock\ *rwlockp);
\f[]
.fi
.PP
The \f[C]pmemobj_rwlock_zero()\f[] function is used to explicitly
initialize pmem\-aware read/write lock pointed by \f[C]rwlockp\f[] by
zeroing it.
Initialization is not necessary if the object containing the lock has
been allocated using one of \f[C]pmemobj_zalloc()\f[] or
\f[C]pmemobj_tx_zalloc()\f[] functions.
.IP
.nf
\f[C]
int\ pmemobj_rwlock_rdlock(PMEMobjpool\ *pop,\ PMEMrwlock\ *rwlockp);
\f[]
.fi
.PP
The \f[C]pmemobj_rwlock_rdlock()\f[] function acquires a read lock on
\f[C]rwlockp\f[] provided that lock is not presently held for writing
and no writer threads are presently blocked on the lock.
If the read lock cannot be immediately acquired, the calling thread
blocks until it can acquire the lock.
If this is the first use of the lock since opening of the pool
\f[C]pop\f[], the lock is automatically reinitialized and then acquired.
.IP
.nf
\f[C]
int\ pmemobj_rwlock_timedrdlock(
\ \ \ \ PMEMobjpool\ *pop,\ PMEMrwlock\ *restrict\ rwlockp,
\ \ \ \ const\ struct\ timespec\ *restrict\ abs_timeout);
\f[]
.fi
.PP
The \f[C]pmemobj_rwlock_timedrdlock\f[]() performs the same action, but
will not wait beyond \f[C]abs_timeout\f[] to obtain the lock before
returning.
.PP
A thread may hold multiple concurrent read locks.
If so, \f[C]pmemobj_rwlock_unlock()\f[] must be called once for each
lock obtained.
.PP
The results of acquiring a read lock while the calling thread holds a
write lock are undefined.
.IP
.nf
\f[C]
int\ pmemobj_rwlock_wrlock(PMEMobjpool\ *pop,\ PMEMrwlock\ *rwlockp);
\f[]
.fi
.PP
The \f[C]pmemobj_rwlock_wrlock()\f[] function blocks until a write lock
can be acquired against lock pointed by \f[C]rwlockp\f[].
If this is the first use of the lock since opening of the pool
\f[C]pop\f[], the lock is automatically reinitialized and then acquired.
.IP
.nf
\f[C]
int\ pmemobj_rwlock_timedwrlock(
\ \ \ \ PMEMobjpool\ *pop,\ PMEMrwlock\ *restrict\ rwlockp,
\ \ \ \ const\ struct\ timespec\ *restrict\ abs_timeout);
\f[]
.fi
.PP
The \f[C]pmemobj_rwlock_timedwrlock()\f[] performs the same action, but
will not wait beyond \f[C]abs_timeout\f[] to obtain the lock before
returning.
.IP
.nf
\f[C]
int\ pmemobj_rwlock_tryrdlock(PMEMobjpool\ *pop,\ PMEMrwlock\ *rwlockp);
\f[]
.fi
.PP
The \f[C]pmemobj_rwlock_tryrdlock()\f[] function performs the same
action as \f[C]pmemobj_rwlock_rdlock()\f[], but does not block if the
lock cannot be immediately obtained.
The results are undefined if the calling thread already holds the lock
at the time the call is made.
.IP
.nf
\f[C]
int\ pmemobj_rwlock_trywrlock(PMEMobjpool\ *pop,\ PMEMrwlock\ *rwlockp);
\f[]
.fi
.PP
The \f[C]pmemobj_rwlock_trywrlock()\f[] function performs the same
action as \f[C]pmemobj_rwlock_wrlock()\f[], but does not block if the
lock cannot be immediately obtained.
The results are undefined if the calling thread already holds the lock
at the time the call is made.
.IP
.nf
\f[C]
int\ pmemobj_rwlock_unlock(PMEMobjpool\ *pop,\ PMEMrwlock\ *rwlockp);
\f[]
.fi
.PP
The \f[C]pmemobj_rwlock_unlock()\f[] function is used to release the
read/write lock previously obtained by \f[C]pmemobj_rwlock_rdlock()\f[],
\f[C]pmemobj_rwlock_wrlock()\f[], \f[C]pthread_rwlock_tryrdlock()\f[],
or \f[C]pmemobj_rwlock_trywrlock()\f[].
.IP
.nf
\f[C]
void\ pmemobj_cond_zero(PMEMobjpool\ *pop,\ PMEMcond\ *condp);
\f[]
.fi
.PP
The \f[C]pmemobj_cond_zero()\f[] function explicitly initializes
pmem\-aware condition variable by zeroing it.
Initialization is not necessary if the object containing the condition
variable has been allocated using one of \f[C]pmemobj_zalloc()\f[] or
\f[C]pmemobj_tx_zalloc()\f[] functions.
.IP
.nf
\f[C]
int\ pmemobj_cond_broadcast(PMEMobjpool\ *pop,\ PMEMcond\ *condp);
\f[]
.fi
.IP
.nf
\f[C]
int\ pmemobj_cond_signal(PMEMobjpool\ *pop,\ PMEMcond\ *condp);
\f[]
.fi
.PP
The difference between \f[C]pmemobj_cond_broadcast()\f[] and
\f[C]pmemobj_cond_signal()\f[] is that the former unblocks all threads
waiting for the condition variable, whereas the latter blocks only one
waiting thread.
If no threads are waiting on \f[C]condp\f[], neither function has any
effect.
If more than one thread is blocked on a condition variable, the used
scheduling policy determines the order in which threads are unblocked.
The same mutex used for waiting must be held while calling either
function.
Although neither function strictly enforces this requirement, undefined
behavior may follow if the mutex is not held.
.IP
.nf
\f[C]
int\ pmemobj_cond_timedwait(
\ \ \ \ PMEMobjpool\ *pop,\ PMEMcond\ *restrict\ condp,
\ \ \ \ PMEMmutex\ *restrict\ mutexp,\ const\ struct\ timespec\ *restrict\ abs_timeout);
\f[]
.fi
.IP
.nf
\f[C]
int\ pmemobj_cond_wait(
\ \ \ \ PMEMobjpool\ *pop,\ PMEMcond\ *condp,
\ \ \ \ PMEMmutex\ *restrict\ mutexp);
\f[]
.fi
.PP
The \f[C]pmemobj_cond_timedwait()\f[] and \f[C]pmemobj_cond_wait()\f[]
functions shall block on a condition variable.
They shall be called with mutex locked by the calling thread or
undefined behavior results.
These functions atomically release mutex pointed by \f[I]mutexp\f[] and
cause the calling thread to block on the condition variable
\f[C]condp\f[]; atomically here means “atomically with respect to access
by another thread to the mutex and then the condition variable”.
That is, if another thread is able to acquire the mutex after the
about\-to\-block thread has released it, then a subsequent call to
\f[C]pmemobj_cond_broadcast()\f[] or \f[C]pmemobj_cond_signal()\f[] in
that thread shall behave as if it were issued after the about\-to\-block
thread has blocked.
Upon successful return, the mutex shall have been locked and shall be
owned by the calling thread.
.SS PERSISTENT OBJECTS
.PP
Each object stored in persistent memory pool is represented by an object
handle of type \f[C]PMEMoid\f[].
In practice, such a handle is a unique Object IDentifier (\f[C]OID\f[])
of a global scope, which means that two objects from different pools may
not have the same \f[C]OID\f[].
The special \f[C]OID_NULL\f[] macro defines a \f[C]NULL\f[]\-like handle
that does not represent any object.
The size of a single object is limited by a
\f[C]PMEMOBJ_MAX_ALLOC_SIZE\f[].
Thus an allocation with requested size greater than this value will
fail.
.PP
An \f[C]OID\f[] cannot be considered as a direct pointer to an object.
Each time the program attempts to read or write object data, it must
obtain the current memory address of the object by converting its
\f[C]OID\f[] into the pointer.
.PP
In contrast to the memory address, the \f[C]OID\f[] value for given
object does not change during the life of an object (except for realloc
operation), and remains valid after closing and reopening the pool.
For this reason, if an object contains a reference to another persistent
object \- necessary to build some kind of a linked data structure \- it
shall never use memory address of an object, but its \f[C]OID\f[].
.IP
.nf
\f[C]
void\ pmemobj_direct(PMEMoid\ oid);
\f[]
.fi
.PP
The \f[C]pmemobj_direct()\f[] function returns a pointer to an object
represented by \f[I]oid\f[].
If \f[C]OID_NULL\f[] is passed as an argument, function returns
\f[C]NULL\f[].
.IP
.nf
\f[C]
uint64_t\ pmemobj_type_num(PMEMoid\ oid);
\f[]
.fi
.PP
The \f[C]pmemobj_type_num()\f[] function returns a type number of the
object represented by \f[I]oid\f[].
.IP
.nf
\f[C]
PMEMobjpool\ *pmemobj_pool_by_oid(PMEMoid\ oid);
\f[]
.fi
.PP
The \f[C]pmemobj_pool_by_oid()\f[] function returns a handle to the pool
which contains the object represented by \f[I]oid\f[].
If the pool is not open or \f[C]OID_NULL\f[] is passed as an argument,
function returns \f[C]NULL\f[].
.IP
.nf
\f[C]
PMEMobjpool\ *pmemobj_pool_by_ptr(const\ void\ *addr);
\f[]
.fi
.PP
The \f[C]pmemobj_pool_by_ptr()\f[] function returns a handle to the pool
which contains the address.
If the address does not belong to any open pool, function returns
\f[C]NULL\f[].
.PP
At the time of allocation (or reallocation), each object may be assigned
a number representing its type.
Such a \f[I]type number\f[] may be used to arrange the persistent
objects based on their actual user\-defined structure type, thus
facilitating implementation of a simple run\-time type safety mechanism.
It also allows to iterate through all the objects of given type stored
in the persistent memory pool.
See \f[B]OBJECT CONTAINERS\f[] section for more details.
.PP
The \f[C]OID_IS_NULL\f[] macro checks if given \f[C]PMEMoid\f[]
represents a \f[C]NULL\f[] object.
.PP
The \f[C]OID_EQUALS\f[] macro compares two \f[C]PMEMoid\f[] objects.
.SS TYPE\-SAFETY
.PP
Operating on untyped object handles, as well as on direct untyped object
pointers (\f[C]void\ *\f[]) may be confusing and error prone.
To facilitate implementation of type safety mechanism,
\f[B]libpmemobj\f[] defines a set of macros that provide a static type
enforcement, catching potential errors at compile time.
For example, a compile\-time error is generated when an attempt is made
to assign a handle to an object of one type to the object handle
variable of another type of object.
.IP
.nf
\f[C]
TOID_DECLARE(TYPE,\ uint64_t\ type_num)
\f[]
.fi
.PP
The \f[C]TOID_DECLARE\f[] macro declares a typed \f[C]OID\f[] of
user\-defined type specified by argument \f[C]TYPE\f[], and with type
number specified by argument \f[C]type_num\f[].
.IP
.nf
\f[C]
TOID_DECLARE_ROOT(ROOT_TYPE)
\f[]
.fi
.PP
The \f[C]TOID_DECLARE_ROOT\f[] macro declares a typed \f[C]OID\f[] of
user\-defined type specified by argument \f[C]ROOT_TYPE\f[], and with
type number for root object \f[C]POBJ_ROOT_TYPE_NUM\f[].
.IP
.nf
\f[C]
TOID(TYPE)
\f[]
.fi
.PP
The \f[C]TOID\f[] macro declares a handle to an object of type specified
by argument \f[C]TYPE\f[], where \f[C]TYPE\f[] is the name of a
user\-defined structure.
The typed \f[C]OID\f[] must be declared first using the
\f[C]TOID_DECLARE\f[], \f[C]TOID_DECLARE_ROOT\f[],
\f[C]POBJ_LAYOUT_TOID\f[] or \f[C]POBJ_LAYOUT_ROOT\f[] macros.
.IP
.nf
\f[C]
TOID_TYPE_NUM(TYPE)
\f[]
.fi
.PP
The \f[C]TOID_TYPE_NUM\f[] macro returns a type number of the type
specified by argument \f[C]TYPE\f[].
.IP
.nf
\f[C]
TOID_TYPE_NUM_OF(TOID\ oid)
\f[]
.fi
.PP
The \f[C]TOID_TYPE_NUM_OF\f[] macro returns a type number of the object
specified by argument \f[C]oid\f[].
The type number is read from the typed \f[C]OID\f[].
.IP
.nf
\f[C]
TOID_VALID(TOID\ oid)
\f[]
.fi
.PP
The \f[C]TOID_VALID\f[] macro validates whether the type number stored
in object's metadata is equal to the type number read from typed
\f[C]OID\f[].
.IP
.nf
\f[C]
OID_INSTANCEOF(PMEMoid\ oid,\ TYPE)
\f[]
.fi
.PP
The \f[C]OID_INSTANCEOF\f[] macro checks whether the \f[C]oid\f[] is of
the type specified by argument \f[C]TYPE\f[].
.IP
.nf
\f[C]
TOID_ASSIGN(TOID\ o,\ VALUE)
\f[]
.fi
.PP
The \f[C]TOID_ASSIGN\f[] macro assigns an object handle specified by
\f[C]VALUE\f[] to the variable \f[C]o\f[].
.IP
.nf
\f[C]
TOID_IS_NULL(TOID\ o)
\f[]
.fi
.PP
The \f[C]TOID_IS_NULL\f[] macro evaluates to true if the object handle
represented by argument \f[C]o\f[] has \f[C]OID_NULL\f[] value.
.IP
.nf
\f[C]
TOID_EQUALS(TOID\ lhs,\ TOID\ rhs)
\f[]
.fi
.PP
The \f[C]TOID_EQUALS\f[] macro evaluates to true if both \f[C]lhs\f[]
and \f[C]rhs\f[] object handles are referencing the same persistent
object.
.IP
.nf
\f[C]
TOID_TYPEOF(TOID\ "\ o)
\f[]
.fi
.PP
\f[C]TOID_TYPEOF\f[] macro returns a type of object handle represented
by argument \f[C]o\f[].
.IP
.nf
\f[C]
DIRECT_RW(TOID\ oid)
\f[]
.fi
.IP
.nf
\f[C]
D_RW(TOID\ oid)
\f[]
.fi
.PP
The \f[C]DIRECT_RW()\f[] macro and its shortened form \f[C]D_RW()\f[]
return a typed write pointer (\f[C]TYPE\ *\f[]) to an object represented
by \f[C]oid\f[].
If \f[C]oid\f[] holds \f[C]OID_NULL\f[] value, the macro evaluates to
\f[C]NULL\f[].
.IP
.nf
\f[C]
DIRECT_RO(TOID\ oid)
\f[]
.fi
.IP
.nf
\f[C]
D_RO(TOID\ oid)
\f[]
.fi
.PP
The \f[C]DIRECT_RO()\f[] macro and its shortened form \f[C]D_RO()\f[]
return a typed read\-only (const) pointer (\f[C]TYPE\ *\f[]) to an
object represented by \f[C]oid\f[].
If \f[C]oid\f[] holds \f[C]OID_NULL\f[] value, the macro evaluates to
\f[C]NULL\f[].
.SS LAYOUT DECLARATION
.PP
The \f[B]libpmemobj\f[] defines a set of macros for convenient
declaration of pool's layout.
The declaration of layout consist of declaration of number of used
types.
The declared types will be assigned consecutive type numbers.
Declared types may be used in conjunction with type safety macros.
Once created the layout declaration shall not be changed unless the new
types are added at the end of the existing layout declaration.
Modifying any of existing declaration may lead to changes in type
numbers of declared types which in consequence may cause data
corruption.
.IP
.nf
\f[C]
POBJ_LAYOUT_BEGIN(LAYOUT)
\f[]
.fi
.PP
The \f[C]POBJ_LAYOUT_BEGIN\f[] macro indicates a begin of declaration of
layout.
The \f[C]LAYOUT\f[] argument is a name of layout.
This argument must be passed to all macros related to the declaration of
layout.
.IP
.nf
\f[C]
POBJ_LAYOUT_TOID(LAYOUT,\ TYPE)
\f[]
.fi
.PP
The \f[C]POBJ_LAYOUT_TOID\f[] macro declares a typed \f[C]OID\f[] for
type passed as \f[C]TYPE\f[] argument inside the declaration of layout.
All types declared using this macro are assigned with consecutive type
numbers.
This macro must be used between the \f[C]POBJ_LAYOUT_BEGIN\f[] and
\f[C]POBJ_LAYOUT_END\f[] macros, with the same name passed as
\f[C]LAYOUT\f[] argument.
.IP
.nf
\f[C]
POBJ_LAYOUT_ROOT(LAYOUT,\ ROOT_TYPE)
\f[]
.fi
.PP
The \f[C]POBJ_LAYOUT_ROOT\f[] macro declares a typed \f[C]OID\f[] for
type passed as \f[C]ROOT_TYPE\f[] argument inside the declaration of
layout.
The typed \f[C]OID\f[] will be assigned with type number for root object
\f[C]POBJ_ROOT_TYPE_NUM\f[].
.IP
.nf
\f[C]
POBJ_LAYOUT_END(LAYOUT)
\f[]
.fi
.PP
The \f[C]POBJ_LAYOUT_END\f[] macro ends the declaration of layout.
.IP
.nf
\f[C]
POBJ_LAYOUT_NAME(LAYOUT)
\f[]
.fi
.PP
The \f[C]POBJ_LAYOUT_NAME\f[] macro returns the name of layout as a
\f[C]NULL\f[]\-terminated string.
.IP
.nf
\f[C]
POBJ_LAYOUT_TYPES_NUM(LAYOUT)
\f[]
.fi
.PP
The \f[C]POBJ_LAYOUT_TYPES_NUM\f[] macro returns number of types
declared using the \f[C]POBJ_LAYOUT_TOID\f[] macro within the layout
declaration.
.PP
This is an example of layout declaration:
.IP
.nf
\f[C]
POBJ_LAYOUT_BEGIN(mylayout);
POBJ_LAYOUT_ROOT(mylayout,\ struct\ root);
POBJ_LAYOUT_TOID(mylayout,\ struct\ node);
POBJ_LAYOUT_TOID(mylayout,\ struct\ foo);
POBJ_LAYOUT_END(mylayout);
\f[]
.fi
.IP
.nf
\f[C]
struct\ root
{
\ \ TOID(struct\ node)\ node;
};

struct\ node
{
\ \ TOID(struct\ node)\ next;
\ \ TOID(struct\ foo)\ foo;
};
\f[]
.fi
.PP
The name of layout and the number of declared types can be retrieved
using the following code:
.IP
.nf
\f[C]
const\ char\ *layout_name\ =\ POBJ_LAYOUT_NAME(mylayout);
int\ num_of_types\ =\ POBJ_LAYOUT_TYPES_NUM(mylayout);
\f[]
.fi
.SS OBJECT CONTAINERS
.PP
All the objects in the persistent memory pool are assigned a \f[I]type
number\f[] and are accessible by it.
.PP
The \f[B]libpmemobj\f[] provides a mechanism allowing to iterate through
the internal object collection, either looking for a specific object, or
performing a specific operation on each object of given type.
Software should not make any assumptions about the order of the objects
in the internal object containers.
.IP
.nf
\f[C]
PMEMoid\ pmemobj_first(PMEMobjpool\ *pop);
\f[]
.fi
.PP
The \f[C]pmemobj_first()\f[] function returns the first object from the
pool.
If the pool is empty, \f[C]OID_NULL\f[] is returned.
.IP
.nf
\f[C]
POBJ_FIRST(PMEMobjpool\ *pop,\ TYPE)
\f[]
.fi
.PP
The \f[C]POBJ_FIRST\f[] macro returns the first object from the pool of
the type specified by \f[C]TYPE\f[].
.IP
.nf
\f[C]
POBJ_FIRST_TYPE_NUM(PMEMobjpool\ *pop,\ uint64_t\ type_num)
\f[]
.fi
.PP
The \f[C]POBJ_FIRST_TYPE_NUM\f[] macro returns the first object from the
pool of the type specified by \f[C]type_num\f[].
.IP
.nf
\f[C]
PMEMoid\ pmemobj_next(PMEMoid\ oid);
\f[]
.fi
.PP
The \f[C]pmemobj_next()\f[] function returns the next object from the
pool.
If an object referenced by \f[C]oid\f[] is the last object in the
collection, or if the \f[C]OID_NULL\f[] is passed as an argument,
function returns \f[C]OID_NULL\f[].
.IP
.nf
\f[C]
POBJ_NEXT(TOID\ oid)
\f[]
.fi
.PP
The \f[C]POBJ_NEXT\f[] macro returns the next object of the same type as
the object referenced by \f[C]oid\f[].
.IP
.nf
\f[C]
POBJ_NEXT_TYPE_NUM(PMEMoid\ oid)
\f[]
.fi
.PP
The \f[C]POBJ_NEXT_TYPE_NUM\f[] macro returns the next object of the
same type as the object referenced by \f[C]oid\f[].
.PP
The following four macros provide more convenient way to iterate through
the internal collections, performing a specific operation on each
object.
.IP
.nf
\f[C]
POBJ_FOREACH(PMEMobjpool\ *pop,\ PMEMoid\ varoid)
\f[]
.fi
.PP
The \f[C]POBJ_FOREACH()\f[] macro allows to perform a specific operation
on each allocated object stored in the persistent memory pool pointed by
\f[C]pop\f[].
It traverses the internal collection of all the objects, assigning a
handle to each element in turn to \f[C]varoid\f[] variable.
.IP
.nf
\f[C]
POBJ_FOREACH_TYPE(PMEMobjpool\ *pop,\ TOID\ var)
\f[]
.fi
.PP
The \f[C]POBJ_FOREACH_TYPE()\f[] macro allows to perform a specific
operation on each allocated object of the same type as object passed as
\f[C]var\f[] argument, stored in the persistent memory pool pointed by
\f[C]pop\f[].
It traverses the internal collection of all the objects of the specified
type, assigning a handle to each element in turn to \f[C]var\f[]
variable.
.IP
.nf
\f[C]
POBJ_FOREACH_SAFE(PMEMobjpool\ *pop,\ PMEMoid\ varoid,\ PMEMoid\ nvaroid)
\f[]
.fi
.IP
.nf
\f[C]
POBJ_FOREACH_SAFE_TYPE(PMEMobjpool\ *pop,\ TOID\ var,\ TOID\ nvar)
\f[]
.fi
.PP
The macros \f[C]POBJ_FOREACH_SAFE()\f[] and
\f[C]POBJ_FOREACH_SAFE_TYPE()\f[] work in a similar fashion as
\f[C]POBJ_FOREACH()\f[] and \f[C]POBJ_FOREACH_TYPE()\f[] except that
prior to performing the operation on the object, they preserve a handle
to the next object in the collection by assigning it to \f[C]nvaroid\f[]
or \f[C]nvar\f[] variable.
This allows safe deletion of selected objects while iterating through
the collection.
.SS ROOT OBJECT MANAGEMENT
.PP
The root object of persistent memory pool is an entry point for all
other persistent objects allocated using the \f[B]libpmemobj\f[] API.
In other words, every single object stored in persistent memory pool
should have the root object at the end of its reference path.
It may be assumed that for each persistent memory pool the root object
always exists, and there is exactly one root object in each pool.
.IP
.nf
\f[C]
PMEMoid\ pmemobj_root(PMEMobjpool\ *pop,\ size_t\ size);
\f[]
.fi
.PP
The \f[C]pmemobj_root()\f[] function returns a handle to the root object
associated with the persistent memory pool pointed by \f[C]pop\f[].
If this is the first call to \f[C]pmemobj_root()\f[] and the root object
does not exists yet, it is implicitly allocated in a thread\-safe
manner, so if the function is called by more than one thread
simultaneously (with identical \f[C]size\f[] value), the same root
object handle is returned in all the threads.
.PP
The size of the root object is guaranteed to be not less than the
requested \f[C]size\f[].
If the requested size is larger than the current size, the root object
is automatically resized.
In such case, the old data is preserved and the extra space is zeroed.
The \f[C]pmemobj_root()\f[] function shall not fail, except for the case
if the requested object size is larger than the maximum allocation size
supported for given pool, or if there is not enough free space in the
pool to satisfy the reallocation of the root object.
In such case, \f[C]OID_NULL\f[] is returned.
.IP
.nf
\f[C]
PMEMoid\ pmemobj_root_construct(
\ \ \ \ PMEMobjpool\ *pop,\ size_t\ size,\ 
\ \ \ \ pmemobj_constr\ constructor,\ void\ *arg)
\f[]
.fi
.PP
The \f[C]pmemobj_root_construct()\f[] performs the same actions as the
\f[C]pmemobj_root()\f[] function, but instead of zeroing the newly
allocated object a \f[C]constructor\f[] function is called.
The constructor is also called on reallocations.
If the constructor returns non\-zero value the allocation is canceled,
the \f[C]OID_NULL\f[] value is returned from the caller and
\f[C]errno\f[] is set to \f[C]ECANCELED\f[].
The \f[C]pmemobj_root_size()\f[] can be used in the constructor to check
whether it's the first call to the constructor.
.IP
.nf
\f[C]
POBJ_ROOT(PMEMobjpool\ *pop,\ TYPE)
\f[]
.fi
.PP
The \f[C]POBJ_ROOT\f[] macro works the same way as the
\f[C]pmemobj_root()\f[] function except it returns a typed \f[C]OID\f[]
of type \f[C]TYPE\f[] instead of \f[C]PMEMoid\f[].
.IP
.nf
\f[C]
size_t\ pmemobj_root_size(PMEMobjpool\ *pop);
\f[]
.fi
.PP
The \f[C]pmemobj_root_size()\f[] function returns the current size of
the root object associated with the persistent memory pool pointed by
\f[C]pop\f[].
The returned size is the largest value requested by any of the earlier
\f[C]pmemobj_root()\f[] calls.
0 is returned if the root object has not been allocated yet.
.SS NON\-TRANSACTIONAL ATOMIC ALLOCATIONS
.PP
Functions described in this section provide the mechanism to allocate,
resize and free objects from the persistent memory pool in a
thread\-safe and fail\-safe manner.
All the routines are atomic with respect to other threads and any
power\-fail interruptions.
If any of those operations is torn by program failure or system crash;
on recovery they are guaranteed to be entirely completed or discarded,
leaving the persistent memory heap and internal object containers in a
consistent state.
.PP
All these functions can be used outside transactions.
Note that operations performed using non\-transactional API are
considered durable after completion, even if executed within the open
transaction.
Such non\-transactional changes will not be rolled\-back if the
transaction is aborted or interrupted.
.PP
The allocations are always aligned to the cache\-line boundary.
.IP
.nf
\f[C]
typedef\ int\ (*pmemobj_constr)(**PMEMobjpool\ *pop,\ void\ *ptr,\ void\ *arg);
\f[]
.fi
.PP
The \f[C]pmemobj_constr\f[] type represents a constructor for atomic
allocation from persistent memory heap associated with memory pool
\f[C]pop\f[].
The \f[C]ptr\f[] is a pointer to allocating memory area and the
\f[C]arg\f[] is an user\-defined argument passed to an appropriate
function.
.IP
.nf
\f[C]
int\ pmemobj_alloc(
\ \ \ \ PMEMobjpool\ *pop,\ PMEMoid\ *oidp,\ 
\ \ \ \ size_t\ size,\ uint64_t\ type_num,\ 
\ \ \ \ pmemobj_constr\ constructor\ ,\ void\ *arg);
\f[]
.fi
.PP
The \f[C]pmemobj_alloc\f[] function allocates a new object from the
persistent memory heap associated with memory pool \f[C]pop\f[].
The \f[C]PMEMoid\f[] of allocated object is stored in \f[C]oidp\f[].
If \f[C]NULL\f[] is passed as \f[C]oidp\f[], then the newly allocated
object may be accessed only by iterating objects in the object container
associated with given \f[C]type_num\f[], as described in \f[B]OBJECT
CONTAINERS\f[] section.
If the \f[C]oidp\f[] points to memory location from the \f[B]pmemobj\f[]
heap the \f[C]oidp\f[] is modified atomically.
Before returning, it calls the \f[C]constructor\f[] function passing the
pool handle \f[C]pop\f[], the pointer to the newly allocated object in
\f[C]ptr\f[] along with the \f[C]arg\f[] argument.
It is guaranteed that allocated object is either properly initialized,
or if the allocation is interrupted before the constructor completes,
the memory space reserved for the object is reclaimed.
If the constructor returns non\-zero value the allocation is canceled,
the \-1 value is returned from the caller and \f[C]errno\f[] is set to
\f[C]ECANCELED\f[].
The \f[C]size\f[] can be any non\-zero value, however due to internal
padding and object metadata, the actual size of the allocation will
differ from the requested one by at least 64 bytes.
For this reason, making the allocations of a size less than 64 bytes is
extremely inefficient and discouraged.
If \f[C]size\f[] equals 0, then \f[C]pmemobj_alloc()\f[] returns
non\-zero value, sets the \f[C]errno\f[] and leaves the \f[C]oidp\f[]
untouched.
The allocated object is added to the internal container associated with
given \f[C]type_num\f[].
.IP
.nf
\f[C]
int\ pmemobj_zalloc(PMEMobjpool\ *pop,\ PMEMoid\ *oidp,\ size_t\ size,\ uint64_t\ type_num);
\f[]
.fi
.PP
The \f[C]pmemobj_zalloc()\f[] function allocates a new zeroed object
from the the persistent memory heap associated with memory pool
\f[C]pop\f[].
The \f[C]PMEMoid\f[] of allocated object is stored in \f[C]oidp\f[].
If \f[C]NULL\f[] is passed as \f[C]oidp\f[], then the newly allocated
object may be accessed only by iterating objects in the object container
associated with given \f[C]type_num\f[], as described in \f[B]OBJECT
CONTAINERS\f[] section.
If the \f[C]oidp\f[] points to memory location from the \f[B]pmemobj\f[]
heap the \f[C]oidp\f[] is modified atomically.
The \f[C]size\f[] can be any non\-zero value, however due to internal
padding and object metadata, the actual size of the allocation will
differ from the requested one by at least 64 bytes.
For this reason, making the allocations of a size less than 64 bytes is
extremely inefficient and discouraged.
If \f[C]size\f[] equals 0, then \f[C]pmemobj_zalloc()\f[] returns
non\-zero value, sets the \f[C]errno\f[] and leaves the \f[C]oidp\f[]
untouched.
The allocated object is added to the internal container associated with
given \f[C]type_num\f[].
.IP
.nf
\f[C]
void\ pmemobj_free(PMEMoid\ *oidp);
\f[]
.fi
.PP
The \f[C]pmemobj_free()\f[] function provides the same semantics as
\f[B]free\f[](3), but instead of the process heap supplied by the
system, it operates on the persistent memory heap.
It frees the memory space represented by \f[C]oidp\f[], which must have
been returned by a previous call to \f[C]pmemobj_alloc()\f[],
\f[C]pmemobj_zalloc()\f[], \f[C]pmemobj_realloc()\f[], or
\f[C]pmemobj_zrealloc()\f[].
If \f[C]oidp\f[] is \f[C]NULL\f[] or if it points to the root object's
\f[C]OID\f[], behavior of the function is undefined.
If it points to \f[C]OID_NULL\f[], no operation is performed.
It sets the \f[C]oidp\f[] to \f[C]OID_NULL\f[] value after freeing the
memory.
If the \f[C]oidp\f[] points to memory location from the \f[B]pmemobj\f[]
heap the \f[C]oidp\f[]* is changed atomically.
.IP
.nf
\f[C]
int\ pmemobj_realloc(PMEMobjpool\ *pop,\ PMEMoid\ *oidp,\ size_t\ size,\ uint64_t\ type_num);
\f[]
.fi
.PP
The \f[C]pmemobj_realloc()\f[] function provide similar semantics to
\f[B]realloc\f[](3), but operates on the persistent memory heap
associated with memory pool \f[C]pop\f[].
It changes the size of the object represented by \f[C]oidp\f[], to
\f[C]size\f[] bytes.
The resized object is also added or moved to the internal container
associated with given \f[C]type_num\f[].
The contents will be unchanged in the range from the start of the region
up to the minimum of the old and new sizes.
If the new size is larger than the old size, the added memory will
\f[I]not\f[] be initialized.
If \f[C]oidp\f[] is \f[C]NULL\f[] or if it points to the root object's
\f[C]OID\f[], behavior of the function is undefined.
If it points to \f[C]OID_NULL\f[], then the call is equivalent to
\f[C]pmemobj_alloc(pop,\ size,\ type_num)\f[].
If \f[C]size\f[] is equal to zero, and \f[C]oidp\f[] is not
\f[C]OID_NULL\f[], then the call is equivalent to
\f[C]pmemobj_free(oid)\f[].
Unless \f[C]oidp\f[] is \f[C]OID_NULL\f[], it must have been returned by
an earlier call to \f[C]pmemobj_alloc()\f[], \f[C]pmemobj_zalloc()\f[],
\f[C]pmemobj_realloc()\f[], or \f[C]pmemobj_zrealloc()\f[].
Note that the object handle value may change in result of reallocation.
If the object was moved, a memory space represented by \f[C]oid\f[] is
reclaimed.
If \f[C]oidp\f[] points to memory location from the \f[B]pmemobj\f[]
heap the \f[C]oidp\f[] is changed atomically.
If \f[C]pmemobj_realloc()\f[] is unable to satisfy the allocation
request, a non\-zero value is returned and \f[C]errno\f[] is set
appropriately.
.IP
.nf
\f[C]
int\ pmemobj_zrealloc(PMEMobjpool\ *pop,\ PMEMoid\ *oidp,\ size_t\ size,\ uint64_t\ type_num);
\f[]
.fi
.PP
The \f[C]pmemobj_zrealloc()\f[] function provide similar semantics to
\f[B]realloc\f[](3), but operates on the persistent memory heap
associated with memory pool \f[C]pop\f[].
It changes the size of the object represented by \f[C]oid\f[], to
\f[C]size\f[] bytes.
The resized object is also added or moved to the internal container
associated with given \f[C]type_num\f[].
The contents will be unchanged in the range from the start of the region
up to the minimum of the old and new sizes.
If the new size is larger than the old size, the added memory will be
zeroed.
If \f[C]oidp\f[] is \f[C]NULL\f[] or if it points to the root object's
\f[C]OID\f[], behavior of the function is undefined.
If it points to \f[C]OID_NULL\f[], then the call is equivalent to
\f[C]pmemobj_zalloc(pop,\ size,\ type_num)\f[].
If \f[C]size\f[] is equal to zero, and \f[C]oidp\f[] doesn't point to
\f[C]OID_NULL\f[], then the call is equivalent to
\f[C]pmemobj_free(pop,\ oid)\f[].
Unless \f[C]oidp\f[] points to \f[C]OID_NULL\f[], it must have been
returned by an earlier call to \f[C]pmemobj_alloc()\f[],
\f[C]pmemobj_zalloc()\f[], \f[C]pmemobj_realloc()\f[], or
\f[C]pmemobj_zrealloc()\f[].
Note that the object handle value may change in result of reallocation.
If the object was moved, a memory space represented by \f[C]oidp\f[] is
reclaimed.
If \f[C]oidp\f[] points to memory location from the \f[B]pmemobj\f[]
heap the \f[C]oidp\f[] is changed atomically.
If \f[C]pmemobj_zrealloc()\f[] is unable to satisfy the allocation
request, \f[C]OID_NULL\f[] is returned and \f[C]errno\f[] is set
appropriately.
.IP
.nf
\f[C]
int\ pmemobj_strdup(PMEMobjpool\ *pop,\ PMEMoid\ *oidp,\ const\ char\ *s,\ uint64_t\ type_num);
\f[]
.fi
.PP
The \f[C]pmemobj_strdup()\f[] function provides the same semantics as
\f[B]strdup\f[](3), but operates on the persistent memory heap
associated with memory pool \f[C]pop\f[].
It stores a handle to a new object in \f[C]oidp\f[] which is a duplicate
of the string \f[I]s\f[].
If \f[C]NULL\f[] is passed as \f[C]oidp\f[], then the newly allocated
object may be accessed only by iterating objects in the object container
associated with given \f[C]type_num\f[], as described in \f[B]OBJECT
CONTAINERS\f[] section.
If the \f[C]oidp\f[] points to memory location from the \f[B]pmemobj\f[]
heap the \f[C]oidp\f[] is changed atomically.
The allocated string object is also added to the internal container
associated with given \f[C]type_num\f[].
Memory for the new string is obtained with \f[C]pmemobj_alloc()\f[], on
the given memory pool, and can be freed with \f[C]pmemobj_free()\f[] on
the same memory pool.
If \f[C]pmemobj_strdup()\f[] is unable to satisfy the allocation
request, \f[C]OID_NULL\f[] is returned and \f[C]errno\f[] is set
appropriately.
.IP
.nf
\f[C]
size_t\ pmemobj_alloc_usable_size(PMEMoid\ oid);
\f[]
.fi
.PP
The \f[C]pmemobj_alloc_usable_size\f[]() function provides the same
semantics as \f[B]malloc_usable_size\f[](3), but instead of the process
heap supplied by the system, it operates on the persistent memory heap.
It returns the number of usable bytes in the object represented by
\f[C]oid\f[], a handle to an object allocated by
\f[C]pmemobj_alloc\f[]() or a related function.
If \f[C]oid\f[] is \f[C]OID_NULL\f[], 0 is returned.
.IP
.nf
\f[C]
POBJ_NEW(PMEMobjpool\ *pop,\ TOID\ *oidp,\ TYPE,\ pmemobj_constr\ constructor,\ void\ *arg)
\f[]
.fi
.PP
The \f[C]POBJ_NEW\f[] macro is a wrapper around the
\f[C]pmemobj_alloc()\f[] function which takes the type name
\f[C]TYPE\f[] and passes the size and type number to the
\f[C]pmemobj_alloc()\f[] function from the typed \f[C]OID\f[].
Instead of taking a pointer to \f[C]PMEMoid\f[] it takes a pointer to
typed \f[C]OID\f[] of \f[C]TYPE\f[].
.IP
.nf
\f[C]
POBJ_ALLOC(
\ \ \ \ PMEMobjpool\ *pop,\ TOID\ *oidp,\ TYPE,\ size_t\ size,\ 
\ \ \ \ pmemobj_constr\ constructor\ ,\ void\ *arg)
\f[]
.fi
.PP
The \f[C]POBJ_ALLOC\f[] macro is a wrapper around the
\f[C]pmemobj_alloc()\f[] function which takes the type name
\f[C]TYPE\f[] the size of allocation \f[C]size\f[] and passes the type
number to the \f[C]pmemobj_alloc()\f[] function from the typed
\f[C]OID\f[].
Instead of taking a pointer to \f[C]PMEMoid\f[] it takes a pointer to
typed \f[C]OID\f[] of \f[C]TYPE\f[].
.IP
.nf
\f[C]
POBJ_ZNEW(PMEMobjpool\ *pop,\ TOID\ *oidp,\ TYPE)
\f[]
.fi
.PP
The \f[C]POBJ_ZNEW\f[] macro is a wrapper around the
\f[C]pmemobj_zalloc()\f[] function which takes the type name
\f[C]TYPE\f[] and passes the size and type number to the
\f[C]pmemobj_zalloc()\f[] function from the typed \f[C]OID\f[].
Instead of taking a pointer to \f[C]PMEMoid\f[] it takes a pointer to
typed \f[C]OID\f[] of \f[C]TYPE\f[].
.IP
.nf
\f[C]
POBJ_ZALLOC(PMEMobjpool\ *pop,\ TOID\ *oidp,\ TYPE,\ size_t\ size)
\f[]
.fi
.PP
The \f[C]POBJ_ZALLOC\f[] macro is a wrapper around the
\f[C]pmemobj_zalloc()\f[] function which takes the type name
\f[C]TYPE\f[], the size of allocation \f[C]size\f[] and passes the type
number to the \f[C]pmemobj_zalloc()\f[] function from the typed
\f[C]OID\f[].
Instead of taking a pointer to \f[C]PMEMoid\f[] it takes a pointer to
typed \f[C]OID\f[] of \f[C]TYPE\f[].
.IP
.nf
\f[C]
POBJ_REALLOC(PMEMobjpool\ *pop,\ TOID\ *oidp,\ TYPE,\ size_t\ size)
\f[]
.fi
.PP
The \f[C]POBJ_REALLOC\f[] macro is a wrapper around the
\f[C]pmemobj_realloc()\f[] function which takes the type name
\f[C]TYPE\f[] and passes the type number to the
\f[C]pmemobj_realloc()\f[] function from the typed \f[C]OID\f[].
Instead of taking a pointer to \f[C]PMEMoid\f[] it takes a pointer to
typed \f[C]OID\f[] of \f[C]TYPE\f[].
.IP
.nf
\f[C]
POBJ_ZREALLOC(PMEMobjpool\ *pop,\ TOID\ *oidp,\ TYPE,\ size_t\ size)
\f[]
.fi
.PP
The \f[C]POBJ_ZREALLOC\f[] macro is a wrapper around the
\f[C]pmemobj_zrealloc()\f[] function which takes the type name
\f[C]TYPE\f[] and passes the type number to the
\f[C]pmemobj_zrealloc()\f[] function from the typed \f[C]OID\f[].
Instead of taking a pointer to \f[C]PMEMoid\f[] it takes a pointer to
typed \f[C]OID\f[] of \f[C]TYPE\f[].
.IP
.nf
\f[C]
POBJ_FREE(TOID\ *oidp)
\f[]
.fi
.PP
The \f[C]POBJ_FREE\f[] macro is a wrapper around the
\f[C]pmemobj_free()\f[] function which takes pointer to typed
\f[C]OID\f[] \f[C]oidp\f[] as an argument instead of \f[C]PMEMoid\f[].
.SS NON\-TRANSACTIONAL PERSISTENT ATOMIC LISTS
.PP
Besides the internal objects collections described in section
\f[B]OBJECT CONTAINERS\f[] the \f[B]libpmemobj\f[] provides a mechanism
to organize persistent objects in the user\-defined persistent atomic
circular doubly linked lists.
All the routines and macros operating on the persistent lists provide
atomicity with respect to any power\-fail interruptions.
If any of those operations is torn by program failure or system crash;
on recovery they are guaranteed to be entirely completed or discarded,
leaving the lists, persistent memory heap and internal object containers
in a consistent state.
.PP
The persistent atomic circular doubly linked lists support the following
functionality:
.IP \[bu] 2
Insertion of an object at the head of the list, or at the end of the
list.
.IP \[bu] 2
Insertion of an object before or after any element in the list.
.IP \[bu] 2
Atomic allocation and insertion of a new object at the head of the list,
or at the end of the list.
.IP \[bu] 2
Atomic allocation and insertion of a new object before or after any
element in the list.
.IP \[bu] 2
Atomic moving of an element from one list to the specific location on
another list.
.IP \[bu] 2
Removal of any object in the list.
.IP \[bu] 2
Atomic removal and freeing of any object in the list.
.IP \[bu] 2
Forward or backward traversal through the list.
.PP
A list is headed by a \f[C]list_head\f[] structure containing a single
object handle of the first element on the list.
The elements are doubly linked so that an arbitrary element can be
removed without a need to traverse the list.
New elements can be added to the list before or after an existing
element, at the head of the list, or at the end of the list.
A list may be traversed in either direction.
.PP
The user\-defined structure of each element must contain a field of type
\f[C]list_entry\f[] holding the object handles to the previous and next
element on the list.
Both the \f[C]list_head\f[] and the \f[C]list_entry\f[] structures are
declared in \f[C]<libpmemobj.h>\f[].
.PP
The functions below are intended to be used outside transactions \-
transactional variants are described in section \f[B]TRANSACTIONAL
OBJECT MANIPULATION\f[].
Note that operations performed using this non\-transactional API are
independent from their transactional counterparts.
If any non\-transactional allocations or list manipulations are
performed within an open transaction, the changes will not be
rolled\-back if such a transaction is aborted or interrupted.
.IP
.nf
\f[C]
int\ pmemobj_list_insert(
\ \ \ \ PMEMobjpool\ *pop,\ size_t\ pe_offset,\ void\ *head,
\ \ \ \ PMEMoid\ dest,\ int\ before,\ PMEMoid\ oid);
\f[]
.fi
.PP
The \f[C]pmemobj_list_insert()\f[] function inserts an element
represented by object handle \f[C]oid\f[] into the list referenced by
\f[C]head\f[].
Depending on the value of flag \f[C]before\f[], the object is added
before or after the element \f[C]dest\f[].
If \f[C]dest\f[] value is \f[C]OID_NULL\f[], the object is inserted at
the head or at the end of the list, depending on the \f[C]before\f[]
flag value.
If value is non\-zero the object is inserted at the head, if value is
zero the object is inserted at the end of the list.
The relevant values are available through \f[C]POBJ_LIST_DEST_HEAD\f[]
and \f[C]POBJ_LIST_DEST_TAIL\f[] defines respectively.
The argument \f[C]pe_offset\f[] declares an offset of the structure that
connects the elements in the list.
All the handles \f[C]head\f[], \f[C]dest\f[] and \f[C]oid\f[] must point
to the objects allocated from the same memory pool \f[C]pop\f[].
The \f[C]head\f[] and \f[C]oid\f[] cannot be \f[C]OID_NULL\f[].
On success, zero is returned.
On error, \-1 is returned and \f[C]errno\f[] is set.
.IP
.nf
\f[C]
PMEMoid\ pmemobj_list_insert_new(
\ \ \ \ PMEMobjpool\ *pop,\ size_t\ pe_offset,
\ \ \ \ void\ *head,\ PMEMoid\ dest,\ int\ before,\ size_t\ size,
\ \ \ \ uint64_t\ type_num,\ pmemobj_constr\ constructor,\ void\ arg);
\f[]
.fi
.PP
The \f[C]pmemobj_list_insert_new()\f[] function atomically allocates a
new object of given \f[C]size\f[] and type \f[C]type_num\f[] and inserts
it into the list referenced by \f[C]head\f[].
Depending on the value of \f[C]before\f[] flag, the newly allocated
object is added before or after the element \f[C]dest\f[].
If \f[C]dest\f[] value is \f[C]OID_NULL\f[], the object is inserted at
the head or at the end of the list, depending on the \f[C]before\f[]
flag value.
If value is non\-zero the object is inserted at the head, if value is
zero the object is inserted at the end of the list.
The relevant values are available through \f[C]POBJ_LIST_DEST_HEAD\f[]
and \f[C]POBJ_LIST_DEST_TAIL\f[] defines respectively.
The argument \f[C]pe_offset\f[] declares an offset of the structure that
connects the elements in the list.
All the handles \f[C]head\f[], \f[C]dest\f[] must point to the objects
allocated from the same memory pool \f[C]pop\f[].
Before returning, it calls the \f[C]constructor\f[] function passing the
pool handle \f[C]pop\f[], the pointer to the newly allocated object in
\f[C]ptr\f[] along with the \f[C]arg\f[] argument.
It is guaranteed that allocated object is either properly initialized
or, if the allocation is interrupted before the constructor completes,
the memory space reserved for the object is reclaimed.
If the constructor returns non\-zero value the allocation is canceled,
the \-1 value is returned from the caller and \f[C]errno\f[] is set to
\f[C]ECANCELED\f[].
The \f[C]head\f[] cannot be \f[C]OID_NULL\f[].
The allocated object is also added to the internal container associated
with given \f[C]type_num\f[].
as described in section \f[B]OBJECT CONTAINERS\f[].
On success, it returns a handle to the newly allocated object.
On error, \f[C]OID_NULL\f[] is returned and \f[C]errno\f[] is set.
.IP
.nf
\f[C]
int\ pmemobj_list_remove(
\ \ \ \ PMEMobjpool\ *pop,\ size_t\ pe_offset,
\ \ \ \ void\ *head,\ PMEMoid\ oid,\ int\ free);
\f[]
.fi
.PP
The \f[C]pmemobj_list_remove()\f[] function removes the object
referenced by \f[C]oid\f[] from the list pointed by \f[C]head\f[].
If \f[C]free\f[] flag is set, it also removes the object from the
internal object container and frees the associated memory space.
The argument \f[C]pe_offset\f[] declares an offset of the structure that
connects the elements in the list.
Both \f[C]head\f[] and \f[C]oid\f[] must point to the objects allocated
from the same memory pool \f[C]pop\f[] and cannot be \f[C]OID_NULL\f[].
On success, zero is returned.
On error, \-1 is returned and \f[C]errno\f[] is set.
.IP
.nf
\f[C]
int\ pmemobj_list_move(
\ \ \ \ PMEMobjpool\ *pop,
\ \ \ \ size_t\ pe_old_offset,\ void\ *head_old,
\ \ \ \ size_t\ pe_new_offset,\ void\ *head_new,
\ \ \ \ PMEMoid\ dest,\ int\ before,\ PMEMoid\ oid);
\f[]
.fi
.PP
The \f[C]pmemobj_list_move()\f[] function moves the object represented
by \f[C]oid\f[] from the list pointed by \f[C]head_old\f[] to the list
pointed by \f[C]head_new\f[].
Depending on the value of flag \f[C]before\f[], the newly allocated
object is added before or after the element \f[C]dest\f[].
If \f[C]dest\f[] value is \f[C]OID_NULL\f[], the object is inserted at
the head or at the end of the second list, depending on the
\f[C]before\f[] flag value.
If value is non\-zero the object is inserted at the head, if value is
zero the object is inserted at the end of the list.
The relevant values are available through \f[C]POBJ_LIST_DEST_HEAD\f[]
and \f[C]POBJ_LIST_DEST_TAIL\f[] defines respectively.
The arguments \f[C]pe_old_offset\f[] and \f[C]pe_new_offset\f[] declare
the offsets of the structures that connects the elements in the old and
new lists respectively.
All the handles \f[C]head_old\f[], \f[C]head_new\f[], \f[C]dest\f[] and
\f[C]oid\f[] must point to the objects allocated from the same memory
pool \f[C]pop\f[].
\f[C]head_old\f[], \f[C]head_new\f[] and \f[C]oid\f[] cannot be
\f[C]OID_NULL\f[].
On success, zero is returned.
On error, \-1 is returned and \f[C]errno\f[] is set.
.SS TYPE\-SAFE NON\-TRANSACTIONAL PERSISTENT ATOMIC LISTS
.PP
The following macros define and operate on a type\-safe persistent
atomic circular doubly linked list data structure that consist of a set
of persistent objects of a well\-known type.
Unlike the functions described in the previous section, these macros
provide type enforcement by requiring declaration of type of the objects
stored in given list, and not allowing mixing objects of different types
in a single list.
.PP
The functionality and semantics of those macros is similar to circular
queues defined in \f[B]queue\f[](3).
.PP
The majority of the macros must specify the handle to the memory pool
\f[C]pop\f[] and the name of the \f[C]field\f[] in the user\-defined
structure, which must be of type \f[C]POBJ_LIST_ENTRY\f[] and is used to
connect the elements in the list.
.PP
A list is headed by a structure defined by the \f[C]POBJ_LIST_HEAD\f[]
macro.
This structure contains an object handle of the first element on the
list.
The elements are doubly linked so that an arbitrary element can be
removed without a need to traverse the list.
New elements can be added to the list before or after an existing
element, at the head of the list, or at the end of the list.
A list may be traversed in either direction.
A \f[C]POBJ_LIST_HEAD\f[] structure is declared as follows:
.IP
.nf
\f[C]
#define\ POBJ_LIST_HEAD(HEADNAME,\ TYPE)

struct\ HEADNAME
{
\ \ \ \ TOID(TYPE)\ pe_first;
\ \ \ \ PMEMmutex\ lock;
};
\f[]
.fi
.PP
In the macro definitions, \f[C]TYPE\f[] is the name of a user\-defined
structure, that must contain a field of type \f[C]POBJ_LIST_ENTRY\f[].
The argument \f[C]HEADNAME\f[] is the name of a user\-defined structure
that must be declared using the macro \f[C]POBJ_LIST_HEAD\f[].
See the examples below for further explanation of how these macros are
used.
.PP
The macro \f[C]POBJ_LIST_ENTRY\f[] declares a structure that connects
the elements in the list.
.IP
.nf
\f[C]
#define\ POBJ_LIST_ENTRY(TYPE)
struct
{
\ \ \ \ TOID(TYPE)\ pe_next;
\ \ \ \ TOID(TYPE)\ pe_prev;
};
\f[]
.fi
.IP
.nf
\f[C]
POBJ_LIST_FIRST(POBJ_LIST_HEAD\ *head)
\f[]
.fi
.PP
The macro \f[C]POBJ_LIST_FIRST\f[] returns the first element on the list
referenced by \f[C]head\f[].
If the list is empty \f[C]OID_NULL\f[] is returned.
.IP
.nf
\f[C]
POBJ_LIST_LAST(POBJ_LIST_HEAD\ *head,\ POBJ_LIST_ENTRY\ FIELD)
\f[]
.fi
.PP
The macro \f[C]POBJ_LIST_LAST\f[] returns the last element on the list
referenced by \f[C]head\f[].
If the list is empty \f[C]OID_NULL\f[] is returned.
.IP
.nf
\f[C]
POBJ_LIST_EMPTY(POBJ_LIST_HEAD\ *head)
\f[]
.fi
.PP
The macro \f[C]POBJ_LIST_EMPTY\f[] evaluates to 1 if the list referenced
by \f[C]head\f[] is empty.
Otherwise, 0 is returned.
.IP
.nf
\f[C]
POBJ_LIST_NEXT(TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)
\f[]
.fi
.PP
The macro \f[C]POBJ_LIST_NEXT\f[] returns the element next to the
element \f[C]elm\f[].
.IP
.nf
\f[C]
POBJ_LIST_PREV(TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)
\f[]
.fi
.PP
The macro \f[C]POBJ_LIST_PREV\f[] returns the element preceding the
element \f[C]elm\f[].
.IP
.nf
\f[C]
POBJ_LIST_FOREACH(TOID\ var,\ POBJ_LIST_HEAD\ *head,\ POBJ_LIST_ENTRY\ FIELD)
\f[]
.fi
.PP
The macro \f[C]POBJ_LIST_FOREACH\f[] traverses the list referenced by
\f[C]head\f[] assigning a handle to each element in turn to \f[C]var\f[]
variable.
.IP
.nf
\f[C]
POBJ_LIST_FOREACH_REVERSE(TOID\ var,\ POBJ_LIST_HEAD\ *head,\ POBJ_LIST_ENTRY\ FIELD)
\f[]
.fi
.PP
The macro \f[C]POBJ_LIST_FOREACH_REVERSE\f[] traverses the list
referenced by \f[C]head\f[] in reverse order, assigning a handle to each
element in turn to \f[C]var\f[] variable.
The \f[C]field\f[] argument is the name of the field of type
\f[C]POBJ_LIST_ENTRY\f[] in the element structure.
.IP
.nf
\f[C]
POBJ_LIST_INSERT_HEAD(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,\ 
\ \ \ \ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)
\f[]
.fi
.PP
The macro \f[C]POBJ_LIST_INSERT_HEAD\f[] inserts the element
\f[C]elm\f[] at the head of the list referenced by \f[C]head\f[].
.IP
.nf
\f[C]
POBJ_LIST_INSERT_TAIL(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,\ 
\ \ \ \ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)
\f[]
.fi
.PP
The macro \f[C]POBJ_LIST_INSERT_TAIL\f[] inserts the element
\f[C]elm\f[] at the end of the list referenced by \f[C]head\f[].
.IP
.nf
\f[C]
POBJ_LIST_INSERT_AFTER(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,\ 
\ \ \ \ TOID\ listelm,\ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)
\f[]
.fi
.PP
The macro \f[C]POBJ_LIST_INSERT_AFTER\f[] inserts the element
\f[C]elm\f[] into the list referenced by \f[C]head\f[] after the element
\f[C]listelm\f[].
If \f[C]listelm\f[] value is \f[C]TOID_NULL\f[], the object is inserted
at the end of the list.
.IP
.nf
\f[C]
POBJ_LIST_INSERT_BEFORE(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,\ 
\ \ \ \ TOID\ listelm,\ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)
\f[]
.fi
.PP
The macro \f[C]POBJ_LIST_INSERT_BEFORE\f[] inserts the element
\f[C]elm\f[] into the list referenced by \f[C]head\f[] before the
element \f[C]listelm\f[].
If \f[C]listelm\f[] value is \f[C]TOID_NULL\f[], the object is inserted
at the head of the list.
.IP
.nf
\f[C]
POBJ_LIST_INSERT_NEW_HEAD(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,\ POBJ_LIST_ENTRY\ FIELD,\ 
\ \ \ \ size_t\ size,\ pmemobj_constr\ constructor\ ,\ void\ *arg)
\f[]
.fi
.PP
The macro \f[C]POBJ_LIST_INSERT_NEW_HEAD\f[] atomically allocates a new
object of size \f[C]size\f[] and inserts it at the head of the list
referenced by \f[C]head\f[].
The newly allocated object is also added to the internal object
container associated with a type number which is retrieved from the
typed \f[C]OID\f[] of the first element on list.
.IP
.nf
\f[C]
POBJ_LIST_INSERT_NEW_TAIL(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ POBJ_LIST_ENTRY\ FIELD,\ size_t\ size,
\ \ \ \ pmemobj_constr\ constructor\ ,\ void\ *arg)
\f[]
.fi
.PP
The macro \f[C]POBJ_LIST_INSERT_NEW_TAIL\f[] atomically allocates a new
object of size \f[C]size\f[] and inserts it at the tail of the list
referenced by \f[C]head\f[].
The newly allocated object is also added to the internal object
container associated with with a type number which is retrieved from the
typed \f[C]OID\f[] of the first element on list.
.IP
.nf
\f[C]
POBJ_LIST_INSERT_NEW_AFTER(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ TOID\ listelm,\ POBJ_LIST_ENTRY\ FIELD,\ size_t\ size,
\ \ \ \ pmemobj_constr\ constructor\ ,\ void\ *arg)
\f[]
.fi
.PP
The macro \f[C]POBJ_LIST_INSERT_NEW_AFTER\f[] atomically allocates a new
object of size \f[C]size\f[] and inserts it into the list referenced by
\f[C]head\f[] after the element \f[C]listelm\f[].
If \f[C]listelm\f[] value is \f[C]TOID_NULL\f[], the object is inserted
at the end of the list.
The newly allocated object is also added to the internal object
container associated with with a type number which is retrieved from the
typed \f[C]OID\f[] of the first element on list.
.IP
.nf
\f[C]
POBJ_LIST_INSERT_NEW_BEFORE(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ TOID\ listelm,\ POBJ_LIST_ENTRY\ FIELD,\ size_t\ size,
\ \ \ \ pmemobj_constr\ constructor,\ void\ *arg)
\f[]
.fi
.PP
The macro \f[C]POBJ_LIST_INSERT_NEW_BEFORE\f[] atomically allocates a
new object of size \f[C]size\f[] and inserts it into the list referenced
by \f[C]head\f[] before the element \f[C]listelm\f[].
If \f[C]listelm\f[] value is \f[C]TOID_NULL\f[], the object is inserted
at the head of the list.
The newly allocated object is also added to the internal object
container associated with with a type number which is retrieved from the
typed \f[C]OID\f[] of the first element on list.
.IP
.nf
\f[C]
POBJ_LIST_REMOVE(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,\ 
\ \ \ \ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)
\f[]
.fi
.PP
The macro \f[C]POBJ_LIST_REMOVE\f[] removes the element \f[C]elm\f[]
from the list referenced by \f[C]head\f[].
.IP
.nf
\f[C]
POBJ_LIST_REMOVE_FREE(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,\ 
\ \ \ \ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)
\f[]
.fi
.PP
The macro \f[C]POBJ_LIST_REMOVE_FREE\f[] removes the element
\f[C]elm\f[] from the list referenced by \f[C]head\f[] and frees the
memory space represented by this element.
.IP
.nf
\f[C]
POBJ_LIST_MOVE_ELEMENT_HEAD(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ POBJ_LIST_HEAD\ *head_new,\ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD,
\ \ \ \ POBJ_LIST_ENTRY\ field_new)
\f[]
.fi
.PP
The macro \f[C]POBJ_LIST_MOVE_ELEMENT_HEAD\f[] moves the element
\f[C]elm\f[] from the list referenced by \f[C]head\f[] to the head of
the list \f[C]head_new\f[].
The \f[C]field\f[] and \f[C]field_new\f[] arguments are the names of the
fields of type \f[C]POBJ_LIST_ENTRY\f[] in the element structure that
are used to connect the elements in both lists.
.IP
.nf
\f[C]
POBJ_LIST_MOVE_ELEMENT_TAIL(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ POBJ_LIST_HEAD\ *head_new,\ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD,
\ \ \ \ POBJ_LIST_ENTRY\ field_new)
\f[]
.fi
.PP
The macro \f[C]POBJ_LIST_MOVE_ELEMENT_TAIL\f[] moves the element
\f[C]elm\f[] from the list referenced by \f[C]head\f[] to the end of the
list \f[C]head_new\f[].
The \f[C]field\f[] and \f[C]field_new\f[] arguments are the names of the
fields of type \f[C]POBJ_LIST_ENTRY\f[] in the element structure that
are used to connect the elements in both lists.
.IP
.nf
\f[C]
POBJ_LIST_MOVE_ELEMENT_AFTER(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ POBJ_LIST_HEAD\ *head_new,\ TOID\ listelm,\ TOID\ elm,
\ \ \ \ POBJ_LIST_ENTRY\ FIELD,\ POBJ_LIST_ENTRY\ field_new)
\f[]
.fi
.PP
The macro \f[C]POBJ_LIST_MOVE_ELEMENT_AFTER\f[] atomically removes the
element \f[C]elm\f[] from the list referenced by \f[C]head\f[] and
inserts it into the list referenced by \f[C]head_new\f[] after the
element \f[C]listelm\f[].
If \f[C]listelm\f[] value is \f[C]TOID_NULL\f[], the object is inserted
at the end of the list.
The \f[C]field\f[] and \f[C]field_new\f[] arguments are the names of the
fields of type \f[C]POBJ_LIST_ENTRY\f[] in the element structure that
are used to connect the elements in both lists.
.IP
.nf
\f[C]
POBJ_LIST_MOVE_ELEMENT_BEFORE(
\ \ \ \ PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ POBJ_LIST_HEAD\ *head_new,\ TOID\ listelm,\ TOID\ elm,
\ \ \ \ POBJ_LIST_ENTRY\ FIELD,\ POBJ_LIST_ENTRY\ field_new)
\f[]
.fi
.PP
The macro \f[C]POBJ_LIST_MOVE_ELEMENT_BEFORE\f[] atomically removes the
element \f[C]elm\f[] from the list referenced by \f[C]head\f[] and
inserts it into the list referenced by \f[C]head_new\f[] before the
element \f[C]listelm\f[].
If \f[C]listelm\f[] value is \f[C]TOID_NULL\f[], the object is inserted
at the head of the list.
The \f[C]field\f[] and \f[C]field_new\f[] arguments are the names of the
fields of type \f[C]POBJ_LIST_ENTRY\f[] in the element structure that
are used to connect the elements in both lists.
.SS TRANSACTIONAL OBJECT MANIPULATION
.PP
The functions described in sections \f[B]NON\-TRANSACTIONAL ATOMIC
ALLOCATIONS\f[] and \f[B]NON\-TRANSACTIONAL PERSISTENT ATOMIC LISTS\f[]
only guarantee the atomicity in scope of a single operation on an
object.
In case of more complex changes, involving multiple operations on an
object, or allocation and modification of multiple objects; data
consistency and fail\-safety may be provided only by using \f[I]atomic
transactions\f[].
.PP
A transaction is defined as series of operations on persistent memory
objects that either all occur, or nothing occurs.
In particular, if the execution of a transaction is interrupted by a
power failure or a system crash, it is guaranteed that after system
restart, all the changes made as a part of the uncompleted transaction
will be rolled\-back, restoring the consistent state of the memory pool
from the moment when the transaction was started.
.PP
Note that transactions do not provide the atomicity with respect to
other threads.
All the modifications performed within the transactions are immediately
visible to other threads, and this is the responsibility of the program
to implement a proper thread synchronization mechanism.
.PP
Each transaction is visible only for the thread that started it.
No other threads can add operations, commit or abort the transaction
initiated by another thread.
There may be multiple open transactions on given memory pool at the same
time, but only one transaction per thread.
.PP
Nested transactions are supported but flattened.
Committing the nested transaction does not commit the outer transaction,
however errors in the nested transaction are propagated up to the
outer\-most level, resulting in the interruption of the entire
transaction.
.PP
Please see the \f[B]CAVEATS\f[] section for known limitations of the
transactional API.
.IP
.nf
\f[C]
enum\ tx_stage\ pmemobj_tx_stage(void);
\f[]
.fi
.PP
The \f[C]pmemobj_tx_stage()\f[] function returns the stage of the
current transaction stage for a thread.
Stages are changed only by the \f[C]pmemobj_tx_*\f[] functions.
The transaction stages are defined as follows:
.IP \[bu] 2
\f[C]TX_STAGE_NONE\f[] \- no open transaction in this thread
.IP \[bu] 2
\f[C]TX_STAGE_WORK\f[] \- transaction in progress
.IP \[bu] 2
\f[C]TX_STAGE_ONCOMMIT\f[] \- successfully committed
.IP \[bu] 2
\f[C]TX_STAGE_ONABORT\f[] \- starting the transaction failed or
transaction aborted
.IP \[bu] 2
\f[C]TX_STAGE_FINALLY\f[] \- ready for clean up
.IP
.nf
\f[C]
int\ pmemobj_tx_begin(PMEMobjpool\ *pop,\ jmp_buf\ *env,\ ...);
\f[]
.fi
.PP
The \f[C]pmemobj_tx_begin()\f[] function starts a new transaction in the
current thread.
If called within an open transaction, it starts a nested transaction.
The caller may use \f[C]env\f[] argument to provide a pointer to the
information of a calling environment to be restored in case of
transaction abort.
This information must be filled by a caller, using \f[B]setjmp\f[](3)
macro.
.PP
Optionally, a list of pmem\-resident locks may be provided as the last
arguments.
Each lock is specified by a pair of lock type (\f[C]TX_LOCK_MUTEX\f[] or
\f[C]TX_LOCK_RWLOCK\f[]) and the pointer to the lock of type
\f[C]PMEMmutex\f[] or \f[C]PMEMrwlock\f[] respectively.
The list must be terminated with \f[C]TX_LOCK_NONE\f[].
In case of rwlocks, a write lock is acquired.
It is guaranteed that \f[C]pmemobj_tx_begin()\f[] will grab all the
locks prior to successful completion and they will be held by the
current thread until the transaction is finished.
Locks are taken in the order from left to right.
To avoid deadlocks, user must take care about the proper order of locks.
.PP
New transaction may be started only if the current stage is
\f[C]TX_STAGE_NONE\f[] or \f[C]TX_STAGE_WORK\f[].
If successful, transaction stage changes to \f[C]TX_STAGE_WORK\f[] and
function returns zero.
Otherwise, stage changes to \f[C]TX_STAGE_ONABORT\f[] and an error
number is returned.
.IP
.nf
\f[C]
int\ pmemobj_tx_lock(enum\ tx_lock\ lock_type,\ void\ *lockp);
\f[]
.fi
.PP
The \f[C]pmemobj_tx_lock()\f[] function grabs a lock pointed by
\f[C]lockp\f[] and adds it to the current transaction.
The lock type is specified by \f[C]lock_type\f[] (\f[C]TX_LOCK_MUTEX\f[]
or \f[C]TX_LOCK_RWLOCK\f[]) and the pointer to the \f[C]lockp\f[] of
\f[C]PMEMmutex\f[] or \f[C]PMEMrwlock\f[] type.
If successful, \f[C]lockp\f[] is added to transaction, locked and
function returns zero.
Otherwise, stage changes to \f[C]TX_STAGE_ONABORT\f[] and an error
number is returned.
In case of \f[C]PMEMrwlock\ lock_type\f[] function acquires a write
lock.
This function must be called during \f[C]TX_STAGE_WORK\f[].
.IP
.nf
\f[C]
void\ pmemobj_tx_abort(int\ errnum);
\f[]
.fi
.PP
The \f[C]pmemobj_tx_abort()\f[] aborts the current transaction and
causes transition to \f[C]TX_STAGE_ONABORT\f[].
This function must be called during \f[C]TX_STAGE_WORK\f[].
If the passed \f[C]errnum\f[] is equal to zero, it shall be set to
\f[C]ECANCELED\f[].
.IP
.nf
\f[C]
void\ pmemobj_tx_commit(void);
\f[]
.fi
.PP
The \f[C]pmemobj_tx_commit()\f[] function commits the current open
transaction and causes transition to \f[C]TX_STAGE_ONCOMMIT\f[] stage.
If called in context of the outer\-most transaction, all the changes may
be considered as durably written upon successful completion.
This function must be called during \f[C]TX_STAGE_WORK\f[].
.IP
.nf
\f[C]
int\ pmemobj_tx_end(void);
\f[]
.fi
.PP
The \f[C]pmemobj_tx_end\f[]() function performs a clean up of a current
transaction.
If called in context of the outer\-most transaction, it releases all the
locks acquired by \f[C]pmemobj_tx_begin()\f[] for outer and nested
transactions.
Then it causes the transition to \f[C]TX_STAGE_NONE\f[].
In case of the nested transaction, it returns to the context of the
outer transaction with \f[C]TX_STAGE_WORK\f[] stage without releasing
any locks.
Must always be called for each \f[C]pmemobj_tx_begin()\f[], even if
starting the transaction failed.
This function must \f[I]not\f[] be called during \f[C]TX_STAGE_WORK\f[].
If transaction was successful, returns 0.
Otherwise returns error code set by \f[C]pmemobj_tx_abort()\f[].
Note that \f[C]pmemobj_tx_abort()\f[] can be called internally by the
library.
.IP
.nf
\f[C]
int\ pmemobj_tx_errno(void);
\f[]
.fi
.PP
The \f[C]pmemobj_tx_errno()\f[] function returns the error code of the
last transaction.
.IP
.nf
\f[C]
void\ pmemobj_tx_process(void);
\f[]
.fi
.PP
The \f[C]pmemobj_tx_process()\f[] function performs the actions
associated with current stage of the transaction, and makes the
transition to the next stage.
It must be called in transaction.
Current stage must always be obtained by a call to
\f[C]pmemobj_tx_stage()\f[].
.IP
.nf
\f[C]
int\ pmemobj_tx_add_range(PMEMoid\ oid,\ uint64_t\ off,\ size_t\ size);
\f[]
.fi
.PP
The \f[C]pmemobj_tx_add_range()\f[] takes a “snapshot” of the memory
block of given \f[C]size\f[], located at given offset \f[C]off\f[] in
the object specified by \f[C]oid\f[] and saves it to the undo log.
The application is then free to directly modify the object in that
memory range.
In case of a failure or abort, all the changes within this range will be
rolled\-back.
The supplied block of memory has to be within the pool registered in the
transaction.
If successful, returns zero.
Otherwise, state changes to \f[C]TX_STAGE_ONABORT\f[] and an error
number is returned.
This function must be called during \f[C]TX_STAGE_WORK\f[].
.IP
.nf
\f[C]
int\ pmemobj_tx_add_range_direct(const\ void\ *ptr,\ size_t\ size);
\f[]
.fi
.PP
The \f[C]pmemobj_tx_add_range_direct()\f[] behaves the same as
\f[C]pmemobj_tx_add_range()\f[] with the exception that it operates on
virtual memory addresses and not persistent memory objects.
It takes a “snapshot” of a persistent memory block of given
\f[C]size\f[], located at the given address \f[C]ptr\f[] in the virtual
memory space and saves it to the undo log.
The application is then free to directly modify the object in that
memory range.
In case of a failure or abort, all the changes within this range will be
rolled\-back.
The supplied block of memory has to be within the pool registered in the
transaction.
If successful, returns zero.
Otherwise, state changes to \f[C]TX_STAGE_ONABORT\f[] and an error
number is returned.
This function must be called during \f[C]TX_STAGE_WORK\f[].
.IP
.nf
\f[C]
PMEMoid\ pmemobj_tx_alloc(size_t\ size,\ uint64_t\ type_num);
\f[]
.fi
.PP
The \f[C]pmemobj_tx_alloc()\f[] transactionally allocates a new object
of given \f[C]size\f[] and \f[C]type_num\f[].
In contrast to the non\-transactional allocations, the objects are added
to the internal object containers of given \f[C]type_num\f[] only after
the transaction is committed, making the objects visible to the
\f[C]POBJ_FOREACH_*\f[] macros.
If successful, returns a handle to the newly allocated object.
Otherwise, stage changes to \f[C]TX_STAGE_ONABORT\f[], \f[C]OID_NULL\f[]
is returned, and \f[C]errno\f[] is set appropriately.
If \f[C]size\f[] equals 0, \f[C]OID_NULL\f[] is returned and
\f[C]errno\f[] is set appropriately.
This function must be called during \f[C]TX_STAGE_WORK\f[].
.IP
.nf
\f[C]
PMEMoid\ pmemobj_tx_zalloc(size_t\ size,\ uint64_t\ type_num);
\f[]
.fi
.PP
The \f[C]pmemobj_tx_zalloc()\f[] function transactionally allocates new
zeroed object of given \f[C]size\f[] and \f[C]type_num\f[].
If successful, returns a handle to the newly allocated object.
Otherwise, stage changes to \f[C]TX_STAGE_ONABORT\f[], \f[C]OID_NULL\f[]
is returned, and \f[C]errno\f[] is set appropriately.
If \f[C]size\f[] equals 0, \f[C]OID_NULL\f[] is returned and
\f[C]errno\f[] is set appropriately.
This function must be called during \f[C]TX_STAGE_WORK\f[].
.IP
.nf
\f[C]
PMEMoid\ pmemobj_tx_realloc(PMEMoid\ oid,\ size_t\ size,\ uint64_t\ type_num);
\f[]
.fi
.PP
The \f[C]pmemobj_tx_realloc()\f[] function transactionally resizes an
existing object to the given \f[C]size\f[] and changes its type to
\f[C]type_num\f[].
If \f[C]oid\f[] is \f[C]OID_NULL\f[], then the call is equivalent to
\f[C]pmemobj_tx_alloc(pop,\ size,\ type_num)\f[].
If \f[C]size\f[] is equal to zero and \f[C]oid\f[] is not
\f[C]OID_NULL\f[], then the call is equivalent to
\f[C]pmemobj_tx_free(oid)\f[].
If the new size is larger than the old size, the added memory will
\f[I]not\f[] be initialized.
If successful, returns returns a handle to the resized object.
Otherwise, stage changes to \f[C]TX_STAGE_ONABORT\f[], \f[C]OID_NULL\f[]
is returned, and \f[C]errno\f[] is set appropriately.
Note that the object handle value may change in result of reallocation.
This function must be called during \f[C]TX_STAGE_WORK\f[].
.IP
.nf
\f[C]
PMEMoid\ pmemobj_tx_zrealloc(PMEMoid\ oid,\ size_t\ size,\ uint64_t\ type_num);
\f[]
.fi
.PP
The \f[C]pmemobj_tx_zrealloc()\f[] function transactionally resizes an
existing object to the given \f[C]size\f[] and changes its type to
\f[C]type_num\f[].
If the new size is larger than the old size, the extended new space is
zeroed.
If successful, returns returns a handle to the resized object.
Otherwise, stage changes to \f[C]TX_STAGE_ONABORT\f[], \f[C]OID_NULL\f[]
is returned, and \f[C]errno\f[] is set appropriately.
Note that the object handle value may change in result of reallocation.
This function must be called during \f[C]TX_STAGE_WORK\f[].
.IP
.nf
\f[C]
PMEMoid\ pmemobj_tx_strdup(const\ char\ *s,\ uint64_t\ type_num);
\f[]
.fi
.PP
The \f[C]pmemobj_tx_strdup()\f[] function transactionally allocates a
new object containing a duplicate of the string \f[C]s\f[] and assigns
it a type \f[C]type_num\f[].
If successful, returns a handle to the newly allocated object.
Otherwise, stage changes to \f[C]TX_STAGE_ONABORT\f[], \f[C]OID_NULL\f[]
is returned, and \f[C]errno\f[] is set appropriately.
This function must be called during \f[C]TX_STAGE_WORK\f[].
.IP
.nf
\f[C]
int\ pmemobj_tx_free(PMEMoid\ oid);
\f[]
.fi
.PP
The \f[C]pmemobj_tx_free()\f[] function transactionally frees an
existing object referenced by \f[C]oid\f[].
If successful, returns zero.
Otherwise, stage changes to \f[C]TX_STAGE_ONABORT\f[] and an error
number is returned.
This function must be called during \f[C]TX_STAGE_WORK\f[].
.PP
In addition to the above API, the \f[B]libpmemobj\f[] offers a more
intuitive method of building transactions using a set of macros
described below.
When using macros, the complete transaction flow looks like this:
.IP
.nf
\f[C]
TX_BEGIN(Pop)\ {

/*\ the\ actual\ transaction\ code\ goes\ here\&...\ */

}\ TX_ONCOMMIT\ {

/*\ optional\ \-\ executed\ only\ if\ the\ above\ block
*\ successfully\ completes\ */

}\ TX_ONABORT\ {

/*\ optional\ \-\ executed\ only\ if\ starting\ the\ transaction\ fails,
*\ or\ if\ transaction\ is\ aborted\ by\ an\ error\ or\ a\ call\ to
*\ pmemobj_tx_abort()
*/

}\ TX_FINALLY\ {

/*\ optional\ \-\ if\ exists,\ it\ is\ executed\ after
*\ TX_ONCOMMIT\ or\ TX_ONABORT\ block
*/

}\ TX_END\ /*\ mandatory\ */
\f[]
.fi
.IP
.nf
\f[C]
TX_BEGIN_LOCK(PMEMobjpool\ *pop,\ ...)
\f[]
.fi
.IP
.nf
\f[C]
TX_BEGIN(PMEMobjpool\ *pop)
\f[]
.fi
.PP
The \f[C]TX_BEGIN_LOCK()\f[] and \f[C]TX_BEGIN()\f[] macros start a new
transaction in the same way as \f[C]pmemobj_tx_begin()\f[], except that
instead of the environment buffer provided by a caller, they set up the
local \f[C]jmp_buf\f[] buffer and use it to catch the transaction abort.
The \f[C]TX_BEGIN()\f[] macro may be used in case when there is no need
to grab any locks prior to starting a transaction (like for a
single\-threaded program).
Each of those macros shall be followed by a block of code with all the
operations that are to be performed atomically.
.IP
.nf
\f[C]
TX_ONABORT
\f[]
.fi
.PP
The \f[C]TX_ONABORT\f[] macro starts a block of code that will be
executed only if starting the transaction fails due to an error in
\f[C]pmemobj_tx_begin()\f[], or if the transaction is aborted.
This block is optional, but in practice it should not be omitted.
If it's desirable to crash the application when transaction aborts and
there's no \f[C]TX_ONABORT\f[] section, application can define
\f[C]POBJ_TX_CRASH_ON_NO_ONABORT\f[] macro before inclusion of
\f[C]<libpmemobj.h>\f[].
It provides default \f[C]TX_ONABORT\f[] section which just calls
\f[B]abort\f[](3).
.IP
.nf
\f[C]
TX_ONCOMMIT
\f[]
.fi
.PP
The \f[C]TX_ONCOMMIT\f[] macro starts a block of code that will be
executed only if the transaction is successfully committed, which means
that the execution of code in \f[C]TX_BEGIN\f[] block has not been
interrupted by an error or by a call to \f[C]pmemobj_tx_abort()\f[].
This block is optional.
.IP
.nf
\f[C]
TX_FINALLY
\f[]
.fi
.PP
The \f[C]TX_FINALLY\f[] macro starts a block of code that will be
executed regardless of whether the transaction is committed or aborted.
This block is optional.
.IP
.nf
\f[C]
TX_END
\f[]
.fi
.PP
The \f[C]TX_END\f[] macro cleans up and closes the transaction started
by \f[C]TX_BEGIN()\f[] or \f[C]TX_BEGIN_LOCK()\f[] macro.
It is mandatory to terminate each transaction with this macro.
If the transaction was aborted, \f[C]errno\f[] is set appropriately.
.PP
Similarly to the macros controlling the transaction flow, the
\f[B]libpmemobj\f[] defines a set of macros that simplify the
transactional operations on persistent objects.
Note that those macros operate on typed object handles, thus eliminating
the need to specify the size of the object, or the size and offset of
the field in the user\-defined structure that is to be modified.
.IP
.nf
\f[C]
TX_ADD_FIELD(TOID\ o,\ FIELD)
\f[]
.fi
.PP
The \f[C]TX_ADD_FIELD()\f[] macro saves in the undo log the current
value of given \f[C]FIELD\f[] of the object referenced by a handle
\f[C]o\f[].
The application is then free to directly modify the specified
\f[C]FIELD\f[].
In case of a failure or abort, the saved value will be restored.
.IP
.nf
\f[C]
TX_ADD(TOID\ o)
\f[]
.fi
.PP
The \f[C]TX_ADD()\f[] macro takes a “snapshot” of the entire object
referenced by object handle \f[C]o\f[] and saves it in the undo log.
The object size is determined from its \f[C]TYPE\f[].
The application is then free to directly modify the object.
In case of a failure or abort, all the changes within the object will be
rolled\-back.
.IP
.nf
\f[C]
TX_ADD_FIELD_DIRECT(TYPE\ *p,\ FIELD)
\f[]
.fi
.PP
The \f[C]TX_ADD_FIELD_DIRECT()\f[] macro saves in the undo log the
current value of given \f[C]FIELD\f[] of the object referenced by
(direct) pointer \f[C]p\f[].
The application is then free to directly modify the specified
\f[C]FIELD\f[].
In case of a failure or abort, the saved value will be restored.
.IP
.nf
\f[C]
TX_ADD_DIRECT(TYPE\ *p)
\f[]
.fi
.PP
The \f[C]TX_ADD_DIRECT()\f[] macro takes a “snapshot” of the entire
object referenced by (direct) pointer \f[C]p\f[] and saves it in the
undo log.
The object size is determined from its \f[C]TYPE\f[].
The application is then free to directly modify the object.
In case of a failure or abort, all the changes within the object will be
rolled\-back.
.IP
.nf
\f[C]
TX_SET(TOID\ o,\ FIELD,\ VALUE)
\f[]
.fi
.PP
The \f[C]TX_SET\f[] macro saves in the undo log the current value of
given \f[C]FIELD\f[] of the object referenced by a handle \f[C]o\f[],
and then set its new \f[C]VALUE\f[].
In case of a failure or abort, the saved value will be restored.
.IP
.nf
\f[C]
TX_SET_DIRECT(TYPE\ *p,\ FIELD,\ VALUE)
\f[]
.fi
.PP
The \f[C]TX_SET_DIRECT\f[] macro saves in the undo log the current value
of given \f[C]FIELD\f[] of the object referenced by (direct) pointer
\f[C]p\f[], and then set its new \f[C]VALUE\f[].
In case of a failure or abort, the saved value will be restored.
.IP
.nf
\f[C]
TX_MEMCPY(void\ *dest,\ const\ void\ *src,\ size_t\ num)
\f[]
.fi
.PP
The \f[C]TX_MEMCPY\f[] macro saves in the undo log the current content
of \f[C]dest\f[] buffer and then overwrites the first \f[C]num\f[] bytes
of its memory area with the data copied from the buffer pointed by
\f[C]src\f[].
In case of a failure or abort, the saved value will be restored.
.IP
.nf
\f[C]
TX_MEMSET(void\ *dest,\ int\ c,\ size_t\ num)
\f[]
.fi
.PP
The \f[C]TX_MEMSET\f[] macro saves in the undo log the current content
of \f[C]dest\f[] buffer and then fills the first \f[C]num\f[] bytes of
its memory area with the constant byte \f[C]c\f[].
In case of a failure or abort, the saved value will be restored.
.IP
.nf
\f[C]
TX_NEW(TYPE)
\f[]
.fi
.PP
The \f[C]TX_NEW()\f[] macro transactionally allocates a new object of
given \f[C]TYPE\f[] and assigns it a type number read from the typed
\f[C]OID\f[].
The allocation size is determined from the size of the user\-defined
structure \f[C]TYPE\f[].
If successful and called during \f[C]TX_STAGE_WORK\f[] it returns a
handle to the newly allocated object.
Otherwise, stage changes to \f[C]TX_STAGE_ONABORT\f[], \f[C]OID_NULL\f[]
is returned, and \f[C]errno\f[] is set appropriately.
.IP
.nf
\f[C]
TX_ALLOC(TYPE,\ size_t\ size)
\f[]
.fi
.PP
The \f[C]TX_ALLOC()\f[] macro transactionally allocates a new object of
given \f[C]TYPE\f[] and assigns it a type number read from the typed
\f[C]OID\f[].
The allocation size is passed by \f[C]size\f[] parameter.
If successful and called during \f[C]TX_STAGE_WORK\f[] it returns a
handle to the newly allocated object.
Otherwise, stage changes to \f[C]TX_STAGE_ONABORT\f[], \f[C]OID_NULL\f[]
is returned, and \f[C]errno\f[] is set appropriately.
.IP
.nf
\f[C]
TX_ZNEW(TYPE)
\f[]
.fi
.PP
The \f[C]TX_ZNEW()\f[] macro transactionally allocates a new zeroed
object of given \f[C]TYPE\f[] and assigns it a type number read from the
typed \f[C]OID\f[].
The allocation size is determined from the size of the user\-defined
structure \f[C]TYPE\f[].
If successful and called during \f[C]TX_STAGE_WORK\f[] it returns a
handle to the newly allocated object.
Otherwise, stage changes to \f[C]TX_STAGE_ONABORT\f[], \f[C]OID_NULL\f[]
is returned, and \f[C]errno\f[] is set appropriately.
.IP
.nf
\f[C]
TX_ZALLOC(TYPE)
\f[]
.fi
.PP
The \f[C]TX_ZALLOC()\f[] macro transactionally allocates a new zeroed
object of given \f[C]TYPE\f[] and assigns it a type number read from the
typed \f[C]OID\f[].
The allocation size is passed by \f[C]size\f[] argument.
If successful and called during \f[C]TX_STAGE_WORK\f[] it returns a
handle to the newly allocated object.
Otherwise, stage changes to \f[C]TX_STAGE_ONABORT\f[], \f[C]OID_NULL\f[]
is returned, and \f[C]errno\f[] is set appropriately.
.IP
.nf
\f[C]
TX_REALLOC(TOID\ o,\ size_t\ size)
\f[]
.fi
.PP
The \f[C]TX_REALLOC()\f[] macro transactionally resizes an existing
object referenced by a handle \f[C]o\f[] to the given \f[C]size\f[].
If successful and called during \f[C]TX_STAGE_WORK\f[] it returns a
handle to the reallocated object.
Otherwise, stage changes to \f[C]TX_STAGE_ONABORT\f[], \f[C]OID_NULL\f[]
is returned, and \f[C]errno\f[] is set appropriately.
.IP
.nf
\f[C]
TX_ZREALLOC(TOID\ o,\ size_t\ size)
\f[]
.fi
.PP
The \f[C]TX_ZREALLOC()\f[] macro transactionally resizes an existing
object referenced by a handle \f[C]o\f[] to the given \f[C]size\f[].
If the new size is larger than the old size, the extended new space is
zeroed.
If successful and called during \f[C]TX_STAGE_WORK\f[] it returns a
handle to the reallocated object.
Otherwise, stage changes to \f[C]TX_STAGE_ONABORT\f[], \f[C]OID_NULL\f[]
is returned, and \f[C]errno\f[] is set appropriately.
.IP
.nf
\f[C]
TX_STRDUP(const\ char\ *s,\ uint64_t\ type_num)
\f[]
.fi
.PP
The \f[C]TX_STRDUP()\f[] macro transactionally allocates a new object
containing a duplicate of the string \f[C]s\f[] and assigns it a type
\f[C]type_num\f[].
If successful and called during \f[C]TX_STAGE_WORK\f[] it returns a
handle to the newly allocated object.
Otherwise, stage changes to \f[C]TX_STAGE_ONABORT\f[], \f[C]OID_NULL\f[]
is returned, and \f[C]errno\f[] is set appropriately.
.IP
.nf
\f[C]
TX_FREE(TOID\ o)
\f[]
.fi
.PP
The \f[C]TX_FREE()\f[] transactionally frees the memory space
represented by an object handle \f[C]o\f[].
If \f[C]o\f[] is \f[C]OID_NULL\f[], no operation is performed.
If successful and called during \f[C]TX_STAGE_WORK\f[] it returns zero.
Otherwise, stage changes to \f[C]TX_STAGE_ONABORT\f[] and an error
number is returned.
.SS CAVEATS
.PP
The transaction flow control is governed by the
\f[B]setjmp\f[](3)/\f[B]longjmp\f[](3) macros and they are used in both
the macro and function flavors of the API.
The transaction will longjmp on transaction abort.
This has one major drawback which is described in the ISO C standard
subsection 7.13.2.1.
It says that \f[B]the values of objects of automatic storage duration
that are local to the function containing the setjmp invocation that do
not have volatile\-qualified type and have been changed between the
setjmp invocation and longjmp call are indeterminate.\f[]
.PP
The following example illustrates the issue described above.
.IP
.nf
\f[C]
int\ *bad_example_1\ =\ NULL;
int\ *bad_example_2\ =\ NULL;
int\ *bad_example_3\ =\ NULL;
volatile\ int\ *good_example\ =\ NULL;

TX_BEGIN(Pop)\ {
\ \ \ \ \ \ \ \ bad_example_1\ =\ malloc(...);
\ \ \ \ \ \ \ \ bad_example_2\ =\ malloc(...);
\ \ \ \ \ \ \ \ bad_example_3\ =\ malloc(...);
\ \ \ \ \ \ \ \ good_example\ =\ malloc(...);
\ \ \ \ \ \ \ \ ...
\ \ \ \ \ \ \ \ pmemobj_tx_abort(EINVAL);\ /*\ manual\ or\ library\ abort\ called\ here\ */

}\ TX_ONCOMMIT\ {
\ \ \ \ \ \ \ \ /*
\ \ \ \ \ \ \ \ \ *\ This\ section\ is\ longjmp\-safe
\ \ \ \ \ \ \ \ \ */
}\ TX_ONABORT\ {
\ \ \ \ \ \ \ \ /*
\ \ \ \ \ \ \ \ \ *\ This\ section\ is\ not\ longjmp\-safe
\ \ \ \ \ \ \ \ \ */

\ \ \ \ \ \ \ \ free(bad_example_1);\ /*\ undefined\ behavior\ */
\ \ \ \ \ \ \ \ \ free(good_example);\ /*\ OK\ */
}\ TX_FINALLY\ {
\ \ \ \ \ \ \ \ /*
\ \ \ \ \ \ \ \ \ *\ This\ section\ is\ not\ longjmp\-safe\ on\ transaction\ abort\ only
\ \ \ \ \ \ \ \ \ */

\ \ \ \ \ \ \ \ free(bad_example_2);\ /*\ undefined\ behavior\ */
}\ TX_END

free(bad_example_3);\ /*\ undefined\ behavior\ */
\f[]
.fi
.PP
Objects which are not volatile\-qualified, are of automatic storage
duration and have been changed between the invocations of
\f[B]setjmp\f[](3) and \f[B]longjmp\f[](3) (that also means within the
work section of the transaction after \f[C]TX_BEGIN\f[]) should not be
used after a transaction abort or should be used with utmost care.
This also includes code after the \f[C]TX_END\f[] macro.
.PP
\f[B]Libpmemobj\f[] is not cancellation\-safe.
The pool will never be corrupted because of canceled thread, but other
threads may stall waiting on locks taken by that thread.
If application wants to use \f[B]pthread_cancel(3)\f[], it must disable
cancellation before calling \f[B]libpmemobj\f[] APIs (see
\f[B]pthread_setcancelstate(3)\f[] with PTHREAD_CANCEL_DISABLE) and
re\-enable it after.
Deferring cancellation (\f[B]pthread_setcanceltype(3)\f[] with
PTHREAD_CANCEL_DEFERRED) is not safe enough, because \f[B]libpmemobj\f[]
internally may call functions that are specified as cancellation points
in POSIX.
.SS LIBRARY API VERSIONING
.PP
This section describes how the library API is versioned, allowing
applications to work with an evolving API.
.IP
.nf
\f[C]
const\ char\ pmemobj_check_version(unsigned\ major_required,\ unsigned\ minor_required);
\f[]
.fi
.PP
The \f[C]pmemobj_check_version()\f[] function is used to see if the
installed \f[B]libpmemobj\f[] supports the version of the library API
required by an application.
The easiest way to do this is for the application to supply the
compile\-time version information, supplied by defines in
\f[C]<libpmemobj.h>\f[], like this:
.IP
.nf
\f[C]
reason\ =\ pmemobj_check_version(PMEMOBJ_MAJOR_VERSION,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ PMEMOBJ_MINOR_VERSION);
if\ (reason\ !=\ NULL)
{
\ \ \ \ /*\ \ version\ check\ failed,\ reason\ string\ tells\ you\ why\ */
}
\f[]
.fi
.PP
Any mismatch in the major version number is considered a failure, but a
library with a newer minor version number will pass this check since
increasing minor versions imply backwards compatibility.
.PP
An application can also check specifically for the existence of an
interface by checking for the version where that interface was
introduced.
These versions are documented in this man page as follows: unless
otherwise specified, all interfaces described here are available in
version 1.0 of the library.
Interfaces added after version 1.0 will contain the text \f[I]introduced
in version x.y\f[] in the section of this manual describing the feature.
.PP
When the version check performed by \f[C]pmemobj_check_version()\f[] is
successful, the return value is \f[C]NULL\f[].
Otherwise the return value is a static string describing the reason for
failing the version check.
The string returned by \f[C]pmemobj_check_version()\f[] must not be
modified or freed.
.SS MANAGING LIBRARY BEHAVIOR
.PP
The library entry points described in this section are less commonly
used than the previous sections.
.IP
.nf
\f[C]
void\ pmemobj_set_funcs(
\ \ \ \ void\ *(*malloc_func)(size_t\ size),
\ \ \ \ void\ (*free_func)(void\ *ptr),
\ \ \ \ void\ *(*realloc_func)(void\ *ptr,\ size_t\ size),
\ \ \ \ char\ *(*strdup_func)(const\ char\ *s));
\f[]
.fi
.PP
The \f[C]pmemobj_set_funcs()\f[] function allows an application to
override memory allocation calls used internally by \f[B]libpmemobj\f[].
Passing in \f[C]NULL\f[] for any of the handlers will cause the
\f[B]libpmemobj\f[] default function to be used.
The library does not make heavy use of the system malloc functions, but
it does allocate approximately 4\-8 kilobytes for each memory pool in
use.
.IP
.nf
\f[C]
int\ pmemobj_check(const\ char\ *path,\ const\ char\ *layout);
\f[]
.fi
.PP
The \f[C]pmemobj_check()\f[] function performs a consistency check of
the file indicated by \f[C]path\f[] and returns 1 if the memory pool is
found to be consistent.
Any inconsistencies found will cause \f[C]pmemobj_check()\f[] to return
0, in which case the use of the file with \f[B]libpmemobj\f[] will
result in undefined behavior.
The debug version of \f[B]libpmemobj\f[] will provide additional details
on inconsistencies when \f[C]PMEMOBJ_LOG_LEVEL\f[] is at least 1, as
described in the \f[B]DEBUGGING AND ERROR HANDLING\f[] section below.
\f[C]pmemobj_check()\f[] will return \-1 and set \f[C]errno\f[] if it
cannot perform the consistency check due to other errors.
\f[C]pmemobj_check()\f[] opens the given \f[C]path\f[] read\-only so it
never makes any changes to the file.
.SS DEBUGGING AND ERROR HANDLING
.PP
Two versions of \f[B]libpmemobj\f[] are typically available on a
development system.
The normal version, accessed when a program is linked using the
\f[C]\-lpmemobj\f[] option, is optimized for performance.
That version skips checks that impact performance and never logs any
trace information or performs any run\-time assertions.
If an error is detected during the call to \f[B]libpmemobj\f[] function,
an application may retrieve an error message describing the reason of
failure using the following function:
.IP
.nf
\f[C]
const\ char\ *pmemobj_errormsg(void);
\f[]
.fi
.PP
The \f[C]pmemobj_errormsg()\f[] function returns a pointer to a static
buffer containing the last error message logged for current thread.
The error message may include description of the corresponding error
code (if \f[C]errno\f[] was set), as returned by \f[B]strerror\f[](3).
The error message buffer is thread\-local; errors encountered in one
thread do not affect its value in other threads.
The buffer is never cleared by any library function; its content is
significant only when the return value of the immediately preceding call
to \f[B]libpmemobj\f[] function indicated an error, or if \f[C]errno\f[]
was set.
The application must not modify or free the error message string, but it
may be modified by subsequent calls to other library functions.
.PP
A second version of \f[B]libpmemobj\f[], accessed when a program uses
the libraries under \f[B]/usr/lib/nvml_debug\f[], contains run\-time
assertions and trace points.
The typical way to access the debug version is to set the environment
variable \f[C]LD_LIBRARY_PATH\f[] to \f[B]/usr/lib/nvml_debug\f[] or
\f[B]/usr/lib64/nvml_debug\f[] depending on where the debug libraries
are installed on the system.
The trace points in the debug version of the library are enabled using
the environment variable \f[C]PMEMOBJ_LOG_LEVEL\f[] which can be set to
the following values:
.IP \[bu] 2
\f[B]0\f[] \- This is the default level when \f[C]PMEMOBJ_LOG_LEVEL\f[]
is not set.
No log messages are emitted at this level.
.IP \[bu] 2
\f[B]1\f[] \- Additional details on any errors detected are logged (in
addition to returning the \f[C]errno\f[]\-based errors as usual).
The same information may be retrieved using \f[C]pmemobj_errormsg()\f[].
.IP \[bu] 2
\f[B]2\f[] \- A trace of basic operations is logged.
.IP \[bu] 2
\f[B]3\f[] \- This level enables a very verbose amount of function call
tracing in the library.
.IP \[bu] 2
\f[B]4\f[] \- This level enables voluminous and fairly obscure tracing
information that is likely only useful to the \f[B]libpmemobj\f[]
developers.
.PP
The environment variable \f[C]PMEMOBJ_LOG_FILE\f[] specifies a file name
where all logging information should be written.
If the last character in the name is “\-”, the PID of the current
process will be appended to the file name when the log file is created.
If \f[C]PMEMOBJ_LOG_FILE\f[] is not set, the logging output goes to
stderr.
.PP
Setting the environment variable \f[C]PMEMOBJ_LOG_LEVEL\f[] has no
effect on the non\-debug version of \f[B]libpmemobj\f[].
See also \f[B]libpmem\f[](3) to get information about other environment
variables affecting \f[B]libpmemobj\f[] behavior.
.SS EXAMPLES
.PP
See <http://pmem.io/nvml/libpmemobj> for examples using the
\f[B]libpmemobj\f[] API.
.SS ACKNOWLEDGEMENTS
.PP
\f[B]libpmemobj\f[] builds on the persistent memory programming model
recommended by the SNIA NVM Programming Technical Work Group:
.PP
<http://snia.org/nvmp>
.SS SEE ALSO
.PP
\f[B]mmap\f[](2), \f[B]munmap\f[](2), \f[B]msync\f[](2),
\f[B]pthread_mutex\f[](3), \f[B]pthread_rwlock\f[](3),
\f[B]pthread_cond\f[](3), \f[B]strerror\f[](3), \f[B]libpmemblk\f[](3),
\f[B]libpmemlog\f[](3), \f[B]libpmem\f[](3), \f[B]libvmem\f[](3) and
<http://pmem.io>.
