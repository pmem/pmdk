.\"
.\" Copyright (c) 2014-2015, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of Intel Corporation nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\"
.\" libpmemobj.3 -- man page for libpmemobj
.\"
.\" Format this man page with:
.\"	man -l libpmemobj.3
.\" or
.\"	groff -man -Tascii libpmemobj.3
.\"
.TH libpmemobj 3 "pmemobj API version 0.3" "NVM Library"
.SH NAME
libpmemobj \- persistent memory transactional object store
.SH SYNOPSIS
.nf
.B #include <libpmemobj.h>
.sp
.B cc ... -lpmemobj -lpmem
.sp
.B Most commonly used functions:
.sp
.BI "PMEMobjpool *pmemobj_open(const char *" path ", const char *" layout );
.BI "PMEMobjpool *pmemobj_create(const char *" path ", const char *" layout ,
.BI "    size_t " poolsize ", mode_t " mode );
.BI "void pmemobj_close(PMEMobjpool *" plp );
.sp
.B XXX API STILL BEING DEFINED...
.sp
.B Library API versioning:
.sp
.BI "const char *pmemobj_check_version("
.BI "    unsigned " major_required ,
.BI "    unsigned " minor_required );
.sp
.B Managing library behavior:
.sp
.BI "void pmemobj_set_funcs("
.BI "    void *(*" malloc_func ")(size_t " size ),
.BI "    void (*" free_func ")(void *" ptr ));
.BI "int pmemobj_check(const char *" path ", const char *" layout );
.fi
.sp
.SH DESCRIPTION
.PP
.B libpmemobj
provides a transactional object store in
.I persistent memory
(pmem).
This library is intended for applications
using direct access storage (DAX),
which is storage that supports load/store access without
paging blocks from a block storage device.
Some types of
.I non-volatile memory DIMMs
(NVDIMMs)
provide this type of byte addressable access to storage.
A
.I persistent memory aware file system
is typically used to expose the direct access to applications.
Memory mapping a file from this type of file system
results in the load/store, non-paged access to pmem.
.B libpmemobj
builds on this type of memory mapped file.
.PP
This library is for applications that need a transactions
and persistent memory management.
This library builds on the low-level pmem support provided by
.BR libpmem ,
handling the transactional updates, flushing changes to
persistence, and recovery for the application.
.PP
.B libpmemobj
is one of a collection of persistent memory libraries available,
the others are:
.IP
.BR libpmemblk (3),
providing pmem-resident arrays of fixed-sized blocks with atomic updates.
.IP
.BR libpmemlog (3),
providing a pmem-resident log file.
.IP
.BR libpmem (3),
low-level persistent memory support.
.PP
Under normal usage,
.B libpmemobj
will never print messages or intentionally cause the process to exit.
The only exception to this is the debugging information, when enabled, as
described under
.B DEBUGGING
below.
.SH MOST COMMONLY USED FUNCTIONS
.PP
To use the pmem-resident transactional object store provided by
.BR libpmemobj ,
a
.I memory pool
is first created.  This is done with the
.BR pmemobj_create ()
function described in this section.
The other functions
described in this section then operate on the resulting
memory pool.
.PP
Once created, the memory pool is represented by an opaque handle,
of type
.IR "PMEMobjpool *" ,
which is passed to most of the other functions in this section.
Internally,
.B libpmemobj
will use either
.BR pmem_persist ()
or
.BR msync (2)
when it needs to flush changes, depending on whether
the memory pool appears to be persistent memory or a regular file
(see the
.BR pmem_is_pmem ()
function in
.BR libpmem (3)
for more information).
There is no need for applications to flush changes directly
when using the log memory API provided by
.BR libpmemobj .
.PP
.BI "PMEMobjpool *pmemobj_open(const char *" path ", const char *" layout );
.IP
The
.B pmemobj_open ()
function opens an existing object store memory pool,
returning a memory pool handle used with most of the functions in this section.
.I path
must be an existing file containing a pmemobj memory pool as
created by
.BR pmemobj_create ().
If
.I layout
is non-NULL, it is compared to the layout name provided to
.BR pmemobj_create ()
when the pool was first created.  This can be used to verify
the layout of the pool matches what was expected.
The application must have permission to open the file and memory map
it with read/write permissions.
If an error prevents the pool from being opened,
or the given
.I layout
does not match the pool's layout,
.BR pmemobj_open ()
returns NULL and sets errno appropriately.
.PP
.BI "PMEMobjpool *pmemobj_create(const char *" path ", const char *" layout ,
.br
.BI "    size_t " poolsize ", mode_t " mode );
.IP
The
.BR pmemobj_create ()
function creates a transactional object store with the given total
.IR poolsize .
.I path
specifies the name of the memory pool file to be created.
.I layout
specifies the application's layout type in the form of a string.
The layout name is not interpreted by
.BR libpmemobj ,
but may be used as a check when
.BR pmemobj_open ()
is called.
The layout name, including the null termination, cannot be longer than
.B PMEMOBJ_LAYOUT_MAX
as defined in
.BR <libpmemobj.h> .
.I mode
specifies the permissions to use when creating the file
as described by
.BR creat (2).
The memory pool file is fully allocated to the size
.I poolsize
using
.BR posix_fallocate (3).
The caller may choose to take responsibility for creating the memory
pool file by creating it before calling
.BR pmemobj_create ()
and then specifying
.I poolsize
as zero.  In this case
.BR pmemobj_create ()
will take the pool size from the size of the existing file and will
verify that the file appears to be empty by searching for any non-zero
data in the pool header at the beginning of the file.
The minimum
file size allowed by the library for a transactional object store is defined in
.B <libpmemobj.h>
as
.BR PMEMOBJ_MIN_POOL .
.PP
.BI "void pmemobj_close(PMEMobjpool *" pop );
.IP
The
.BR pmemobj_close ()
function closes the memory pool indicated by
.I pop
and deletes the memory pool handle.  The object store
itself lives on in the file that contains it and may be re-opened
at a later time using
.BR pmemobj_open ()
as described above.
.PP
.B XXX API STILL BEING DEFINED...
.SH LIBRARY API VERSIONING
.PP
This section describes how the library API is versioned,
allowing applications to work with an evolving API.
.PP
.BI "const char *pmemobj_check_version("
.br
.BI "    unsigned " major_required ,
.br
.BI "    unsigned " minor_required );
.IP
The
.BR pmemobj_check_version ()
function is used to see if the installed
.B libpmemobj
supports the version of the library API required by an application.
The easiest way to do this is for the application to supply the
compile-time version information, supplied by defines in
.BR <libpmemobj.h> ,
like this:
.IP
.nf
reason = pmemobj_check_version(PMEMOBJ_MAJOR_VERSION,
                            PMEMOBJ_MINOR_VERSION);
if (reason != NULL) {
    /*  version check failed, reason string tells you why */
}
.fi
.IP
Any mismatch in the major version number is considered a failure,
but a library with a newer minor version number will pass this
check since increasing minor versions imply backwards compatibility.
.IP
An application can also check specifically for the existence of
an interface by checking for the version where that interface was
introduced.  These versions are documented in this man page as follows:
unless otherwise specified, all interfaces described here are available
in version 1.0 of the library.  Interfaces added after version 1.0
will contain the text
.I introduced in version x.y
in the section of this manual describing the feature.
.IP
When the version check performed by
.BR pmemobj_check_version ()
is successful, the return value is NULL.  Otherwise the return value
is a static string describing the reason for failing the version check.
The string returned by
.BR pmemobj_check_version ()
must not be modified or freed.
.SH MANAGING LIBRARY BEHAVIOR
.PP
The library entry points described in this section are less
commonly used than the previous sections.
.PP
.BI "void pmemobj_set_funcs("
.br
.BI "    void *(*" malloc_func ")(size_t " size ),
.br
.BI "    void (*" free_func ")(void *" ptr ));
.IP
The
.BR pmemobj_set_funcs ()
function allows an application to override memory allocation
calls used internally by
.BR libpmemobj .
Passing in NULL for any of the handlers will cause the
.B libpmemobj
default function to be used.
The library does not make heavy use of the system malloc functions, but
it does allocate approximately 4-8 kilobytes for each memory pool in use.
.PP
.BI "int pmemobj_check(const char *" path ", const char *" layout );
.IP
The
.BR pmemobj_check ()
function performs a consistency check of the file
indicated by
.I path
and returns 1 if the memory pool is found to be consistent.  Any
inconsistencies found will cause
.BR pmemobj_check ()
to return 0, in which case
the use of the file with
.B libpmemobj
will result in undefined behavior.  The debug version of
.B libpmemobj
will provide additional details on inconsistencies when
.B PMEMOBJ_LOG_LEVEL
is at least 1, as described in the
.B DEBUGGING
section below.
.BR pmemobj_check ()
will return -1 and set errno if it cannot perform the
consistency check due to other errors.
.BR pmemobj_check ()
opens the given
.I path
read-only so it never makes any changes to the file.
.SH DEBUGGING
.PP
Two versions of
.B libpmemobj
are typically available on a development system.
The normal version, accessed when a program is
linked using the
.B -lpmemobj
option, is optimized for performance.  That version skips checks
that impact performance and never logs any trace information or performs
any run-time assertions.  A second version, accessed when a program
uses the libraries under
.BR /usr/lib/nvml_debug ,
contains run-time assertions and trace points.
The typical way to access the debug version is to set the environment variable
.B LD_LIBRARY_PATH
to
.BR /usr/lib/nvml_debug
or
.BR /usr/lib64/nvml_debug
depending on where the debug libraries are installed on the system.
The trace points in the debug version of the library
are enabled using the environment variable
.BR PMEMOBJ_LOG_LEVEL ,
which can be set to the following values:
.IP 0
This is the default level when
.B PMEMOBJ_LOG_LEVEL
is not set.  No log messages are emitted at this level.
.IP 1
Additional details on any errors detected are logged (in addition
to returning the errno-based errors as usual).
.IP 2
A trace of basic operations is logged.
.IP 3
This level enables a very verbose amount of function call tracing
in the library.
.IP 4
This level enables voluminous and fairly obscure tracing information
that is likely only useful to the
.B libpmemobj
developers.
.PP
The environment variable
.B PMEMOBJ_LOG_FILE
specifies a file name where all logging information should be written.
If the last character in the name is "-", the PID of the current process
will be appended to the file name when the log file is created.  If
.B PMEMOBJ_LOG_FILE
is not set, the logging output goes to stderr.
.PP
Setting the environment variable
.B PMEMOBJ_LOG_LEVEL
has no effect on the non-debug version of
.BR libpmemobj .
.SH EXAMPLES
.PP
See http://pmem.io/nvml/libpmemobj for examples
using the
.B libpmemobj
API.
.SH ACKNOWLEDGEMENTS
.PP
.B libpmemobj
builds on the persistent memory programming model
recommended by the SNIA NVM Programming Technical Work Group:
.IP
http://snia.org/nvmp
.SH "SEE ALSO"
.BR mmap (2),
.BR munmap (2),
.BR msync (2),
.BR libpmemblk (3),
.BR libpmemlog (3),
.BR libpmem (3),
.BR libvmem (3)
and
.BR http://pmem.io .
