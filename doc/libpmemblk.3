.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "libpmemblk" "3" "" "" ""
.hy
.PP
NAME
.PP
SYNOPSIS
.PP
DESCRIPTION
.PP
MOST COMMONLY USED FUNCTIONS
.PP
LIBRARY API VERSIONING
.PP
MANAGING LIBRARY BEHAVIOR
.PP
DEBUGGING AND ERROR HANDLING
.PP
EXAMPLES
.PP
BUGS
.PP
ACKNOWLEDGEMENTS
.PP
SEE ALSO
.SS NAME
.PP
\f[B]libpmemblk\f[] − persistent memory resident array of blocks
.SS SYNOPSIS
.IP
.nf
\f[C]
#include\ <ibpmemblk.h>

cc\ ...\ \-lpmemblk\ \-lpmem
\f[]
.fi
.SS Most commonly used functions:
.IP
.nf
\f[C]
PMEMblkpool\ *pmemblk_open(const\ char\ *path,\ size_t\ bsize);

PMEMblkpool\ *pmemblk_create(const\ char\ *path,\ size_t\ bsize,\ size_t\ poolsize,\ mode_t\ mode);

void\ pmemblk_close(PMEMblkpool\ *pbp);

size_t\ pmemblk_bsize(PMEMblkpool\ *pbp);

size_t\ pmemblk_nblock(PMEMblkpool\ *pbp);

int\ pmemblk_read(PMEMblkpool\ *pbp,\ void\ *buf,\ long\ long\ blockno);

int\ pmemblk_write(PMEMblkpool\ *pbp,\ const\ void\ *buf,\ long\ long\ blockno);

int\ pmemblk_set_zero(PMEMblkpool\ *pbp,\ long\ long\ blockno);

int\ pmemblk_set_error(PMEMblkpool\ *pbp,\ long\ long\ blockno);
\f[]
.fi
.SS Library API versioning:
.IP
.nf
\f[C]
const\ char\ *pmemblk_check_version(unsigned\ major_required,\ unsigned\ minor_required);
\f[]
.fi
.SS Managing library behavior:
.IP
.nf
\f[C]
void\ pmemblk_set_funcs(
\ \ \ \ void\ *(*malloc_func)(size_t\ size),
\ \ \ \ void\ (*free_func)(void\ *ptr),
\ \ \ \ void\ *(*realloc_func)(void\ *ptr,\ size_t\ size),
\ \ \ \ char\ *(*strdup_func)(const\ char\ *s));

int\ pmemblk_check(const\ char\ *path,\ size_t\ bsize);
\f[]
.fi
.SS Error handling:
.IP
.nf
\f[C]
const\ char\ *pmemblk_errormsg(void);
\f[]
.fi
.SS DESCRIPTION
.PP
\f[B]libpmemblk\f[] provides an array of blocks in \f[I]persistent
memory\f[] (pmem) such that updates to a single block are atomic.
This library is intended for applications using direct access storage
(DAX), which is storage that supports load/store access without paging
blocks from a block storage device.
Some types of \f[I]non\-volatile memory DIMMs\f[] (NVDIMMs) provide this
type of byte addressable access to storage.
A \f[I]persistent memory aware file system\f[] is typically used to
expose the direct access to applications.
Memory mapping a file from this type of file system results in the
load/store, non\-paged access to pmem.
\f[B]libpmemblk\f[] builds on this type of memory mapped file.
.PP
This library is for applications that need a potentially large array of
blocks, all the same size, where any given block is updated atomically
(the update cannot be \f[I]torn\f[] by program interruption such as
power failures).
This library builds on the low\-level pmem support provided by
\f[B]libpmem(3)\f[], handling the transactional update of the blocks,
flushing to persistence, and recovery for the application.
\f[B]libpmemblk\f[] is one of a collection of persistent memory
libraries available, the others are:
.IP \[bu] 2
\f[B]libpmemobj(3)\f[], a general use persistent memory API, providing
memory allocation and transactional operations on variable\-sized
objects.
.IP \[bu] 2
\f[B]libpmemlog(3)\f[], providing a pmem\-resident log file.
.IP \[bu] 2
\f[B]libpmem(3)\f[], low\-level persistent memory support.
.PP
Under normal usage, \f[B]libpmemblk\f[] will never print messages or
intentionally cause the process to exit.
The only exception to this is the debugging information, when enabled,
as described under \f[B]DEBUGGING AND ERROR HANDLING\f[] below.
.SS MOST COMMONLY USED FUNCTIONS
.PP
To use the atomic block arrays supplied by \f[B]libpmemblk\f[], a
\f[I]memory pool\f[] is first created.
This is done with the \f[C]pmemblk_create()\f[] function described in
this section.
The other functions described in this section then operate on the
resulting block memory pool.
Once created, the memory pool is represented by an opaque handle, of
type \f[C]PMEMblkpool*\f[], which is passed to most of the other
functions in this section.
Internally, \f[B]libpmemblk\f[] will use either \f[C]pmem_persist()\f[]
or \f[B]msync\f[](2) when it needs to flush changes, depending on
whether the memory pool appears to be persistent memory or a regular
file (see the \f[C]pmem_is_pmem()\f[] function in \f[B]libpmem\f[](3)
for more information).
There is no need for applications to flush changes directly when using
the block memory API provided by \f[B]libpmemblk\f[].
.IP
.nf
\f[C]
PMEMblkpool\ *pmemblk_open(const\ char\ *path,\ size_t\ bsize);
\f[]
.fi
.PP
The \f[C]pmemblk_open()\f[] function opens an existing block memory
pool, returning a memory pool handle used with most of the functions in
this section.
\f[C]path\f[] must be an existing file containing a block memory pool as
created by \f[C]pmemblk_create()\f[].
The application must have permission to open the file and memory map it
with read/write permissions.
If the \f[C]bsize\f[] provided is non\-zero, \f[C]pmemblk_open()\f[]
will verify the given block size matches the block size used when the
pool was created.
Otherwise, \f[C]pmemblk_open()\f[] will open the pool without
verification of the block size.
The \f[C]bsize\f[] can be determined using the \f[C]pmemblk_bsize()\f[]
function.
If an error prevents the pool from being opened, \f[C]pmemblk_open()\f[]
returns \f[C]NULL\f[] and sets errno appropriately.
A block size mismatch with the\f[C]bsize\f[] argument passed in results
in errno being set to \f[C]EINVAL\f[].
.IP
.nf
\f[C]
PMEMblkpool\ *pmemblk_create(
\ \ \ \ const\ char\ *path,
\ \ \ \ size_t\ bsize,
\ \ \ \ size_t\ poolsize,
\ \ \ \ mode_t\ mode);
\f[]
.fi
.PP
The \f[C]pmemblk_create()\f[] function creates a block memory pool with
the given total \f[C]poolsize\f[] divided up into as many elements of
size \f[C]bsize\f[] as will fit in the pool.
Since the transactional nature of a block memory pool requires some
space overhead in the memory pool, the resulting number of available
blocks is less than \f[C]poolsize\f[] / \f[C]bsize\f[], and is made
available to the caller via the \f[C]pmemblk_nblock()\f[] function
described below.
Given the specifics of the implementation, the number of available
blocks for the user cannot be less than 256.
This translates to at least 512 internal blocks.
\f[C]path\f[] specifies the name of the memory pool file to be created.
\f[C]mode\f[] specifies the permissions to use when creating the file as
described by \f[B]creat\f[](2).
The memory pool file is fully allocated to the size \f[C]poolsize\f[]
using \f[B]posix_fallocate\f[](3).
The caller may choose to take responsibility for creating the memory
pool file by creating it before calling \f[C]pmemblk_create()\f[] and
then specifying \f[C]poolsize\f[] as zero.
In this case \f[C]pmemblk_create()\f[] will take the pool size from the
size of the existing file and will verify that the file appears to be
empty by searching for any non\-zero data in the pool header at the
beginning of the file.
The minimum file size allowed by the library for a block pool is defined
in \f[C]<libpmemblk.h>\f[] as \f[C]PMEMBLK_MIN_POOL\f[].
\f[C]bsize\f[] can be any non\-zero value, however \f[B]libpmemblk\f[]
will silently round up the given size to \f[C]PMEMBLK_MIN_BLK\f[], as
defined in \f[C]<libpmemblk.h>\f[].
.PP
Depending on the configuration of the system, the available space of
non\-volatile memory space may be divided into multiple memory devices.
In such case, the maximum size of the pmemblk memory pool could be
limited by the capacity of a single memory device.
The \f[B]libpmemblk\f[] allows building persistent memory resident array
spanning multiple memory devices by creation of persistent memory pools
consisting of multiple files, where each part of such a \f[I]pool
set\f[] may be stored on different pmem\-aware filesystem.
.PP
Creation of all the parts of the pool set can be done with the
\f[C]pmemblk_create()\f[] function.
However, the recommended method for creating pool sets is to do it by
using the \f[B]pmempool\f[](1) utility.
.PP
When creating the pool set consisting of multiple files, the
\f[C]path\f[] argument passed to \f[C]pmemblk_create()\f[] must point to
the special \f[I]set\f[] file that defines the pool layout and the
location of all the parts of the pool set.
The \f[C]poolsize\f[] argument must be 0.
The meaning of \f[C]layout\f[] and \f[C]mode\f[] arguments doesn't
change, except that the same \f[C]mode\f[] is used for creation of all
the parts of the pool set.
If the error prevents any of the pool set files from being created,
\f[C]pmemblk_create()\f[] returns \f[C]NULL\f[] and sets \f[C]errno\f[]
appropriately.
.PP
When opening the pool set consisting of multiple files, the
\f[C]path\f[] argument passed to \f[C]pmemblk_open()\f[] must not point
to the pmemblk memory pool file, but to the same \f[I]set\f[] file that
was used for the pool set creation.
If an error prevents any of the pool set files from being opened, or if
the actual size of any file does not match the corresponding part size
defined in \f[I]set\f[] file \f[C]pmemblk_open()\f[] returns
\f[C]NULL\f[] and sets \f[C]errno\f[] appropriately.
.PP
The set file is a plain text file, which must start with the line
containing a \f[C]PMEMPOOLSET\f[] string, followed by the specification
of all the pool parts in the next lines.
For each part, the file size and the absolute path must be provided.
.PP
The size has to be compliant with the format specified in IEC 80000\-13,
IEEE 1541 or the Metric Interchange Format.
Standards accept SI units with obligatory B \- kB, MB, GB, ...
(multiplier by 1000) and IEC units with optional "iB" \- KiB, MiB, GiB,
..., K, M, G, ...
\- (multiplier by 1024).
.PP
The minimum file size of each part of the pool set is the same as the
minimum size allowed for a block pool consisting of one file.
It is defined in \f[C]<libpmemblk.h>\f[] as \f[C]PMEMBLK_MIN_POOL\f[].
Lines starting with “#” character are ignored.
.PP
Here is the example “myblkpool.set” file:
.IP
.nf
\f[C]
PMEMPOOLSET
100G\ /mountpoint0/myfile.part0
200G\ /mountpoint1/myfile.part1
400G\ /mountpoint2/myfile.part2
\f[]
.fi
.PP
The files in the set may be created by running the following command:
.PP
\f[C]pmempool\ create\ blk\ <bsize>\ myblkpool.set\f[]
.IP
.nf
\f[C]
void\ pmemblk_close(PMEMblkpool\ *pbp);
\f[]
.fi
.PP
The \f[C]pmemblk_close()\f[] function closes the memory pool indicated
by \f[C]pbp\f[] and deletes the memory pool handle.
The block memory pool itself lives on in the file that contains it and
may be re\-opened at a later time using \f[C]pmemblk_open()\f[] as
described above.
.IP
.nf
\f[C]
size_t\ pmemblk_bsize(PMEMblkpool\ *pbp);
\f[]
.fi
.PP
The \f[C]pmemblk_bsize()\f[] function returns the block size of the
specified block memory pool.
It's the value which was passed as \f[C]bsize\f[] to
\f[C]pmemblk_create()\f[].
\f[C]pbp\f[] must be a block memory pool handle as returned by
\f[C]pmemblk_open()\f[] or \f[C]pmemblk_create()\f[].
.IP
.nf
\f[C]
size_t\ pmemblk_nblock(PMEMblkpool\ *pbp);
\f[]
.fi
.PP
The \f[C]pmemblk_nblock()\f[] function returns the usable space in the
block memory pool, expressed as the number of blocks available.
\f[C]pbp\f[] must be a block memory pool handle as returned by
\f[C]pmemblk_open()\f[] or \f[C]pmemblk_create()\f[].
.IP
.nf
\f[C]
int\ pmemblk_read(PMEMblkpool\ *pbp,\ void\ *buf,\ long\ long\ blockno);
\f[]
.fi
.PP
The \f[C]pmemblk_read()\f[] function reads a block from memory pool
\f[C]pbp\f[], block number \f[C]blockno\f[], into the buffer
\f[C]buf\f[].
On success, zero is returned.
On error, \-1 is returned and \f[C]errno\f[] is set.
Reading a block that has never been written by \f[C]pmemblk_write()\f[]
will return a block of zeroes.
.IP
.nf
\f[C]
int\ pmemblk_write(PMEMblkpool\ *pbp,\ const\ void\ *buf,\ long\ long\ blockno);
\f[]
.fi
.PP
The \f[C]pmemblk_write()\f[] function writes a block from \f[C]buf\f[]
to block number \f[C]blockno\f[] in the memory pool \f[C]pbp\f[].
The write is atomic with respect to other reads and writes.
In addition, the write cannot be torn by program failure or system
crash; on recovery the block is guaranteed to contain either the old
data or the new data, never a mixture of both.
On success, zero is returned.
On error, \-1 is returned and \f[C]errno\f[] is set.
.IP
.nf
\f[C]
int\ pmemblk_set_zero(PMEMblkpool\ *pbp,\ long\ long\ blockno);
\f[]
.fi
.PP
The \f[C]pmemblk_set_zero()\f[] function writes zeros to block number
\f[C]blockno\f[] in memory pool \f[C]pbp\f[].
Using this function is faster than actually writing a block of zeros
since \f[B]libpmemblk\f[] uses metadata to indicate the block should
read back as zero.
On success, zero is returned.
On error, \-1 is returned and \f[C]errno\f[] is set.
.IP
.nf
\f[C]
int\ pmemblk_set_error(PMEMblkpool\ *pbp,\ long\ long\ blockno);
\f[]
.fi
.PP
The \f[C]pmemblk_set_error()\f[] function sets the error state for block
number \f[C]blockno\f[] in memory pool \f[C]pbp\f[].
A block in the error state returns \f[C]errno\f[] EIO when read.
Writing the block clears the error state and returns the block to normal
use.
On success, zero is returned.
On error, \-1 is returned and \f[C]errno\f[] is set.
.SS LIBRARY API VERSIONING
.PP
This section describes how the library API is versioned, allowing
applications to work with an evolving API.
.IP
.nf
\f[C]
const\ char\ *pmemblk_check_version(unsigned\ major_required,\ unsigned\ minor_required);
\f[]
.fi
.PP
The \f[C]pmemblk_check_version()\f[] function is used to see if the
installed \f[B]libpmemblk\f[] supports the version of the library API
required by an application.
The easiest way to do this is for the application to supply the
compile\-time version information, supplied by defines in
\f[C]<ibpmemblk.h>\f[], like this:
.IP
.nf
\f[C]
reason\ =\ pmemblk_check_version(PMEMBLK_MAJOR_VERSION,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ PMEMBLK_MINOR_VERSION);
if\ (reason\ !=\ NULL)
{
\ \ \ \ /*\ \ version\ check\ failed,\ reason\ string\ tells\ you\ why\ */
}
\f[]
.fi
.PP
Any mismatch in the major version number is considered a failure, but a
library with a newer minor version number will pass this check since
increasing minor versions imply backwards compatibility.
.PP
An application can also check specifically for the existence of an
interface by checking for the version where that interface was
introduced.
These versions are documented in this man page as follows: unless
otherwise specified, all interfaces described here are available in
version 1.0 of the library.
Interfaces added after version 1.0 will contain the text \f[I]introduced
in version x.y\f[] in the section of this manual describing the feature.
.PP
When the version check performed by \f[C]pmemblk_check_version()\f[] is
successful, the return value is \f[C]NULL\f[].
Otherwise the return value is a static string describing the reason for
failing the version check.
The string returned by \f[C]pmemblk_check_version()\f[] must not be
modified or freed.
.SS MANAGING LIBRARY BEHAVIOR
.PP
The library entry points described in this section are less commonly
used than the previous sections.
.IP
.nf
\f[C]
void\ pmemblk_set_funcs(
\ \ \ \ void\ *(*malloc_func)(size_t\ size),
\ \ \ \ void\ (*free_func)(void\ *ptr),
\ \ \ \ void\ *(*realloc_func)(void\ *ptr,\ size_t\ size),
\ \ \ \ char\ *(*strdup_func)(const\ char\ *s));
\f[]
.fi
.PP
The \f[C]pmemblk_set_funcs()\f[] function allows an application to
override memory allocation calls used internally by \f[B]libpmemblk\f[].
Passing in \f[C]NULL\f[] for any of the handlers will cause the
\f[B]libpmemblk\f[] default function to be used.
The library does not make heavy use of the system malloc functions, but
it does allocate approximately 4\-8 kilobytes for each memory pool in
use.
.IP
.nf
\f[C]
int\ pmemblk_check(const\ char\ *path,\ size_t\ bsize);
\f[]
.fi
.PP
The \f[C]pmemblk_check()\f[] function performs a consistency check of
the file indicated by \f[I]path\f[] and returns 1 if the memory pool is
found to be consistent.
Any inconsistencies found will cause \f[C]pmemblk_check()\f[] to return
0, in which case the use of the file with \f[B]libpmemblk\f[] will
result in undefined behavior.
The debug version of \f[B]libpmemblk\f[] will provide additional details
on inconsistencies when \f[C]PMEMBLK_LOG_LEVEL\f[] is at least 1, as
described in the \f[B]DEBUGGING AND ERROR HANDLING\f[] section below.
When \f[C]bsize\f[] is non\-zero \f[C]pmemblk_check()\f[] will compare
it to the block size of the pool and return 0 when they don't match.
\f[C]pmemblk_check()\f[] will return \-1 and set \f[C]errno\f[] if it
cannot perform the consistency check due to other errors.
\f[C]pmemblk_check()\f[] opens the given \f[C]path\f[] read\-only so it
never makes any changes to the file.
.SS DEBUGGING AND ERROR HANDLING
.PP
Two versions of \f[B]libpmemblk\f[] are typically available on a
development system.
The normal version, accessed when a program is linked using the
\f[C]\-lpmemblk\f[] option, is optimized for performance.
That version skips checks that impact performance and never logs any
trace information or performs any run\-time assertions.
If an error is detected during the call to \f[B]libpmemblk\f[] function,
an application may retrieve an error message describing the reason of
failure using the following function:
.IP
.nf
\f[C]
const\ char\ *pmemblk_errormsg(void);
\f[]
.fi
.PP
The \f[C]pmemblk_errormsg()\f[] function returns a pointer to a static
buffer containing the last error message logged for current thread.
The error message may include description of the corresponding error
code (if \f[C]errno\f[] was set), as returned by \f[B]strerror\f[](3).
The error message buffer is thread\-local; errors encountered in one
thread do not affect its value in other threads.
The buffer is never cleared by any library function; its content is
significant only when the return value of the immediately preceding call
to \f[B]libpmemblk\f[] function indicated an error, or if \f[C]errno\f[]
was set.
The application must not modify or free the error message string, but it
may be modified by subsequent calls to other library functions.
.PP
A second version of \f[B]libpmemblk\f[], accessed when a program uses
the libraries under \f[B]/usr/lib/nvml_debug\f[], contains run\-time
assertions and trace points.
The typical way to access the debug version is to set the environment
variable \f[C]LD_LIBRARY_PATH\f[] to \f[B]/usr/lib/nvml_debug\f[] or
\f[B]/usr/lib64/nvml_debug\f[] depending on where the debug libraries
are installed on the system.
The trace points in the debug version of the library are enabled using
the environment variable \f[C]PMEMBLK_LOG_LEVEL\f[], which can be set to
the following values:
.IP \[bu] 2
\f[B]0\f[] \- This is the default level when \f[C]PMEMBLK_LOG_LEVEL\f[]
is not set.
No log messages are emitted at this level.
.IP \[bu] 2
\f[B]1\f[] \- Additional details on any errors detected are logged (in
addition to returning the \f[C]errno\f[]\-based errors as usual).
The same information may be retrieved using \f[C]pmemblk_errormsg()\f[].
.IP \[bu] 2
\f[B]2\f[] \- A trace of basic operations is logged.
.IP \[bu] 2
\f[B]3\f[] \- This level enables a very verbose amount of function call
tracing in the library.
.IP \[bu] 2
\f[B]4\f[] \- This level enables voluminous and fairly obscure tracing
information that is likely only useful to the \f[B]libpmemblk\f[]
developers.
.PP
The environment variable \f[C]PMEMBLK_LOG_FILE\f[] specifies a file name
where all logging information should be written.
If the last character in the name is “\-”, the PID of the current
process will be appended to the file name when the log file is created.
If \f[C]PMEMBLK_LOG_FILE\f[] is not set, the logging output goes to
stderr.
.PP
Setting the environment variable \f[C]PMEMBLK_LOG_LEVEL\f[] has no
effect on the non\-debug version of \f[B]libpmemblk\f[].
See also \f[B]libpmem\f[](3) to get information about other environment
variables affecting \f[B]libpmemblk\f[] behavior.
.SS EXAMPLES
.PP
The following example illustrates how the \f[B]libpmemblk\f[] API is
used.
.IP
.nf
\f[C]
#include\ <fcntl.h>
#include\ <errno.h>
#include\ <stdlib.h>
#include\ <unistd.h>
#include\ <string.h>
#include\ <libpmemblk.h>

/*\ size\ of\ the\ pmemblk\ pool\ \-\-\ 1\ GB\ */
#define\ POOL_SIZE\ ((size_t)(1\ <<\ 30))

/*\ size\ of\ each\ element\ in\ the\ pmem\ pool\ */
#define\ ELEMENT_SIZE\ 1024

int
main(int\ argc,\ char\ *argv[])
{
\ \ \ \ const\ char\ path[]\ =\ "/pmem\-fs/myfile";
\ \ \ \ PMEMblkpool\ *pbp;
\ \ \ \ size_t\ nelements;
\ \ \ \ char\ buf[ELEMENT_SIZE];

\ \ \ /*\ create\ the\ pmemblk\ pool\ or\ open\ it\ if\ it\ already\ exists\ */
\ \ \ \ pbp\ =\ pmemblk_create(path,\ ELEMENT_SIZE,\ POOL_SIZE,\ 0666);

\ \ \ if\ (pbp\ ==\ NULL)
\ \ \ \ \ \ \ \ pbp\ =\ pmemblk_open(path,\ ELEMENT_SIZE);

\ \ \ if\ (pbp\ ==\ NULL)\ {
\ \ \ \ \ \ \ \ perror(path);
\ \ \ \ \ \ \ \ exit(1);
\ \ \ \ }

\ \ \ /*\ how\ many\ elements\ fit\ into\ the\ file?\ */
\ \ \ \ nelements\ =\ pmemblk_nblock(pbp);
\ \ \ \ printf("file\ holds\ %zu\ elements",\ nelements);

\ \ \ /*\ store\ a\ block\ at\ index\ 5\ */
\ \ \ \ strcpy(buf,\ "hello,\ world");
\ \ \ \ if\ (pmemblk_write(pbp,\ buf,\ 5)\ <\ 0)\ {
\ \ \ \ \ \ \ \ perror("pmemblk_write");
\ \ \ \ \ \ \ \ exit(1);
\ \ \ \ }

\ \ \ /*\ read\ the\ block\ at\ index\ 10\ (reads\ as\ zeros\ initially)\ */
\ \ \ \ if\ (pmemblk_read(pbp,\ buf,\ 10)\ <\ 0)\ {
\ \ \ \ \ \ \ \ perror("pmemblk_read");
\ \ \ \ \ \ \ \ exit(1);
\ \ \ \ }

\ \ \ /*\ zero\ out\ the\ block\ at\ index\ 5\ */
\ \ \ \ if\ (pmemblk_set_zero(pbp,\ 5)\ <\ 0)\ {
\ \ \ \ \ \ \ \ perror("pmemblk_set_zero");
\ \ \ \ \ \ \ \ exit(1);
\ \ \ \ }

\ \ \ /*\ ...\ */

\ \ \ pmemblk_close(pbp);
}
\f[]
.fi
.PP
See http://pmem.io/nvml/libpmemblk for more examples using the
\f[B]libpmemblk\f[] API.
.SS BUGS
.PP
Unlike \f[B]libpmemobj\f[], data replication is not supported in
\f[B]libpmemblk\f[].
Thus, it is not allowed to specify replica sections in pool set files.
.SS ACKNOWLEDGEMENTS
.PP
\f[B]libpmemblk\f[] builds on the persistent memory programming model
recommended by the SNIA NVM Programming Technical Work Group:
.PP
<http://snia.org/nvmp>
.SS SEE ALSO
.PP
\f[B]mmap\f[](2), \f[B]munmap\f[](2), \f[B]msync\f[](2),
\f[B]strerror\f[](3), \f[B]libpmemobj\f[](3), \f[B]libpmemlog\f[](3),
\f[B]libpmem\f[](3), \f[B]libvmem\f[](3) and \f[B]<http://pmem.io>\f[]
